
@{
    ViewBag.Title = "AttendanceMonitor";
    Layout = "~/Areas/Attendance/Views/Shared/_Sidebar.cshtml";
}
<p >Your IP Address: <span id="ipaddress">@ViewBag.ClientIP</span></p>

<div id="Attendanceform" class="row">
    <div class="col-4">
        <label>Employee ID</label>
        <input type="text" name="Employee_ID" id="Employee_ID" />
    </div>
    <div class="col-4">
        <label>Full Name</label>
        <input type="text" name="Employee_ID" id="Employee_ID" />
    </div>
    <div class="col-4">
        <label>Select Time IN / OUT</label>
        <select id="SelectTime">
            <option value="0">--Select Time IN</option>
            <option value="1">Time IN</option>
            <option value="2">Time OUT</option>
        </select>
    </div>

    <button type="submit">SDasdasddsds</button>
</div>

<div class="Attendance_content">
    <table>
        <thead>
            <tr>
                <th>Employee ID</th>
                <th>Full Name</th>
                <th>Time Check</th>
                <th>Shifts</th>
                <th>Late Time</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>asdsdsad</td>
                <td>asdsdsad</td>
                <td>asdsdsad</td>
                <td>asdsdsad</td>
                <td>asdsdsad</td>
                <td>asdsdsad</td>
                <td>asdsdsad</td>
            </tr>
        </tbody>
    </table>
</div>



<script src="~/Scripts/jquery-3.7.0.js"></script>
<script src="~/Scripts/Utilities.js"></script>
<script src="~/Scripts/Global.js"></script>
<script type="text/javascript">
    const DateToday = new Date().getFullYear();

    let Employeelist = [];
    let Summarylist = [];
    //let ipaddress = String(@ViewBag.ClientIP);
    //let depid = GetDepartmentID();

    const employinput = document.getElementById("Employee_ID");

    employinput.addEventListener('keypress', async (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            // Checks if the input is Empty
            if (e.target.value === "") {
                return;
            }

            // Checks if the Employee is Exist
            let result = Employeelist.filter(emp => emp.EmployeeID === e.target.value);
            if (result.length === 0) {
                console.log("Wrong ID number");
                return;
            }

            let selectedTime = parseInt($("#SelectTime").val());

            if (selectedTime === 0) {
                console.log("Select Time In and Time Out");
                return;
            } else if (selectedTime === 1) {
                let formdata = new FormData();
                formdata.append('Employee_ID', e.target.value);
                formdata.append('SelectTime', $("#SelectTime").val());
                const data = Object.fromEntries(formdata);
                let res = await postData('@Url.Action("AttendanceTimeINandOut", "Attendance")', formdata);
                console.log(res);
                
            } else {

            }


        }
    });



    const LoadEmployeeList = async () => {
        let res = await fetchData('@Url.Action("GetEmployeesList", "Attendance")', { depid: GetDepartmentID() });
        console.log(res);
        if (res.StatusCode === 200) {
            Employeelist = res.Data;
        }
    }
    const GetAttendanceMonitor = async () => {
        let res = await fetchData('@Url.Action("AttendanceTimeInandOutList", "Attendance")', { departmentID: GetDepartmentID(), selectime: 1 });
        if (res.StatusCode === 200) {
            console.log(res);
        }
    }
    // GET THE Department ID based on the IP address
    const GetDepartmentID = () => {
        //const ip = "172.29.1.121";
        let ip = $("#ipaddress").text();
        let segment = ip.split('.')[2];
        switch (parseInt(segment)) {
            case 1:
                //console.log("Ip is in the Rotor Office");
                return 3;
                break;
            default:
                //console.log("Cant get the Ipaddress");
                return 6;
        }
    }


    async function getLocalIP() {
        return new Promise((resolve, reject) => {
            const pc = new RTCPeerConnection({ iceServers: [] });
            pc.createDataChannel(""); // Create a dummy data channel

            pc.createOffer().then(offer => pc.setLocalDescription(offer)).catch(reject);

            pc.onicecandidate = (event) => {
                if (!event || !event.candidate) {
                    pc.close();
                    return;
                }
                const candidate = event.candidate.candidate;
                const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/;
                const ipMatch = candidate.match(ipRegex);
                if (ipMatch) {
                    resolve(ipMatch[1]);
                    pc.close();
                }
            };
        });
    }

    getLocalIP().then(ip => {
        console.log("Local IP Address:", ip);
    }).catch(console.error);



    LoadEmployeeList();
    GetAttendanceMonitor();
</script>
