
@{
    ViewBag.Title = "Rotor";
    var capid = Request.QueryString["capid"];
    Layout = "~/Areas/P1SA/Views/Shared/_Layout.cshtml";
}

<section class="wrapper">
    @*################## HEADER ###################################  *@
    <header class="capacity d-flex justify-content-between mb-3">
        <div class="capacity__title d-flex align-items-center gap-3">
            <a class="d-flex align-items-center justify-content-center" href="/P1SA/PMACS/Selection"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
            <h4 class="capacity__text">@ViewData["processname"]</h4>
        </div>
        <div class="capacity__action">
            <button type="button" class="primary_button_color" id="addbtn" data-toggle="modal" data-target="#addmodal"><i class="fa fa-plus" aria-hidden="true"></i> Add  base model </button>
        </div>
    </header>
    @*################## HEADER ###################################  *@

    <section class="content">
        @*Display the SUmmary DATA*@
        <div class="Summarywrapper">
            @* ######################    Display the Summary Data ###############################*@
            <table class="Summaryheader">
                <thead>
                    <tr>
                        <th style="width: 270px; text-align: left; padding-left: 1em;" id="ChangeHeader">Type of Machine</th>
                        <th id="Displaymachine">Machine no#</th>
                        <th>CycleTime</th>
                        <th>Capacity/day</th>
                        <th>Capacity/Month</th>
                        <th>Forecast</th>
                        <th>Manhour</th>
                        <th>Manpower</th>
                    </tr>
                </thead>
                <tbody id="SummarybodyID">
                    <tr class="Loadercontainer">
                        <td colspan="8">
                            <div class="loader2" id="loadingSpinner"></div>
                        </td>
                    </tr>
                </tbody>
                <tfoot id="footer">
                    <tr>
                        <td style="font-weight: 600;">Total: </td>
                        <td id="totalmach">0</td>
                        <td></td>
                        <td id="TotalDay">0</td>
                        <td id="TotalMonth">0</td>
                        <td id="Totalforecast">0</td>
                        <td id="totalRequired">0</td>
                        <td id="totalManpower">0</td>
                    </tr>
                </tfoot>
            </table>
            @* ##################################################################################*@
        </div>


        <div class="capacity__half">
            @* ########################   Display the Data Table  ###############################*@
            <div class="capacity_col">
                <div class="cap_header">
                    <div class="row">
                        <div class="col-5">
                            <div class="searchinputContainer">
                                <i class="fa-solid fa-magnifying-glass"></i>
                                <input type="text" placeholder="Search here ... " id="searchbox" />
                                <div class="line"></div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="select-container">
                                <select id="Processid" name="Processid">
                                    <option Value="None" data-icon="fas fa-cogs">Process</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                @*DISPLAY THE TABLE DATA*@
                <div class="tablewrap">
                    <table class="CapacityTable captable">
                        <thead>
                            <tr>
                                <th class="sortable">Based Model</th>
                                <th>Demand Quantity</th>
                                <th>Man-hour</th>
                                <th class="sortable">Manpower</th>
                                <th id="headertable">Action</th>
                            </tr>
                        </thead>

                        <tbody id="dataSearching">
                        </tbody>
                    </table>


                    <div id="tableloads" class=" tableloads">
                        <div class='loader2'></div>
                    </div>


                    <div id="empty-state" class="empty">
                        <img src="~/Content/Images/empty.png" />
                        <p>No data Found.</p>
                    </div>
                </div>

                <div class="PaginationfooterContainer d-flex align-items-center justify-content-between">
                    <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

                    <div id="PaginationContainer" class="paginationPartlocal"></div>
                </div>
            </div>

            
            @*######################### FORM  FOR THE PROCESS SUMMARY ###########################*@
            <form class="capacity_col capforms" id="EditCapacity" autocomplete="off">
                <div class="d-flex align-items-center gap-3">
                    <h5 style="margin: 0;">Process Details</h5><i class="fa fa-info-circle"></i>
                </div>
                <hr />

                <div class="Cap__group">
                    <small>Avg. Output per machine :</small>
                    <input type="hidden" name="Proc_CycleTime" id="Proc_CycleTime" class="cycle" />
                    <input type="hidden" id="Proc_Cap_Per_Machine" name="Proc_Cap_Per_Machine" value="0" />
                    <input class="mode num" type="text" id="Cap_Per_Machine_text" name="Cap_Per_Machine_text" value="0" disabled />
                </div>


                <div class="Cap__group">
                    <small>Operation Day (hours):</small>
                    <input class="mode num" type="text" id="Proc_Days" name="Proc_Days" value="0" onkeypress="return restrictChars(event)" />
                </div>


                <div class="Cap__group">
                    <small>Workdays per month :</small>
                    <input class="mode num" type="text" id="Proc_Months" name="Proc_Months" value="0" onkeypress="return restrictChars(event)" />
                </div>

                <div class="Cap__group">
                    <small>Operation Rate:</small>
                    <input class="mode num" type="text" id="Proc_OperationTime" name="Proc_OperationTime" value="0" onkeypress="return restrictChars(event)" />
                </div>

                <hr />

                <button class="Modal__save" type="submit" id="saveEditProcess">
                    <span><i class="fa-regular fa-floppy-disk"></i> Save Details</span>
                </button>


            </form>
         
        </div>
    </section>
</section>


<!--########################## SHOW DETAILS   #############################-->
<div class="modal fade modal-lg" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <div class="custom_modal__icon2">
                        <div class="custom_icon_container">
                            <i class="fa-regular fa-rectangle-list"></i>
                        </div>
                        <div class="custom_modal_title">
                            <span>Capacity Details</span>
                        </div>
                    </div>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="editDetails">
                    <div class="model__fields">
                        <div class="detail__inputfield">
                            <label for="">Model :</label>
                            <input type="hidden" name="Detail_Capinfo_ID" id="Detail_Capinfo_ID">
                            <input class="mode" type="text" name="Detail_Model_name" id="Detail_Model_name" disabled>
                        </div>

                        <div class="detail__inputfield">
                            <label for="">Cycle Time :</label>
                            <input class="editmode" type="text" name="Detail_CycleTime" id="Detail_CycleTime" disabled>
                        </div>

                    </div>

                    <div class="model__fields">

                        <div class="detail__inputfield">
                            <label for="">Capacity per Day :</label>
                            <input class="mode" type="text" name="Detail_Capday" id="Detail_Capday" disabled>
                        </div>

                        <div class="detail__inputfield">
                            <label for="">Cover Drilling:</label>
                            <input class="editmode" type="text" name="Detail_Cover" id="Detail_Cover" disabled>
                        </div>
                    </div>


                    <div class="model__fields">

                        <div class="detail__inputfield">
                            <label for="">Capacity per Month :</label>
                            <input class="mode" type="text" name="Detail_Capmonth" id="Detail_Capmonth" disabled>
                        </div>

                        <div class="detail__inputfield">
                            <label for="">Dream weight:</label>
                            <input class="editmode" type="text" name="Detail_Dream" id="Detail_Dream" disabled>
                        </div>

                    </div>


                    <div class="model__fields">
                        <div class="detail__inputfield">
                            <label for="">Hours :</label>
                            <input class="mode" type="text" name="Detail_Manhour" id="Detail_Manhour" disabled>
                        </div>
                        <div class="detail__inputfield">
                            <label for="">Impeller Drilling:</label>
                            <input class="editmode" type="text" name="Detail_Impeller" id="Detail_Impeller" disabled>
                        </div>
                    </div>

                    <div class="model__fields">
                        <div class="detail__inputfield">
                            <label for="">Manpower :</label>
                            <input class="mode" type="text" name="Detail_Require" id="Detail_Require" disabled>
                        </div>

                        <div class="detail__inputfield">
                            <label for="">Operation Time :</label>
                            <input class="editmode" type="text" name="Detail_Operation_time" id="Detail_Operation_time" disabled>
                        </div>
                    </div>




                    <div class="edits_footer" id="editsdisplay">
                        <button id="Editdetailsbtn"><i class="fa-regular fa-pen-to-square"></i>   Enable the Edit</button>
                        <button type="submit" id="Editsavebtn">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save Details</span>
                        </button>
                    </div>
                </form>
            </div>


        </div>
    </div>
</div>



<script type="text/javascript">
     // CAPACITY PROCESSS type
     let cap_groupID = parseInt(@capid);
     // Users Role
     let roleint = 1;

     // Get the current year date
      const currentYear = new Date().getFullYear();
      const Month = new Date().toLocaleString('en-US', { month: 'long' });
      // Forms For the edit and Add data
      const processform = document.querySelector('#EditCapacity');
      const detailsform = document.querySelector('#editDetails');
      const addmodelform = document.querySelector('#addnewmodel');


      // Buttons use
      const showaddmodal = document.getElementById("addbtn");
      const showeditmode = document.getElementById("Editdetailsbtn");
      //const editenable = document.getElementById("fanEnableEdit");

      const processchange = document.getElementById('Processid');

      var counter = 0;
      var EditId = 0;
      var days = 0.0;
      var months = 0;
      var machine = 0;
      var processcode = "";
      var processcheck = 0;
      var summarycheck = 0;
      var EmployeeID;
      var machinecount;
      var indexvalue = 0;


      // Stores all data
      let SummaryData = [];
      let TableData = [];
      let ModelsData = [];
      let SummaryTableData = [];

      // Display the current month to comboBox
      $("#calendar").val(Month);
     

    $("#Editsavebtn").css("display", "none");
    let Summaryload_table = $("#SummarybodyID");

    const GetCapacitySummary = async() => {
        loadingSummary();
        let res = await FetchAuthenticate('@Url.Action("GetCapacitySummaryList", "Capacity")', { month: Month, capid: cap_groupID });
          if (res && res.Success) {
             SummaryData = res.Data;


              //DISPLAY THE ALL THE PROCESS CAPACITY
              let process = [...new Set(SummaryData.map(el => el.ProcessCode))].map(proc => {
                  let Process = SummaryData.find(el => el.ProcessCode === proc).ProcessName;
                  return {
                      ProcessCode: proc,
                      ProcessName: Process
                  };
              });

              $.each(process, function (index, row) {
                  $("#Processid").append("<option value='" + row.ProcessCode + "'>" + row.ProcessName + "</option>");
                  $("#process").append("<option value='" + row.ProcessCode + "'>" + row.ProcessName + "</option>");
              });



             displaySummaryTable(SummaryData, 0);
          }
      }
    const GetRotorData = async () => {
          var SetData = $("#dataSearching");
          $("#dataSearching").empty();
          $("#tableloads").show();
           let res = await FetchAuthenticate('@Url.Action("GetRotorModelData", "Capacity")', { CapID: cap_groupID, Month: Month });
           if (res &&  res.Success) {
               TableData = res.Data;
               $("#tableloads").hide();
               $('#empty-state').hide();
               //displayTableData(TableData);
               displayPagination(TableData, 'dataSearching', 'PaginationContainer', 20, 5);
           }
       }

    const userDataRole = () => {

           if (roleint == 2) {
               $("#saveEditProcess").hide();
               $("#saveEdit").hide();
               $("#addbtn").hide();
               $("#editsdisplay").hide();
               $("#hideruler").hide();
               $("#headertable").hide();
               //$("#fanEnableEdit")
               $('.mode').prop('disabled', true);

           }
       }


    function loadingSummary() {
        Summaryload_table.empty();
        var loadData = "<tr class='Loadercontainer'>  " +
            "<td colspan = '8' > " +
            "<div class='loader2' id='loadingSpinner'></div> " +
            "</td>" +
            "</tr > ";
        Summaryload_table.append(loadData);
    }


    function displaySummaryTable(data, filter) {
        let totalmachoine = 0;
        let totalfore = 0;
        let totalcapday = 0;
        let totalcap = 0;
        let totalHour = 0;
        let totalMan = 0;
        switch (filter) {
            case 1:
                //DISPLAY SUMMARY FOR THE PROCESS DATA
                $("#ChangeHeader").text("Machine Type");
                $("#Displaymachine").show();
                $("#footer").hide();

                Summaryload_table.empty();

                $.each(data, function (index, rowData) {
                    var getdata = "<tr class= 'row_" + index + "  '>" +
                        "<td style='font-weight: 500; color: #222;'>" + rowData.ProcessName + "</td>" +
                        "<td contenteditable='true'>" + rowData.AvailMachine + "</td>" +
                        "<td contenteditable='true'>" + RoundNumberOne(rowData.CycleTime) + "</td>" +
                        "<td>" + getFormatComma(rowData.Capday) + "</td>" +
                        "<td>" + getFormatComma(rowData.Capmonth) + "</td>" +
                        "<td>" + getFormatComma(rowData.Forecast) + "</td>" +
                        "<td>" + RoundNumber(rowData.Totalhours) + "</td>" +
                        "<td>" + RoundNumber(rowData.RequiredMan) + "</td>" +
                        "</tr>";
                    Summaryload_table.append(getdata);
                });


                break;
            default:
                //DISPLAY FOR THE FIRST LOADING PAGE
                //CHANGE  AND REMOVE THE COLUMN HEADER NAME
                $("#ChangeHeader").text("Machine Type");
                $("#Displaymachine").show();
                $("#footer").show();

                //DISPLAY SUMMARY DATA
                Summaryload_table.empty();

                $.each(data, function (index, rowData) {

                    var getdata = "<tr class= 'row_" + index + "  '>" +
                        "<td style='color: #1c65a8; font-weight: 500;'>" + rowData.ProcessName + "</td>" +
                        "<td>" + rowData.AvailMachine + "</td>" +
                        "<td>" + RoundNumberOne(rowData.CycleTime) + "</td>" +
                        "<td>" + getFormatComma(rowData.Capday) + "</td>" +
                        "<td>" + getFormatComma(rowData.Capmonth) + "</td>" +
                        "<td>" + getFormatComma(rowData.Forecast) + "</td>" +
                        "<td>" + RoundNumber(rowData.Totalhours) + "</td>" +
                        "<td>" + RoundNumber(rowData.RequiredMan) + "</td>" +
                        "</tr>";
                    Summaryload_table.append(getdata);

                    totalfore += rowData.Forecast
                    totalmachoine += rowData.AvailMachine
                    totalcapday += rowData.Capday
                    totalcap += rowData.Capmonth
                    totalHour += rowData.Totalhours
                    totalMan += rowData.RequiredMan
                });


                // Handle click event for edit button
                //$(document).on('click', '.Editsummary', function (e) {
                //    e.stopPropagation();
                //    const buttonId = $(this).attr('id');
                //    const procode = buttonId.split('_')[1];
                //    const result = SummaryData.find(p => p.Procode == procode);

                //    if (result) {
                //        let total = result.Capday;
                //        $("#Process_code").val(result.Procode);
                //        $("#Avail_Machine").val(result.mach);
                //        $("#CycleTime").val(result.CT);
                //        $("#Days").val(result.Days);
                //        $("#Ope").val(result.Ope);
                //        $("#permach").text(Math.floor(total.toFixed(2)));
                //        $("#editSummarymodal").modal("show");
                //    }
                //});


                $("#totalmach").text(getFormatComma(totalmachoine));
                $("#TotalMonth").text(getFormatComma(totalcap));
                $("#TotalDay").text(getFormatComma(totalcapday));
                $("#Totalforecast").text(getFormatComma(totalfore));
                $("#totalRequired").text(RoundNumber(totalHour));
                $("#totalManpower").text(RoundNumber(totalMan));
                break;
        }
    }
    function displayTableData(data) {
         var SetData = $("#dataSearching");
         let buttons = '';

         $("#tableloads").hide();
         $('#empty-state').hide();
         $("#dataSearching").empty();

         $.each(data, function (index, rowData) {
             if (roleint !== 2) {
                 $("#headertable").show();
                 buttons = "<button type='button' class='btn actionicon text-danger deleteButton' id='deleteButton_" + rowData.Capinfo_ID + "' >" +
                     "<i class='fa-regular fa-trash-can'></i>" +
                     "</button>";
             } else {
                 $("#headertable").hide();
             }


             var getdata = "<tr class= 'row_" + index + "  rowClick' id='editButton_" + rowData.Capinfo_ID + "'>" +
                 "<td style='width: 50%'> " +
                 "<p style='font-weight: 600; margin: 0'>" + rowData.Model_name + "</p>" +
                 "</td>" +
                 "<td style='color: #1a82e4; font-weight: 500;'>" + rowData.foredata + "</td>" +
                 "<td style='text-align: center'>" + RoundNumberOne(rowData.manhour) + "</td>" +
                 "<td style='text-align: center'>" + RoundNumberOne(rowData.Require) + "</td>" +
                 "<td>" +
                 buttons +
                 "</td>" +
                 "</tr>";
             SetData.append(getdata);
     });

     // Clicks the row Table and shows the details
     $(document).on('click', '.rowClick', function (e) {
         if (!$(e.target).closest('.deleteButton').length) {
             var rowId = $(this).attr('id');
             var rowIndex = rowId.split('_')[1];
             let searchData = TableData.filter(item => item.Capinfo_ID === parseInt(rowIndex));
             indexvalue = TableData.findIndex(item => item.Capinfo_ID === parseInt(rowIndex));
             $("#Detail_Capinfo_ID").val(searchData[0].Capinfo_ID);
             $("#Detail_Impeller").val(searchData[0].Impeller);
             $("#Detail_Dream").val(searchData[0].Dream);
             $("#Detail_CycleTime").val(searchData[0].CycleTime);
             $("#Detail_Cover").val(searchData[0].Cover);
             $("#Detail_Model_name").val(searchData[0].Model_name);
             $("#Detail_Manhour").val(RoundNumberOne(searchData[0].manhour));
             $("#Detail_Operation_time").val(searchData[0].Operation_time);
             $("#Detail_Require").val(RoundNumberOne(searchData[0].Require));
             $("#Detail_Capday").val(searchData[0].Capday);
             $("#Detail_Capmonth").val(searchData[0].Capmonth);

             $("#detailsModal").modal("show");

         }
     });

     // Handle click event for the delete button
     $(document).on('click', '.deleteButton', function (e) {
         e.stopPropagation(); // Prevent triggering the row click event
         var buttonId = $(this).attr('id');
         var rowIndex = buttonId.split('_')[1];
         let Monthcalendar = $("#calendar").val();
         // Handle delete button click logic here
         Swal.fire({
             title: "Remove this modelbase data?",
             text: "You won't be able to revert this!",
             icon: "warning",
             showCancelButton: true,
             confirmButtonColor: "#3085d6",
             cancelButtonColor: "#d33",
             confirmButtonText: "Yes, delete it!"
         }).then( async (result) => {
             if (result.isConfirmed) {
                 // Send the form data via AJAX

                 var formData = new FormData();
                 formData.append('Capinfo_ID', rowIndex);
                 formData.append('Capgroup_ID', cap_groupID);
                 formData.append('ProcessCode', processcode);
                 let res = await postData('@Url.Action("DeleteModelsData", "PostCapacity")', formData);
                 if (res.StatusCode === 200) {
                     Swal.fire({
                         title: "Deleted!",
                         text: "Your file has been deleted.",
                         icon: "success"
                     });
                 }


             }
         });
     });

     
 }
    function displayPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 20, visibleButtons = 5) {
         let currentPage = 1;
         let filteredData = [...dataArray]; // Make a copy for filtering

         const updatePaginationInfo = () => {
             const totalRecords = filteredData.length;
             const totalPages = Math.ceil(totalRecords / recordsPerPage);

             $("#totalpageID").text(totalPages);
             $("#DatalengthID").text(totalRecords);

             return totalPages;
         };

         const renderTable = (page) => {
             const totalPages = updatePaginationInfo();
             const startIndex = (page - 1) * recordsPerPage;
             const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
             const tableBody = document.getElementById(tableBodyId);
             tableBody.innerHTML = '';

             for (let i = startIndex; i < endIndex; i++) {
                 let buttons;
                 const rowData = filteredData[i];
                 if (roleint !== 2) {
                     $("#headertable").show();
                     buttons = "<button type='button' class='btn actionicon text-danger deleteButton' id='deleteButton_" + rowData.Capinfo_ID + "' >" +
                         "<i class='fa-regular fa-trash-can'></i>" +
                         "</button>";
                 } else {
                     $("#headertable").hide();
                 }


                 const rowHtml = ` <tr class='row_${i} rowClick' id='editButton_${rowData.Capinfo_ID}'>
                                      <td data-cell="Model_name">${rowData.Model_name}</td>
                                      <td data-cell="foredata">${rowData.foredata}</td>
                                      <td data-cell="manhour">${RoundNumberOne(rowData.manhour)}</td>
                                      <td data-cell="Require">${RoundNumberOne(rowData.Require)}</td>
                                      <td data-cell="Action">${buttons}</td>
                                  </tr>`;

                 tableBody.innerHTML += rowHtml;
             }

             $("#pagecountID").text(currentPage);
         };

         const renderPagination = () => {
             const totalPages = updatePaginationInfo();
             const paginationContainer = document.getElementById(paginationId);
             paginationContainer.innerHTML = '';

             let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
             let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

             if (endPage > totalPages) {
                 endPage = totalPages;
                 startPage = Math.max(1, endPage - visibleButtons + 1);
             }

             if (totalPages <= visibleButtons) {
                 startPage = 1;
                 endPage = totalPages;
             }

             // Previous button
             paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                                            <i class="fa-solid fa-backward"></i>
                                        </button>`;

             for (let i = startPage; i <= endPage; i++) {
                 paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
             }

             // Next button
             paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                                           <i class="fa-solid fa-forward"></i>
                                        </button>`;
         };

         const changePage = (page) => {
             if (page >= 1 && page <= updatePaginationInfo()) {
                 currentPage = page;
                 renderTable(currentPage);
                 renderPagination();
             }
         };

         // 🔍 Search functionality
         const searchTable = () => {
             const query = $('#searchbox').val().toLowerCase();

             filteredData = dataArray.filter(item =>
                 item.Model_name.toLowerCase().includes(query)
             );

             currentPage = 1;
             renderTable(currentPage);
             renderPagination();
         };

         // Add event listener for search input
         $('#searchbox').on('input', searchTable);

         // Handle click event for edit button
         $(document).on('click', '.rowClick', function (e) {
             e.stopPropagation();
             const buttonId = $(this).attr('id');
             const rowIndex = buttonId.split('_')[1];
             let searchData = TableData.filter(item => item.Capinfo_ID === parseInt(rowIndex));
             indexvalue = TableData.findIndex(item => item.Capinfo_ID === parseInt(rowIndex));
             processcode = searchData[0].ProcessCode;
             $("#Detail_Capinfo_ID").val(searchData[0].Capinfo_ID);
             $("#Detail_Impeller").val(searchData[0].Impeller);
             $("#Detail_Dream").val(searchData[0].Dream);
             $("#Detail_CycleTime").val(searchData[0].CycleTime);
             $("#Detail_Cover").val(searchData[0].Cover);
             $("#Detail_Model_name").val(searchData[0].Model_name);
             $("#Detail_Manhour").val(RoundNumberOne(searchData[0].manhour));
             $("#Detail_Operation_time").val(searchData[0].Operation_time);
             $("#Detail_Require").val(RoundNumberOne(searchData[0].Require));
             $("#Detail_Capday").val(searchData[0].Capday);
             $("#Detail_Capmonth").val(searchData[0].Capmonth);

             $("#detailsModal").modal("show");
         });

          // UPDATES THE DETAILS DATA
          detailsform.addEventListener('submit', async (e) => {
              e.preventDefault();

              let formData = new FormData(e.target);
              formData.append('ProcessCode', processcode);
              formData.append('Capgroup_ID', cap_groupID);
              const data = Object.fromEntries(formData);
              let res = await postData('@Url.Action("EditRotorModels", "PostCapacity")', formData);
              console.log(res);

              //EditResult(res, data);
         });

         // Initialize table and pagination
         window.changePage = changePage;
         renderTable(currentPage);
         renderPagination();
     }

    // ############## FILTER DATA FROM THE PAGE ########################
    $(document).ready(function () {
        //ENABLE THE INPUT CONTROLS
        showeditmode.addEventListener('click', event => {
            event.preventDefault();
            $(".editmode").prop('disabled', false);
            $("#Editdetailsbtn").css("display", "none");
            $("#Editsavebtn").css("display", "grid");
        });
        //showaddmodal.addEventListener('click', function (e) {
        //    e.preventDefault();
        //    let Monthcalendar = $("#calendar").val();
        //    $("#forecast").empty();
        //    makeAjaxRequest(apiBaseUrl + 'GetotherModelBase', { month: Monthcalendar, capid: cap_groupID }, 0)
        //        .then(data => {



        //            let modeldata = data.modelbase;

        //            if (modeldata.length > 0) {
        //                $.each(modeldata, function (index, row) {
        //                    $("#forecast").append("<option value='" + row.Model_name + "'>" + row.Model_name + "</option>");
        //                });

        //                $(".saveEditsum").prop('disabled', false);
        //                $("#newmodel").css("opacity", "0");
        //            } else {

        //                $("#newmodel").css("opacity", "1");
        //                $(".saveEditsum").prop('disabled', true);
        //            }
        //        })
        //        .catch(error => {
        //            console.error('Error occurred:', error);
        //            // Handle the error
        //        });


        //    $("#addmodal").modal("show");
        //});

        // Filter DATA
        processchange.addEventListener('change', event => {
            loadingSummary();

            $("#dataSearching").empty();
            $("#tableloads").show();
            summarycheck = 1;
            let newData = [];
            let prodnewData = [];
            let summaryNewData = [];
            let num;
            let model;

            const selectedCode = event.target.value;

            if (selectedCode !== 'None') {
                //FOR TABLE DATA
                newData = TableData.filter(item => item.ProcessCode === selectedCode);
                //FOR SUMMARY DATA
                prodnewData = SummaryData.filter(item => item.ProcessCode === selectedCode);
                summaryNewData = prodnewData;

                //UPDATES  THE DROPDOWN MODEL
                //model = ModelsData.filter(item => item.ProcessCode === processData);
                num = 1;

                //SET THE VALUE TO THE PROCESS FORM
                machinecount = summaryNewData[0].AvailMachine;

                processcode = summaryNewData[0].ProcessCode;
                $("#Cap_Per_Machine_text").val(summaryNewData[0].Cap_Per_Machine);
                $("#Proc_Months").val(summaryNewData[0].Months);
                $("#Proc_OperationTime").val(summaryNewData[0].OperationTime);
                $("#Proc_Days").val(summaryNewData[0].Days);
                $("#Proc_Cap_Per_Machine").val(RoundNumber(summaryNewData[0].Cap_Per_Machine));
                $("#Proc_CycleTime").val(summaryNewData[0].CycleTime);

                $("#EditCapacity").show();
                $('#pagination-container').hide();
            } else {
                newData = TableData;
                summaryNewData = SummaryData;
                model = ModelsData;
                num = 0;
                $("#EditCapacity").hide();
                $('#pagination-container').show();
            }
            displaySummaryTable(summaryNewData, num);
            displayPagination(newData, 'dataSearching', 'PaginationContainer', 20, 5);
        });

        //addmodelform.addEventListener('submit', event => {
        //    event.preventDefault();
        //    // Create a FormData object from the form element
        //    let Monthcalendar = $("#calendar").val();

        //    let data2 = {
        //        month: Monthcalendar, capid: cap_groupID, Months: currentYear
        //    }

        //    let data = {
        //        month: Monthcalendar, capid: cap_groupID
        //    }

        //    let formData = new FormData(event.target);
        //    formData.append('GroupID', cap_groupID);

        //    const logdata = Object.fromEntries(formData);
        //    processcode = logdata.process;

        //    $.ajax({
        //        url: apiBaseUrl + "AddmodelBalancing", // The URL to the Web API endpoint
        //        type: 'POST',
        //        data: formData,
        //        processData: false, // Do not process data
        //        contentType: false, // Do not set contentType
        //        success: function (res) {
        //            setTimeout(() => {
        //                if (res.code == 200) {
        //                    Swal.fire({
        //                        title: "Add success",
        //                        text: res.message,
        //                        icon: "success",
        //                        showConfirmButton: false,
        //                        timer: 1500
        //                    }).then(() => {
        //                        //reset the Array
        //                        SummaryData = [];
        //                        TableData = [];
        //                        addmodelform.reset();
        //                        $("#addmodal").modal("hide");
        //                        $("#process").empty();

        //                        getSummaryAll(data2, 0);
        //                        getTable(data, 0);
        //                        getForescastData();

        //                        //UPDATES THE CURRENT SUMMARY
        //                        getUpdateSummaryAll();
        //                    });
        //                } else {
        //                    Swal.fire({
        //                        icon: "error",
        //                        title: "Oops...",
        //                        text: "Something went wrong!",
        //                        showConfirmButton: false
        //                    });
        //                }
        //            }, 200);

        //        },
        //        error: function (jqXHR, textStatus, errorThrown) {
        //            // Handle the error response
        //            alert('An error occurred while uploading the image and text.');
        //            console.error(textStatus, errorThrown);
        //        }
        //    });

        //});

        // EDIT PROCESS  DATA
       processform.addEventListener('submit', async (e) => {
              e.preventDefault();
              let formData = new FormData(e.target);
              formData.append('ProcessCode', processcode);
              formData.append('Capgroup_ID', cap_groupID);

              const data = Object.fromEntries(formData);

              let res = await postData('@Url.Action("UpdateProcessCap", "PostCapacity")', data);
              if (res.StatusCode === 201) {
                  const savebtn = document.querySelector("#saveEditProcess");
                  savebtn.innerHTML = " <div class='Submitloading'></div>"
                  Swal.fire({
                      title: "Edit Successful",
                      icon: "success",
                      showConfirmButton: false,
                      timer: 1500
                  }).then(() => {
                      savebtn.innerHTML = "<span><i class='fa-regular fa-floppy-disk'></i>  Save Details</span>"
                      GetCapacitySummary();
                  });
              } else {
                  Swal.fire({
                      icon: "error",
                      text: res.Message,
                      timer: 1500,
                      showConfirmButton: false
                  });
              }


          });

    });

   

    function EditResult(res, data) {

        if (res && res.Success) {
            Swal.fire({
                title: "Edit Successful",
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {

                let newmanhour = parseInt(TableData[indexvalue].foredata) * parseFloat(data.Detail_CycleTime) / parseFloat(data.Detail_Actual_cav) / 60 / 60;
                let newmanpower = parseInt(TableData[indexvalue].foredata) * parseFloat(data.Detail_CycleTime) / parseFloat(data.Detail_Actual_cav) / 60 / 60 / 24 / parseFloat(data.Detail_Operation_time);

                //Updates the Summary table
                TableData[indexvalue].Actual_Cav = parseInt(data.Detail_Actual_cav);
                TableData[indexvalue].CycleTime = parseFloat(data.Detail_CycleTime);
                TableData[indexvalue].DieQty = parseInt(data.Detail_Dieqty);
                TableData[indexvalue].Operation_time = parseFloat(data.Detail_Operation_time);
                TableData[indexvalue].Manhour = parseFloat(newmanhour);
                TableData[indexvalue].Manpower = parseFloat(newmanpower);
                TableData[indexvalue].Require = parseFloat(newmanpower);


                GetCapacitySummary();
                displayTableData(TableData);
                $('.editmode').prop('disabled', true);
                $("#Editdetailsbtn").css("display", "flex");
                $("#Editdetailsbtn").css("align-items", "center");
                $("#Editdetailsbtn").css("justify-content", "center");
                $("#Editdetailsbtn").css("gap", ".4em");
                $("#Editsavebtn").css("display", "none");

                $("#detailsModal").modal("hide");
            });
        } else {
            Swal.fire({
                icon: "error",
                text: res.Message,
                timer: 1500,
                showConfirmButton: false
            });
        }
    }

    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const InitializeData = () => {
        $("#EditCapacity").show();
        // GET THE USERS DATA
        //userDataRole();
        // GET SUMMARY DATA FOR ALL
        GetCapacitySummary();
        // GET THE TABLE DATA
        GetRotorData();
    }

    // ##############  LOADS THE DATA WHEN THE PAGE IS LOADED ##############
    InitializeData();
</script>