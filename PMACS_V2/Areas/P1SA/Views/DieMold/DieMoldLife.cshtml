
@{
    ViewBag.Title = "DieMoldLife";
    Layout = "~/Areas/P1SA/Views/Shared/_Layout.cshtml";
}

<section>
    <header class="MainHeader">
        <div class="MoldTitle">
            <h4>Molding Mold Die Life </h4>
            <small>Manage Mold die Monitoring</small>
        </div>
        <div class="Mold__actions">
            @* MOLD SUMMARY *@
            <div id="MoldSummary">
                <div class="d-flex align-items-center gap-3">
                    <div class="select-container">
                        <select id="ProcessID">
                            <option value="M002">Mold  Frame</option>
                            <option value="M001">ACM</option>
                            <option value="M003">Mold Impeller</option>
                            <option value="M004">Slot Insulator </option>
                            <option value="M005">Stepping Motor</option>
                        </select>
                    </div>


                    <div class="searchinputContainer">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <input type="text" placeholder="Search here ... " id="Summarysearchbox" />
                        <div class="line"></div>
                    </div>
                </div>
            </div>
            @* MOLD MOnitoring *@
            <div id="MoldMonitor">
                <button class="primary_button_color" id="addMold"><i class="fa-solid fa-plus"></i> Add Data</button>
            </div>
            @* MOLD TOOLING*@
            <div id="MoldTooling">
                <div class="d-flex align-items-center gap-2">
                    <button class="primary_button_color" id="Registrymodal"><i class="fa-solid fa-plus"></i> Add Data</button>
                    <button id="Exportbtn"><i class="fa-solid fa-file-arrow-down"></i>Export Data</button>
                </div>
            </div>
        </div>
    </header>


    <div class="Mold_tabcontainer">
        <div class="Mold_tabs">
            <button class="Mold_tab active" data-target="Summary">Summary</button>
            <button class="Mold_tab" data-target="Monitoring">Monitoring</button>
            <button class="Mold_tab" data-target="Tooling">Tooling</button>
            <div class="Mold_slider"></div>
        </div>

        <div class="Mold_contentbox">
            <div class="Mold_content show" id="Summary">
                <div class="row">
                    <div class="col-lg-9">
                        <div class="DieMainTable" id="DieWrapper">
                            <table>
                                <thead>
                                    <tr>
                                        <th>No. </th>
                                        <th style="text-align: left !important; padding-left: 1.5em;">Part Number </th>
                                        <th>Die #</th>
                                        <th>Die Serial</th>
                                        <th>2011-2015</th>
                                        <th>Shot Count Onward</th>
                                        <th>Status</th>
                                        @*<th>Renarks</th>*@
                                    </tr>
                                </thead>
                                <tbody id="SummarylistData">
                                </tbody>
                            </table>

                        </div>
                    </div>

                    <div class="col-lg-3">
                        <div class="DieMainTable">
                            <table>
                                <thead>
                                    <tr>
                                        <th style="text-align: left; padding-left: 1em; width: 70%;">Category</th>
                                        <th style="width: 30%;">No of die</th>
                                    </tr>
                                </thead>
                                <tbody id="FinalSummaryData">
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

            <div class="Mold_content" id="Monitoring">
                <div class="flex_space mb-2">
                    <div class="searchinputContainer">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <input type="text" placeholder="Search here ... " id="searchbox" />
                        <div class="line"></div>
                    </div>

                    <div class="flex_align">
                        <div class="select-container">
                            <select id="yearselect"></select>
                        </div>

                        <div class="select-container">
                            <select id="monthSelect"></select>
                        </div>

                        <div class="select-container">
                            <select id="MonitorProcess">
                                <option value="M002">Mold  Frame</option>
                                <option value="M001">ACM</option>
                                <option value="M003">Mold Impeller</option>
                                <option value="M004">Slot Insulator </option>
                                <option value="M005">Stepping Motor</option>
                            </select>
                        </div>

                    </div>
                </div>

                <div class="DieMainTable" id="DieWrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>No</th>
                                <th style="text-align: left !important; padding-left: 1.5em;">Part Number </th>
                                @*<th>Part Description </th>*@
                                <th>Dimension/ Quality </th>
                                <th>No. of Cavity</th>
                                <th>Die Serial</th>
                                <th id="MonthHeader">Jan-16</th>
                                <th>TotalQty</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="DieMoldMasterlist">
                        </tbody>
                    </table>


                </div>
            </div>

            <div class="Mold_content" id="Tooling">
                <div class="Mold_ToolHeader">
                    <div class="searchinputContainer">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <input type="text" placeholder="Search here ... " id="RegisterSearch" />
                        <div class="line"></div>
                    </div>

                    <div class="flex_align">
                        <button type="button" class="btnclean" id="clearbtn"><i class="fa-solid fa-filter-circle-xmark"></i>  Clear</button>

                        <div class="Mold_ToolHeader__group">
                            <input type="date" id="Datearrived" class="" />
                        </div>
                    </div>

                </div>
                <div class="DieMainTable" id="DieWrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Registration No.</th>
                                <th>Mold Name / Part No. </th>
                                <th>Item</th>
                                <th>Details of Modification</th>
                                <th id="MonthHeader">Release(Shot Cycle test)</th>
                                <th>Date Arrived</th>
                                <th>Date Repair</th>
                                <th>Incharge</th>
                                <th>Remarks</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="DieMoldToolist">
                        </tbody>
                    </table>


                </div>


            </div>


        </div>
    </div>

</section>



<div class="MoldiefooterContainer" id="Summaryfooter">
    <span>Showing  <span id="SummarypagecountID">-</span> to <span id="SummarytotalpageID">-</span> of  <span id="SummaryDatalengthID">-</span> Entries</span>

    <div id="SummaryPaginationContainer" class="paginationPartlocal"></div>
</div>


<div class="MoldiefooterContainer" id="Monitorfooter">
    <span>Showing  <span id="MonitorpagecountID">-</span> to <span id="MonitortotalpageID">-</span> of  <span id="MonitorDatalengthID">-</span> Entries</span>

    <div id="PaginationContainer" class="paginationPartlocal"></div>
</div>


<!--########################## Add Moldie Parts #############################-->
<div class="modal fade modal-xl" id="AddMoldModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Add Mold Die </h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="AddMoldforms" class="addformcontainer" autocomplete="off">
                    <div class="row">

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">No. <small style="color: #a81818; font-weight: 600;">*</small></label>
                            <div class="search-box">
                                <input type="text" placeholder="Type No." name="AddNo" id="AddNo" onkeypress='return restrictChars(event)' required>
                            </div>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Part number <small style="color: #a81818; font-weight: 600;">*</small></label>
                            <input type="text" name="AddPartno" id="AddPartno" placeholder="Enter a Partnumber" required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Dimension/ Quality</label>
                            <input type="text" name="DimensionQual" id="DimensionQual" placeholder="Enter Dimensional Quality" required>
                        </div>
                    </div>



                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Die Number</label>
                            <input type="text" name="AddDienum" id="AddDienum" placeholder="Enter a Die Number" onkeypress='return restrictChars(event)' required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Die Serial Number</label>
                            <input type="text" name="AddSerial" placeholder="Enter a Serial Number" id="AddSerial" required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Number of Cavity </label>
                            <input type="text" name="AddCavity" id="AddCavity" placeholder="Enter Details" onkeypress='return restrictChars(event)' required>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Select Process. <small style="color: #a81818; font-weight: 600;">*</small></label><br />
                            <div class="select-container" style="width: 100% !important;">
                                <select id="AddSelectProcess" name="AddSelectProcess">
                                </select>
                            </div>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Select Partno Desrcription. <small style="color: #a81818; font-weight: 600;">*</small></label><br />
                            <div class="select-container" style="width: 100% !important;">
                                <select id="PartDescriptionID" name="PartDescriptionID">
                                </select>
                            </div>
                        </div>
                    </div>




                    <div class="flex_space" id="editsdisplay">
                        <small>All fields marked with (<small style="color: #a81818; font-weight: 600;">*</small>) must be filled out</small>
                        <button type="submit" class="primary_button_color">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>

        </div>
    </div>
</div>
<!--########################## EDIT DIE MOLD DATA #############################-->
<div class="modal fade modal-lg" id="EditMoldDie" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Edit Mold Die Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="editMoldDie" class="addformcontainer" autocomplete="off">
                    <div class="row">
                        <div class="form_group col-6 col-lg-6 col-sm-12">
                            <label for="">No  <small style="color: #a81818; font-weight: 600;">*</small></label>
                            <input type="hidden" name="RecordID" id="RecordID">
                            <input type="text" name="EditNo" id="EditNo" placeholder="Enter Registration No." required>
                        </div>

                        <div class="form_group col-6 col-lg-6 col-sm-12">
                            <label for="">Part number <small style="color: #a81818; font-weight: 600;">*</small></label>
                            <div class="search-box">
                                <input type="text" placeholder="Type Part number" name="EditPartNo" id="EditPartNo" required>
                            </div>
                        </div>


                    </div>



                    <div class="row">
                        <div class="form_group col-6 col-lg-6 col-sm-12">
                            <label for="">Die Number</label>
                            <input type="text" name="EditDie" id="EditDie" placeholder="Change Die number" onkeypress='return restrictChars(event)' required>
                        </div>

                        <div class="form_group col-6 col-lg-6 col-sm-12">
                            <label for="">Die Serial</label>
                            <input type="text" name="EditSerial" id="EditSerial" required>
                        </div>


                    </div>

                    <div class="row">
                        <div class="form_group col-6 col-lg-6 col-sm-12">
                            <label for="">Cavity</label>
                            <input type="text" name="EditCavity" id="EditCavity" required>
                        </div>

                    </div>

                    <div class="flex_end" id="editsdisplay">
                        <button type="submit" class="primary_button_color">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>


        </div>
    </div>
</div>


<!--########################## INPUT DATA #############################-->
<div class="modal fade modal-m" id="InputMoldieModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Mold Die Input Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="InputMoldie" class="addformcontainer">
                    <div class="form_group col-12 col-sm-12">
                        <label for="">Input Quantity <small style="color: #a81818; font-weight: 600;">*</small> </label>
                        <input type="hidden" name="PartNo" id="PartNo">
                        <input type="hidden" name="No" id="No">
                        <input type="text" name="MoldInput" id="MoldInput" onkeypress="return restrictChars(event)" autocomplete="off">
                    </div>

                    <div class="flex_space" id="editsdisplay">
                        <small>Input quantity is required.</small>
                        <button type="submit" class="primary_button_color">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>


        </div>
    </div>
</div>
<!--########################## Adding Tooling  DATA #############################-->
<div class="modal fade modal-xl" id="AddTooling" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Add Tooling Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="AddToolforms" class="addformcontainer" autocomplete="off">
                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Registration <small style="color: #a81818; font-weight: 600;">*</small></label>
                            <input type="text" name="RegNo" id="RegNo" placeholder="Enter Registration No." required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Part number <small style="color: #a81818; font-weight: 600;">*</small></label>
                            @*<input type="text" name="PartNo" id="PartNo" placeholder="Enter Part number" required>*@
                            <div class="search-box">
                                <input type="text" placeholder="Type Part number" name="ParNoSearch" id="ParNoSearch" required>
                                <div class="namesdisplay"></div>
                            </div>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Item # 1</label>
                            <input type="text" name="Item" id="Item" placeholder="Enter Items 1" onkeypress='return restrictChars(event)' required>
                        </div>
                    </div>



                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Release(Shot Cycle test)</label>
                            <input type="text" name="ShotRelease" id="ShotRelease" placeholder="Enter Cycle Shot" onkeypress='return restrictChars(event)' required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Date Arrived</label>
                            <input type="date" name="DateArrived" id="DateArrived" required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Details of Modification</label>
                            <input type="text" name="DetailsModify" id="DetailsModify" placeholder="Enter Details" required>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Date Repair</label>
                            <input type="date" name="DateRepair" id="DateRepair" required>
                        </div>
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Incharge</label>
                            <input type="text" name="Incharge" id="Incharge" placeholder="Enter the name of Incharged" required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Item # 2</label>
                            <input type="text" name="Item2" id="Item2" placeholder="Enter No of Items" onkeypress='return restrictChars(event)' required>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form_group col-8 col-lg-8 col-sm-12">
                            <label for="">Remarks</label>
                            <textarea placeholder="Write something here..." name="Remarks" id="Remarks" rows="3" cols="50" required></textarea>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Details of Modification</label>
                            <input type="text" name="DetailsModify2" id="DetailsModify2" placeholder="Enter Details" required>
                        </div>
                    </div>




                    <div class="flex_space " id="editsdisplay">
                        <small>All fields marked with (<small style="color: #a81818; font-weight: 600;">*</small>) must be filled out</small>
                        <button type="submit" class="primary_button_color">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>


        </div>
    </div>
</div>


<!--########################## Edit Tooling  DATA #############################-->
<div class="modal fade modal-xl" id="EditTooling" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Edit Tooling Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="AddToolforms" class="addformcontainer" autocomplete="off">
                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Registration <small style="color: #a81818; font-weight: 600;">*</small></label>
                            <input type="text" name="EditRegNo" id="EditRegNo" placeholder="Enter Registration No." required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Part number <small style="color: #a81818; font-weight: 600;">*</small></label>
                            @*<input type="text" name="PartNo" id="PartNo" placeholder="Enter Part number" required>*@
                            <div class="search-box">
                                <input type="text" placeholder="Type Part number" name="EditParNoSearch" id="EditParNoSearch" required>
                            </div>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Item # 1</label>
                            <input type="text" name="EditItem" id="EditItem" placeholder="Enter Items 1" onkeypress='return restrictChars(event)' required>
                        </div>
                    </div>



                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Release(Shot Cycle test)</label>
                            <input type="text" name="ShotRelease" id="ShotRelease" placeholder="Enter Cycle Shot" onkeypress='return restrictChars(event)' required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Date Arrived</label>
                            <input type="date" name="DateArrived" id="DateArrived" required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Details of Modification</label>
                            <input type="text" name="DetailsModify" id="DetailsModify" placeholder="Enter Details" required>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Date Repair</label>
                            <input type="date" name="DateRepair" id="DateRepair" required>
                        </div>
                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Incharge</label>
                            <input type="text" name="Incharge" id="Incharge" placeholder="Enter the name of Incharged" required>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Item # 2</label>
                            <input type="text" name="Item2" id="Item2" placeholder="Enter No of Items" onkeypress='return restrictChars(event)' required>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form_group col-8 col-lg-8 col-sm-12">
                            <label for="">Remarks</label>
                            <textarea placeholder="Write something here..." name="Remarks" id="Remarks" rows="3" cols="50" required></textarea>
                        </div>

                        <div class="form_group col-4 col-lg-4 col-sm-12">
                            <label for="">Details of Modification</label>
                            <input type="text" name="DetailsModify2" id="DetailsModify2" placeholder="Enter Details" required>
                        </div>
                    </div>




                    <div class="flex_space " id="editsdisplay">
                        <small>All fields marked with (<small style="color: #a81818; font-weight: 600;">*</small>) must be filled out</small>
                        <button type="submit" class="primary_button_color">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>


        </div>
    </div>
</div>


<script type="text/javascript">
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();

    let setMonth = parseInt(currentMonth) + 1;
    let TableData = [];
    let SummaryData = [];
    let FinalSummaryData = [];
    let DieTooling = [];

    let TableDisplay = $("#SummarylistData");
    let MonitorDisplay = $("#DieMoldMasterlist");
    let ToolingDisplay = $("#DieMoldToolist");

    const resultBox = document.querySelector(".namesdisplay");

    // Tabs Content
    const tabs = document.querySelectorAll(".Mold_tab");
    const slider = document.querySelector(".Mold_slider");
    const contents = document.querySelectorAll(".Mold_content");
    let isTabLoaded = [true, false, false];

    tabs.forEach((tab, index) => {
        tab.addEventListener("click", () => {
            // Handle tab active class
            document.querySelector(".Mold_tab.active").classList.remove("active");
            tab.classList.add("active");

            // Move slider
            slider.style.transform = `translateX(${index * 100}%)`;

            // Switch content
            const target = tab.getAttribute("data-target");
            contents.forEach((content) => {
                content.classList.remove("show");
            });

            // Add show class with slight delay
            setTimeout(() => {
                document.getElementById(target).classList.add("show");
            }, 50);

            if (index === 0) {
                $("#MoldSummary").show();
                $("#MoldMonitor").hide();
                $("#MoldTooling").hide();

                // Footer Show
                $("#Summaryfooter").show();
                $("#Monitorfooter").hide();
            } else if (index === 1) {
                $("#MoldSummary").hide();
                $("#MoldMonitor").show();
                $("#MoldTooling").hide();

                // Footer Show
                $("#Summaryfooter").hide();
                $("#Monitorfooter").show();
            } else {
                $("#MoldSummary").hide();
                $("#MoldMonitor").hide();
                $("#MoldTooling").show();

                // Footer Show
                $("#Summaryfooter").hide();
                $("#Monitorfooter").hide();
            }

            if (!isTabLoaded[index]) {
                switch (index) {
                    case 0:
                        GetMoldDieSummary();
                        break;
                    case 1:
                        GetMoldDieMonth(setMonth, currentYear, $("#MonitorProcess").val());
                        break;
                    default:
                        GetMoldDieTooling();
                        break;
                }
                isTabLoaded[index] = true;
            }
        });
    });


    // Date Dropdown Selection
    const months = [
        "January", "February", "March", "April",
        "May", "June", "July", "August",
        "September", "October", "November", "December"
    ];

    const select = document.getElementById("monthSelect");


    //===============================================================
    //================= INPUT AND UPDATE DATA =======================
    //===============================================================
    $("#InputMoldie").on('submit', async (e) => {
        e.preventDefault();
        if ($("#MoldInput").val() === "") {
            return;
        }

        let formData = new FormData(e.target);
        formData.append('DateAction', select.value);
        const data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("AddUpdateMoldDieMonitor", "DieMold")', data);
        if (res.StatusCode === 201) {
            const index = $('#InputMoldie').data('update-index');
            //alert("Index : " + index);
            isTabLoaded[0] = false;
            //console.log(res);
            GetMoldDieMonth(select.value, currentYear, $("#MonitorProcess").val());
            $("#InputMoldieModal").modal("hide");
            //if (isTabLoaded[index] == false) {

            //}

        }
    });
    $("#AddToolforms").on('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("AddUpdateMoldDieTooling", "DieMold")', data);
        if (res.StatusCode === 201) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                confirmButtonColor: "#0d97c9",
                timer: 1500
            }).then(() => {
                GetMoldDieTooling();
                $("#AddToolforms")[0].reset();
                $("#AddTooling").modal("hide");
            });
        } else {
            Swal.fire({
                icon: "error",
                text: data.ToolNo + " is already Exist",
                timer: 1500,
                showConfirmButton: false
            });
        }
    });


    $("#AddMoldforms").on('submit', async function (e) {
                icon: "success",
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        //console.log(data);
        let res = await postData('@Url.Action("AddMoldDieData", "DieMold")', data);

        if (res && res.Success) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                confirmButtonColor: "#0d97c9",
                timer: 1500
            }).then(() => {
                GetMoldDieMonth();
                $("#AddMoldforms")[0].reset();
                $("#AddMoldModal").modal("hide");
            });
        } else {
            Swal.fire({
                icon: "error",
                text: data.ToolNo + " is already Exist",
                timer: 1500,
                showConfirmButton: false
            });
        }
    });

    $("#editMoldDie").on('submit', async function (e) {
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("UpdateMoldDieData", "DieMold")', data);
        if (res && res.Success) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                confirmButtonColor: "#0d97c9",
                timer: 1500
            }).then(() => {
                GetMoldDieTooling();
                $("#AddToolforms")[0].reset();
                $("#AddTooling").modal("hide");
            });
        } else {
            Swal.fire({
                icon: "error",
                text: data.ToolNo + " is already Exist",
                timer: 1500,
                showConfirmButton: false
            });
        }
    });

    $("#Registrymodal").on('click', (e) => {
        e.preventDefault();
        $("#AddTooling").modal("show");
    });
    $("#addMold").on('click', (e) => {
        e.preventDefault();
        $("#AddMoldModal").modal("show");
    });
    //===============================================================
    //==================== FILTER DATA ==============================
    //===============================================================
    $("#ProcessID").on('change', (e) => {
        e.preventDefault();
        let setMonth = parseInt(currentMonth) + 1;
        GetMoldDieSummary();
        GetMoldDieMonth(setMonth, currentYear, e.target.value);
    });

    $("#MonitorProcess").on('change', (e) => {
        e.preventDefault();
        let setMonth = parseInt(currentMonth) + 1;
        GetMoldDieSummary();
        GetMoldDieMonth(setMonth, currentYear, e.target.value);
    });

    $("#monthSelect").on('change', (e) => {
        e.preventDefault();
        let month = e.target.value;
        $("#MonthHeader").text(months[month - 1]);
        GetMoldDieMonth(month, currentYear, $("#MonitorProcess").val());
    })

    $("#yearselect").on('change', (e) => {
        e.preventDefault();
        let year = e.target.value;
        let month = $("#MonthHeader").val();
        $("#MonthHeader").text(months[month - 1]);
        GetMoldDieMonth(month, year, $("#MonitorProcess").val());
    })


    $("#clearbtn").on('click', (e) => {
        e.preventDefault();
        $("#Datearrived").val("");
        GetMoldDieTooling();
    });

    months.forEach((month, index) => {
        const option = document.createElement("option");
        option.value = index + 1; // 1 to 12
        option.text = month;
        if (index === currentMonth) {
            option.selected = true;
        }
        select.appendChild(option);
    });

    // INPUT SEARCH EMPLOYEE NAME WHEN TYPE
    $("#ParNoSearch").keyup(function () {
        let result = [];
        let input = this.value;
        if (input.length > 0) {
            result = SummaryData.filter((item) => {
                return item.PartNo.toLowerCase().includes(input.toLowerCase());
            });

            if (result.length > 0) {
                resultBox.style.display = 'block';
                display(result); // assumes display() handles array of objects
            } else {
                resultBox.style.display = 'block';
                resultBox.innerHTML = '<div style="padding: 5px; color: #999;">No search found</div>';
            }
        } else {
            resultBox.style.display = 'none';
            resultBox.innerHTML = ''; // clear the previous results or message
        }
    });

    function display(result) {
        const content = result.map((list) => {
            return `<li onclick="selectinput(this)" data-id="${list.PartNo}">${list.PartNo}</li>`;
        });

        resultBox.innerHTML = "<ul>" + content.join('') + "</ul>";
    }


    function selectinput(list) {
        const selecPartno = list.getAttribute("data-id");
        //employeeID = employeeId;
        //$("#Employee_ID").val(employeeId);
        $("#ParNoSearch").val(list.innerHTML);
        resultBox.innerHTML = '';
        resultBox.style.display = 'none';
    }
    //===============================================================
    //================ FETCH DATA AND DISPLAY =======================
    //===============================================================
    const GetMoldDieSummary = async () => {
        const id = loadingDisplay(0, 7);
        $("#FinalSummaryData").empty();

        Loadingsteps(id, async () => {
            let res = await FetchAuthenticate('@Url.Action("GetMoldDieSummaryList", "DieMold")', { ProcessID: $("#ProcessID").val() });
            if (res && res.Success) {
                TableDisplay.empty(); // Removing the Loading Display

                SummaryData = res.Data.FinalSummary;
                FinalSummaryData = res.Data.MoldDieSummary;
                displaySummaryPagination(SummaryData, 'SummarylistData', 'SummaryPaginationContainer', 50, 5);
                $.each(FinalSummaryData, function (index, row) {
                    let remarkColor = "";
                    if (row.Category === "For Monitoring") {
                        remarkColor = "color: #054e92;";
                    } else if (row.Category === "End of life") {
                        remarkColor = "color: #a81818;";
                    }

                    var setdata = `<tr class= 'row_${index}'>
                                          <td style='text-align: left; padding: 1em; font-size: .8rem;  font-weight: 600; ${remarkColor}'>${row.Category}</td>
                                          <td style='text-align: center; font-weight: 700;'>${row.MoldDie}</td>
                                     </tr>`;
                    $("#FinalSummaryData").append(setdata);
                });
            } else {
                const loadData = `<tr>
                                <td colspan='7'>
                                    🔍 ${res.Message}
                                </td>
                            </tr>`;

                TableData.empty();
                TableDisplay.append(loadData);
            }
        });

    }
    const GetMoldDieMonth = async (month = setMonth, year = currentYear, process = $("#ProcessID").val()) => {
        const id = loadingDisplay(1, 8);
        Loadingsteps(id, async () => {
             let formData = new FormData();
             // Where value of month is around 1 - 12
             formData.append('Months', month);
             formData.append('Year', year);
             formData.append('ProcessID', process);


             $("#MonthHeader").text(months[month - 1]);

             const data = Object.fromEntries(formData);
             let res = await FetchAuthenticate('@Url.Action("GetMoldDieMonthInputList", "DieMold")', data);
             if (res && res.Success) {
                 TableData = res.Data;
                 displayPagination(TableData, 'DieMoldMasterlist', 'PaginationContainer', 50, 5);


                 const years = Array.from(new Set(
                     TableData.map(item => {
                         const rawDate = item.DateAction;
                         const parsedDate = new Date(rawDate);
                         return (!rawDate || isNaN(parsedDate.getTime()))
                             ? currentYear
                             : parsedDate.getFullYear();
                     })
                 ));

                 //const year = TableData.map(item => new Date(item.DateAction).getFullYear());
                 $("#yearselect").empty();
                 $.each(years, function (index, row) {
                     $("#yearselect").append("<option value='" + row + "'>" + row + "</option>");
                 });
             } else {
                   const loadData = `<tr>
                        <td colspan='6'>
                            🔍 ${res.Message}
                        </td>
                    </tr>`;

                 MonitorDisplay.empty();
                 MonitorDisplay.append(loadData);
             }
        });
    }
    const GetMoldDieTooling = async () => {
        const id = loadingDisplay(2, 9);
        Loadingsteps(id, async () => {
            let res = await FetchAuthenticate('@Url.Action("GetMoldDieToolingList", "DieMold")', {});
            if (res && res.Success) {
                DieTooling = res.Data;

                // Loads the First Data
                DisplayTooling(DieTooling);
                $("#Datearrived").on('change', (e) => {
                    const rawDate = e.target.value;

                    if (rawDate) {
                        const [year, month, day] = rawDate.split("-");
                        const formatted = `${month}/${day}/${year.slice(-2)}`; // "06/11/25"
                        let filterData = DieTooling.filter(res => res.DateArrived == formatted);
                        DisplayTooling(filterData);
                    } else {
                        DisplayTooling(DieTooling);
                    }

                });
            } else {
                const loadData = `<tr>
                  <td colspan='9'>
                      🔍 ${res.Message}
                  </td>
              </tr>`;

                ToolingDisplay.empty();
                ToolingDisplay.append(loadData);

            }
        });

    }

    const GetMoldDropdownlist = async () => {
        let res = await FetchAuthenticate('@Url.Action("GetMoldieDropDownlist", "DieMold")', {});

         if (res && res.Success) {

             $.each(res.Data.Process, function (index, row) {
                 $("#AddSelectProcess").append("<option value='" + row.ProcessID + "'>" + row.ProcessName + "</option>");
             });

             $.each(res.Data.MoldParts, function (index, row) {
                 $("#PartDescriptionID").append("<option value='" + row.PartDescriptionID + "'>" + row.Description + "</option>");
             });
         }
    };


    function DisplayTooling(dataArray) {
        $("#DieMoldToolist").empty();

        dataArray.forEach((row, index) => {
            var setdata = `<tr >
             <td>${row.RegNo}</td>
             <td style='font-weight: 600;'>${row.PartNo} / ${row.DimensionQuality}</td>
             <td>${row.Item}</td>
             <td>${row.DetailsModify}</td>
             <td>${row.ShotRelease}</td>
             <td>${row.DateArrived}</td>
             <td>${row.DateRepair}</td>
             <td>${row.Incharge}</td>
             <td>${row.Remarks}</td>
             <td>
                <button type='button' class='btn actionicon text-primary EditToolClick' id='editButton_${row.RecordID}' >
                   <i class='fa-regular fa-pen-to-square action_btn'></i>
                </button>

                
             </td>
         </tr>;`

            $("#DieMoldToolist").append(setdata);
        });


        // Handle click event for edit button
        $(document).on('click', '.EditToolClick', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];
            console.log("Row Selected : " + rowIndex);
            var filterData = DieTooling.find(res => res.RecordID === rowIndex);

            if (filterData) {

            }

            $("#EditTooling").modal("show");
        });

        // Handle click event for edit button
        $(document).on('click', '.ToolDeleteClick', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];
            console.log("Row Selected : " + rowIndex);
            $("#EditTooling").modal("show");
        });
    }
    function displaySummaryPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 10, visibleButtons = 5) {
      let currentPage = 1;
      let filteredData = [...dataArray]; // Make a copy for filtering

      const updatePaginationInfo = () => {
          const totalRecords = filteredData.length;
          const totalPages = Math.ceil(totalRecords / recordsPerPage);

          $("#SummarytotalpageID").text(totalPages);
          $("#SummaryDatalengthID").text(totalRecords);

          return totalPages;
      };

      const renderTable = (page) => {
          const totalPages = updatePaginationInfo();
          const startIndex = (page - 1) * recordsPerPage;
          const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
          const tableBody = document.getElementById(tableBodyId);
          tableBody.innerHTML = '';

          // Step 1: Group by "No"
          const groupMap = new Map();
          for (let i = startIndex; i < endIndex; i++) {
              const row = filteredData[i];
              if (!groupMap.has(row.No)) groupMap.set(row.No, []);
              groupMap.get(row.No).push(row);
          }

          // Step 2: Render rows with merged "No"
          groupMap.forEach((groupRows, noValue) => {
              const NoValue = groupRows[0].No;
              const dienumValue = groupRows[0].DieNumber;
              const dieSerialValue = groupRows[0].DieSerial;
              const dielifeValue = groupRows[0].DieLife;

              const PreviousValue = groupRows[0].PreviousCount;
              const ShotOnValue = groupRows[0].ShotOnwards;
              const TotalShotValue = groupRows[0].totalshoutCount;
              const StatusValue = groupRows[0].Status;
              const RemarkeValue = groupRows[0].Remarks;


              groupRows.forEach((rowData, idx) => {
                  let percentage = parseFloat(StatusValue) || 0;
                  let rowHtml = "<tr class='rowClick' id='editButton'>";

                  if (idx === 0) {
                      rowHtml += `<td rowspan="${groupRows.length}" data-cell="No" style="font-weight: 600; color: #222;">${NoValue}</td>`;
                  }

                  rowHtml += `<td data-cell="PartNo" style="font-weight: 600; color: #222;">${rowData.PartNo}</td>`;

                  if (idx === 0) {
                      rowHtml += `<td rowspan="${groupRows.length}" data-cell="DieNumber">${dienumValue}</td>`;
                      rowHtml += `<td rowspan="${groupRows.length}" data-cell="DieSerial">${dieSerialValue}</td>`;
                      rowHtml += `<td rowspan="${groupRows.length}" data-cell="PreviousCount">${PreviousValue}</td>`;
                      rowHtml += `<td rowspan="${groupRows.length}" data-cell="ShotOnwards">${ShotOnValue}</td>`;



                      rowHtml += `<td rowspan="${groupRows.length}" data-cell="Status">
                                    <div class='progress-bar'>
                                        <span data-width='${percentage}'></span>
                                    </div>
                                    <small style='color: #222; font-weight: 600;'>${StatusValue}%</small>
                                </td>`;


                      let remarkColor = "";
                      if (RemarkeValue === "For Monitoring") {
                          remarkColor = "color: #054e92; font-weight: 600; font-size: .8rem;";
                      } else if (RemarkeValue === "End of Life") {
                          remarkColor = "color: #a81818; font-weight: 600; font-size: .8rem;";
                      }

                      //rowHtml += `<td rowspan="${groupRows.length}" data-cell="Remarks" style="${remarkColor}">${RemarkeValue}</td>`;
                  }
                  rowHtml += "</tr>";
                  tableBody.innerHTML += rowHtml;
              });
          });



          const spans = document.querySelectorAll('.progress-bar span');
          spans.forEach((span) => {
              // For Monitoring
              if (span.dataset.width <= 100) {
                  span.style.background = '#054e92';
              }
              else {
                  // End Of life
                  span.style.background = '#a81818';
              }
              span.style.width = span.dataset.width + "%";
              //span.innerHTML = span.dataset.width;
          });

          $("#SummarypagecountID").text(currentPage);
      };

      const renderPagination = () => {
          const totalPages = updatePaginationInfo();
          const paginationContainer = document.getElementById(paginationId);
          paginationContainer.innerHTML = '';

          let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
          let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

          if (endPage > totalPages) {
              endPage = totalPages;
              startPage = Math.max(1, endPage - visibleButtons + 1);
          }

          if (totalPages <= visibleButtons) {
              startPage = 1;
              endPage = totalPages;
          }

          // Previous button
          paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="SummarychangePage(${currentPage - 1})">
                                         <i class="fa-solid fa-backward"></i>
                                     </button>`;

          for (let i = startPage; i <= endPage; i++) {
              paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="SummarychangePage(${i})">${i}</button>`;
          }

          // Next button
          paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="SummarychangePage(${currentPage + 1})">
                                        <i class="fa-solid fa-forward"></i>
                                     </button>`;
      };

        const SummarychangePage = (page) => {
          if (page >= 1 && page <= updatePaginationInfo()) {
              currentPage = page;
              renderTable(currentPage);
              renderPagination();
          }
      };

      // 🔍 Search functionality
      const searchTable = () => {
          const query = $('#Summarysearchbox').val().toLowerCase();

          filteredData = dataArray.filter(item =>
              item.PartNo.toLowerCase().includes(query) || item.DieSerial.toLowerCase().includes(query)
          );

          currentPage = 1;
          renderTable(currentPage);
          renderPagination();
      };

      // Add event listener for search input
      $('#Summarysearchbox').on('input', searchTable);

      // Handle click event for edit button
      $(document).on('click', '.rowClick', function (e) {
          e.stopPropagation();
          const buttonId = $(this).attr('id');
          const rowIndex = buttonId.split('_')[1];
          const result = TableData.find(p => p.RecordID == rowIndex);

      });


      // Initialize table and pagination
      window.SummarychangePage = SummarychangePage;
      renderTable(currentPage);
      renderPagination();
  }
    function displayPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 50, visibleButtons = 5) {
         let currentPage = 1;
         let filteredData = [...dataArray]; // Make a copy for filtering

         const updatePaginationInfo = () => {
             const totalRecords = filteredData.length;
             const totalPages = Math.ceil(totalRecords / recordsPerPage);

             $("#MonitortotalpageID").text(totalPages);
             $("#MonitorDatalengthID").text(totalRecords);

             return totalPages;
         };

         const renderTable = (page) => {
             const totalPages = updatePaginationInfo();
             const startIndex = (page - 1) * recordsPerPage;
             const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
             const tableBody = document.getElementById(tableBodyId);
             tableBody.innerHTML = '';

             // Step 1: Group by "No"
             const groupMap = new Map();
             for (let i = startIndex; i < endIndex; i++) {
                 const row = {
                     ...filteredData[i],
                     _indexInTableData: dataArray.indexOf(filteredData[i])
                 };
                 if (!groupMap.has(row.No)) groupMap.set(row.No, []);
                 groupMap.get(row.No).push(row);
             }

             // Step 2: Render rows with merged "No"
             groupMap.forEach((groupRows, noValue) => {
                 const newNo = groupRows[0].No;
                 const newTotalValue = groupRows[0].TotalNo;


                 groupRows.forEach((rowData, idx) => {
                     const originalIndex = rowData._indexInTableData;

                     let rowHtml = `<tr class='rowClick' id='editButton_${rowData.RecordID}' data-index='${originalIndex}'>`;

                     if (idx === 0) {
                         rowHtml += `<td rowspan="${groupRows.length}" data-cell="NewTotal" style="color: #054e92; font-weight: 600; ">${newNo}</td>`;
                     }

                     rowHtml += `
                                <td data-cell="PartNo" style="text-align: left; padding-left: 1.5em; font-weight: 600; color: #222;">${rowData.PartNo}</td>
                                <td data-cell="DimensionQuality">${rowData.DimensionQuality}</td>
                                <td data-cell="Cavity">${rowData.Cavity}</td>
                                <td data-cell="DieSerial">${rowData.DieSerial}</td>
                                <td data-cell="TotalDie" >${rowData.TotalDie}</td>`;

                     if (idx === 0) {
                         rowHtml += `<td rowspan="${groupRows.length}" data-cell="NewTotal" style="color: #054e92; font-weight: 600; ">${newTotalValue}</td>`;
                     }


                     rowHtml += `<td data-cell="Action"  style='text-align: center;'>
                                 <button type='button' class='btn actionicon text-primary EditClick' id='editButton_${rowData.RecordID}' >
                                    <i class='fa-regular fa-pen-to-square action_btn'></i>
                                 </button>

                                <button type='button' class='btn actionicon text-danger DeleteClick' id='deletebutton_${rowData.RecordID}' >
                                    <i class='fa-regular fa-trash-can'></i>
                                </button>
                            </td>`;

                      rowHtml += "</tr>";
                     tableBody.innerHTML += rowHtml;
                 });
             });

             $("#MonitorpagecountID").text(currentPage);
         };

         const renderPagination = () => {
             const totalPages = updatePaginationInfo();
             const paginationContainer = document.getElementById(paginationId);
             paginationContainer.innerHTML = '';

             let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
             let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

             if (endPage > totalPages) {
                 endPage = totalPages;
                 startPage = Math.max(1, endPage - visibleButtons + 1);
             }

             if (totalPages <= visibleButtons) {
                 startPage = 1;
                 endPage = totalPages;
             }

             // Previous button
             paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} style='color: #222 !important;' onclick="MonitorchangePage(${currentPage - 1})">
                                                <i class="fa-solid fa-backward"></i>
                                            </button>`;

             for (let i = startPage; i <= endPage; i++) {
                 paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="MonitorchangePage(${i})">${i}</button>`;
             }

             // Next button
             paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="MonitorchangePage(${currentPage + 1})">
                                           <i class="fa-solid fa-forward"></i>
                                        </button>`;
         };

         const MonitorchangePage = (page) => {
             if (page >= 1 && page <= updatePaginationInfo()) {
                 currentPage = page;
                 renderTable(currentPage);
                 renderPagination();
             }
         };

         // 🔍 Search functionality
         const searchTable = () => {
             const query = $('#searchbox').val().toLowerCase();

             filteredData = dataArray.filter(item =>
                 item.PartNo.toLowerCase().includes(query) || item.No === parseInt(query)
             );

             currentPage = 1;
             renderTable(currentPage);
             renderPagination();
         };

         // Add event listener for search input
         $('#searchbox').on('input', searchTable);

         // Handle click event for edit button
         $(document).on('click', '.rowClick', function (e) {
             e.stopPropagation();
             const buttonId = $(this).attr('id');
             const rowIndex = buttonId.split('_')[1];
             const result = TableData.find(p => p.RecordID == rowIndex);
             if (result) {
                 $("#PartNo").val(result.PartNo);
                 $('#InputMoldie').data('update-index', rowIndex);
                 $("#No").val(result.No);
                 $("#MoldInput").val(result.TotalDie === 0 ? "" : result.TotalDie);
                 $("#InputMoldieModal").modal("show");


                 // Focus after modal is fully shown
                 $("#InputMoldieModal").one('shown.bs.modal', function () {
                     $("#MoldInput").focus();
                 });
             }
         });

        $(document).on('click', '.EditClick', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];
            // Store Id to the Hidden Text input
            const filterData = TableData.find(p => p.RecordID == rowIndex);

            if (filterData) {
                $("#RecordID").val(rowIndex);
                $("#EditNo").val(filterData.No);
                $('#EditPartNo').val(filterData.PartNo);
                $("#EditDie").val(filterData.DieNumber);
                $("#EditSerial").val(filterData.DieSerial);
                $("#EditCavity").val(filterData.Cavity);
            }

        });
        $(document).on('click', '.DeleteClick', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];

            const filterData = TableData.find(p => p.RecordID == rowIndex);
             Swal.fire({
                 text: "Do you want to Delete this Partnumber?",
                 icon: "warning",
                 showCancelButton: true,
                 confirmButtonColor: "#3085d6",
                 cancelButtonColor: "#d33",
                 confirmButtonText: "Yes, delete it!"
             }).then( async (result) => {
                 if (result.isConfirmed) {

                     var formData = new FormData();
                     formData.append('RecordID', rowIndex);
                     formData.append('PartNo', filterData.PartNo);
                     const data = Object.fromEntries(formData);
                     let res = await postData('@Url.Action("DeleteMoldDieData", "DieMold")', data);

                     if (res && res.Success) {
                         alert("Delete Successfully");
                         GetMoldDieMonth();
                     }

                     console.log(res);

                 }
             });
        });

         // Initialize table and pagination
         window.MonitorchangePage = MonitorchangePage;
         renderTable(currentPage);
         renderPagination();
    }

    function loadingDisplay(load, col) {
        let targetDisplay, loadingTextId;

        switch (load) {
            case 0:
                targetDisplay = TableDisplay;
                loadingTextId = "loadingStepText_Main";
                break;
            case 1:
                targetDisplay = MonitorDisplay;
                loadingTextId = "loadingStepText_Monitor";
                break;
            default:
                targetDisplay = ToolingDisplay;
                loadingTextId = "loadingStepText_Tooling";
                break;
        }


        const loadData = `<tr>
                         <td colspan='${col}'>
                             <div class='Loadercontainer'>
                                 <span class="loader"></span>
                                 <p id="${loadingTextId}">Fetching data from the database..</p>
                             </div>
                         </td>
                     </tr>`;

        targetDisplay.empty();
        targetDisplay.append(loadData);

        return loadingTextId;

    }
    function Loadingsteps(loadingTextId, callback) {
        const steps = [
            "Fetching data from the database...",
            "Processing data...",
            "Finalizing table view..."
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            const stepText = document.getElementById(loadingTextId);
            if (stepText) {
                stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval); // in case it's removed
            }

            if (stepIndex >= steps.length) {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }

    //================== INITIALIZE DATA FIRST ======================
    const LoadPageData = async () => {
        try {
            $("#MoldSummary").show();
            $("#MoldMonitor").hide();
            $("#MoldTooling").hide();

            // Footer Show
            $("#Summaryfooter").show();
            $("#Monitorfooter").hide();

            const [maintable, forest, logs, drop] = await Promise.all([
                GetMoldDieSummary(),
                GetMoldDieMonth(),
                GetMoldDieTooling(),
                GetMoldDropdownlist()
            ]);


        } catch (error) {
            console.error("Failed to load page data:", error);
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>