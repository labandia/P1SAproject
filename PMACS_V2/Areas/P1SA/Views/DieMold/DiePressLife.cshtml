
@{
    ViewBag.Title = "DiePressLife";
    Layout = "~/Areas/P1SA/Views/Shared/_Layout.cshtml";
}

<section >
    <header class="MainHeader">
        <div class="MoldTitle">
            <h4>Press Mold Die Life </h4>
            <small>Manage Mold die Monitoring</small>
        </div>
        <div class="Mold__actions">
            @* MOLD SUMMARY *@
            <div id="MoldSummary">
                <div class="d-flex align-items-center gap-4">
                    <div class="circularcontainer">
                        <div class="circulardisplay" style="--progress: 100%"></div>
                        <p>Mold die max</p>
                    </div>
                    <div class="circularcontainer">
                        <div class="circulardisplay" style="--progress: 50%"></div>
                        <p>Reach-Half die Limit</p>
                    </div>
                    <div class="circularcontainer">
                        <div class="circulardisplay" style="--progress: 25%"></div>
                        <p>For Monitoring</p>
                    </div>
                    <div class="circularcontainer">
                        <div class="circulardisplay" style="--progress: 0%"></div>
                        <p>End of Life</p>
                    </div>
                </div>
            </div>
            @* MOLD MOnitoring *@
            <div id="MoldMonitor">
                <button class="primary_button_color" id="addmodal"><i class="fa-solid fa-plus"></i> Add Data</button>
            </div>
            @* MOLD Tooling *@
            <div id="MoldTooling">
                <div class="d-flex align-items-center gap-2">
                    <button class="primary_button_color" id="Registrymodal"><i class="fa-solid fa-plus"></i> Add Data</button>
                    <div class="searchinputContainer">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <input type="text" placeholder="Search here ... " id="Summarysearchbox" />
                        <div class="line"></div>
                    </div>
                </div>
            </div>
            @* MOLD Die Control *@
            <div id="MoldControl">
                <button class="primary_button_color" id="controlmodal"><i class="fa-solid fa-plus"></i> Add Data</button>
            </div>
        </div>
    </header>

    <div class="Mold_tabcontainer">
        <div class="Mold_tabs">
            <button class="Mold_tab active" data-target="Summary">Summary</button>
            <button class="Mold_tab" data-target="Monitoring">Monitoring</button>
            <button class="Mold_tab" data-target="Tooling">Tooling</button>
            <button class="Mold_tab" data-target="DieControl">DieControl</button>
            <div class="Mold_slider"></div>
        </div>

        <div class="Mold_contentbox">
            <div class="Mold_content show" id="Summary">
                <div class="DieMainTable" id="DieWrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Die(type)</th>
                                <th>Tool No.</th>
                                @*<th>Model</th>*@
                                <th>Status</th>
                                <th>Die Part</th>
                                <th>Die Height (mm)</th>
                                <th>Std. Grindingt</th>
                                @*<th>Stamping / Grinding</th>*@
                                <th>Line</th>
                                <th>Ave. Lamtn</th>
                                <th>Press stamp#</th>
                                <th>Remaining product</th>
                            </tr>
                        </thead>
                        <tbody id="DiePressMonitoringlistV2">
                        </tbody>
                    </table>


                </div>
            </div>
            <div class="Mold_content" id="Monitoring">
                <div class="DieMainTable" id="DieWrapper">
                    @*<table>
                            <thead>
                                <tr class="header-row">
                                    <th rowspan="2">Date Input</th>
                                    <th rowspan="2">Tool No.</th>
                                    <th rowspan="2">Upper</th>
                                    <th rowspan="2">Lower</th>
                                    <th colspan="2" style="padding: .2em 0; border: 1px solid rgba(57, 61, 65, 0.5); ">Upper Grind</th>
                                    <th colspan="2" style="padding: .2em 0; border: 1px solid rgba(57, 61, 65, 0.5); ">Lower Grind</th>
                                    <th rowspan="2">Press stamp</th>
                                </tr>

                                <tr>
                                    <th style="border: 1px solid rgba(57, 61, 65, 0.5);">Actual Height</th>
                                    <th style="border: 1px solid rgba(57, 61, 65, 0.5);">Drawing Height</th>
                                    <th style="border: 1px solid rgba(57, 61, 65, 0.5);">Actual Height</th>
                                    <th style="border: 1px solid rgba(57, 61, 65, 0.5);">Drawing Height</th>
                                </tr>

                            </thead>
                            <tbody id="DiePressMonitoringlist">
                            </tbody>
                        </table>*@

                    <table>
                        <thead>
                            <tr>
                                <th>ToolNo</th>
                                <th>Type</th>
                                <th>Lines</th>
                                <th>Lower</th>
                                <th>Upper</th>
                                <th>Press Stamp</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="DiePressMonitoringlist">
                        </tbody>
                    </table>


                </div>
            </div>
            <div class="Mold_content" id="Tooling">
                <div class=" d-flex align-items-center justify-content-end">
                    <div class="Legends d-flex align-items-center gap-2 mb-2">
                        <div class="circleprog" style="margin: 0; background: #04bd6c; "></div>
                        <span>Operational </span>
                        <div class="circleprog" style="margin: 0;"></div>
                        <span>Not Operational </span>
                    </div>
                </div>
                <div class="DieMainTable" id="DieWrapper">
                    <table>
                        <thead>
                            <tr>
                                <th style="width: 200px; text-align: left; padding-left: 1.5em; ">Die No.</th>
                                <th style="width: 150px;">Type</th>
                                <th style="width: 300px;">Model</th>
                                <th style="width: 100px;"> No. of Line</th>
                                <th>Status</th>
                                <th style="width: 100px;" id="HiddenColumns">Action</th>
                            </tr>
                        </thead>
                        <tbody id="RegistrylistData">
                        </tbody>
                    </table>

                </div>
            </div>
            <div class="Mold_content" id="DieControl">
                <div class="DieMainTable" id="DieWrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Product Type</th>
                                <th>No Stamping</th>
                                <th>Total</th>
                                <th>Machine</th>
                                <th>Die Condition</th>
                                <th>Operator</th>
                                <th>Die Height</th>
                                <th>Leader Confirm</th>
                                <th>Gear(ALPHA)</th>
                                <th>Pitch(MXM)</th>
                            </tr>
                        </thead>
                        <tbody id="DiePressControlist">
                        </tbody>
                    </table>


                </div>
            </div>
        </div>
    </div>


</section>


<div class="PressMoldfooterContainer" id="Summaryfooter">
    <span>Showing  <span id="SummarypagecountID">-</span> to <span id="SummarytotalpageID">-</span> of  <span id="SummaryDatalengthID">-</span> Entries</span>

    <div id="PaginationContainerv2" class="paginationPartlocal"></div>
</div>

<div class="PressMoldfooterContainer" id="Monitorfooter">
    <span>Showing  <span id="MonitorpagecountID">-</span> to <span id="MonitortotalpageID">-</span> of  <span id="MonitorDatalengthID">-</span> Entries</span>

    <div id="PaginationContainer" class="paginationPartlocal"></div>
</div>

<div class="PressMoldfooterContainer" id="Registryfooter">
    <span>Showing  <span id="RegistrypagecountID">-</span> to <span id="RegistrytotalpageID">-</span> of  <span id="RegistryDatalengthID">-</span> Entries</span>

    <div id="RegistryPaginationContainer" class="paginationPartlocal"></div>
</div>

<div class="PressMoldfooterContainer" id="DieControlfooter">
    <span>Showing  <span id="DieControlpagecountID">-</span> to <span id="DieControltotalpageID">-</span> of  <span id="DieControlDatalengthID">-</span> Entries</span>

    <div id="PaginationControlContainer" class="paginationPartlocal"></div>
</div>



<!--########################## INPUT DATA #############################-->
<div class="modal fade modal-m" id="InputMoldieModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>Input Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <div class="MoldieBodyModal mt-2">
                    <form id="InputPress" autocomplete="off">
                        <div class="form_group col-12 col-sm-12 col-lg-12 mb-2">
                            <label for="">Select Tool No.</label><br />
                            <select id="ToolNo" name="ToolNo">
                            </select>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-12">
                            <label for="">Line </label><br />
                           <input type="text" name="Line" onkeypress="return restrictChars(event)">
                        </div>

                        <div class="row">
                            <div class="form_group col-6 col-sm-12 col-lg-6">
                                <label for="">Upper</label>
                                <input type="text" name="Up" onkeypress="return restrictChars(event)">
                            </div>

                            <div class="form_group col-6 col-sm-12 col-lg-6">
                                <label for="">Lower</label>
                                <input type="text" name="low" onkeypress="return restrictChars(event)">
                            </div>
                        </div>


                        <div class="edits_footer" id="editsdisplay">
                            <button type="submit" class="primary_button_color">
                                <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                            </button>
                        </div>
                    </form>
                </div>


            </div>


        </div>
    </div>
</div>
<!--########################## Adding Tooling Press DATA #############################-->
<div class="modal fade modal-m" id="AddTooling" tabindex="-1" role="dialog"  
     aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>Add Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <div class="MoldieBodyModal">
                    <form id="AddToolPressforms" autocomplete="off">
                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Die No.</label>
                                <input type="text" name="ToolNo" id="ToolNo" placeholder="Enter Die No." required>
                            </div>

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Type</label>
                                <input type="text" name="Type" id="Type" placeholder="Enter Type" required>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Model</label>
                                <input type="text" name="Model" id="Model" placeholder="Enter Model" required>
                            </div>

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Line</label>
                                <input type="text" name="Lines" id="Lines" placeholder="Enter Line" onkeypress="return restrictChars(event)" required>
                            </div>
                        </div>

                        <div class="form_group col-12 col-lg-12 col-sm-12">
                            <label for="">Status</label>
                            <textarea placeholder="Enter Status " name="Status" id="Status" rows="3" cols="50" required></textarea>
                        </div>

                        <div class="form_group col-12 col-lg-12 col-sm-12 d-flex align-items-center gap-2">
                            <input type="radio" name="Operational" value="1" required />
                            <span style="color: #04bd6c;">Operational</span>
                            <input type="radio" name="Operational" value="0" required />
                            <span style="color: red;">Not Operational</span>
                        </div>

                        <div class="edits_footer" id="editsdisplay">
                            <button type="submit" class="primary_button_color">
                                <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                            </button>
                        </div>
                    </form>
                </div>


            </div>


        </div>
    </div>
</div>
<!--########################## Edit Tooling Press DATA #############################-->
<div class="modal fade modal-m" id="EdiTooling" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <div>
                        <h5 id="ToolName"></h5>
                        <small id="Ope"></small>
                    </div>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <div class="MoldieBodyModal">
                    <form id="ToolPressforms" autocomplete="off">
                        <div class="form_group col-12 col-sm-12">
                            <label for="">Type</label>
                            <input type="hidden" name="EditToolNo" id="EditToolNo">
                            <input type="text" name="EditType" id="EditType">
                        </div>

                        <div class="form_group col-12 col-sm-12">
                            <label for="">Model</label>
                            <input type="text" name="EditModel" id="EditModel">
                        </div>

                        <div class="form_group col-12 col-sm-12">
                            <label for="">Line</label>
                            <input type="text" name="EditLine" id="EditLine" onkeypress="return restrictChars(event)">
                        </div>

                        <div class="form_group col-12 col-sm-12">
                            <label for="">Status</label>
                            <textarea placeholder="Type any remarks" name="EditStatus" id="EditStatus" rows="3" cols="50" required></textarea>
                        </div>

                        <div class="form_group col-12 col-sm-12">
                            <input type="radio" name="EditOpe" value="1" />
                            <span style="color: #04bd6c;">Operational</span>
                            <input type="radio" name="EditOpe" value="0" />
                            <span style="color: red;">Not Operational</span>
                        </div>


                        <div class="edits_footer" id="editsdisplay">
                            <button type="submit" class="primary_button_color">
                                <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                            </button>
                        </div>
                    </form>
                </div>


            </div>


        </div>
    </div>
</div>
<!--########################## Adding Tooling  DATA #############################-->
<div class="modal fade modal-lg" id="DieControlTool" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>Die Control Data</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <div class="MoldieBodyModal">
                    <form id="DieToolForms" autocomplete="off">
                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Product Type</label>
                                <input type="text" name="ToolNo" id="ToolNo" placeholder="Enter Product Type" required>
                            </div>

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">No# Stamp</label>
                                <input type="text" name="Stamp" id="Stamp" placeholder="Enter Number Stamp" onkeypress='return restrictChars(event)' required>
                            </div>
                        </div>

                        <div class="row">

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Machine</label>
                                <input type="text" name="Machine" id="Machine" placeholder="Enter Details of Modification" onkeypress='return restrictChars(event)' required>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Die Condition</label>
                                <input type="text" name="DieCondition" id="DieCondition" placeholder="Enter Shot Cycle Shot" required>
                            </div>

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Operator</label>
                                <input type="text" name="Operator" id="Operator" required>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Die Height</label>
                                <input type="text" name="DieHeight" id="DieHeight" required>
                            </div>
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Leader Confirmation</label>
                                <input type="text" name="LeaderCom" id="LeaderCom" placeholder="Enter In Charget name" required>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Gear(ALPHA)</label>
                                <input type="text" name="Gear" id="Gear" required>
                            </div>
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label for="">Pitch(MXM)</label>
                                <input type="text" name="Pitch" id="Pitch" placeholder="Enter In Charget name" required>
                            </div>
                        </div>


                        <div class="edits_footer" id="editsdisplay">
                            <button type="submit" class="primary_button_color">
                                <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                            </button>
                        </div>
                    </form>
                </div>


            </div>


        </div>
    </div>
</div>


<script src="~/Scripts/circle-progress.min.js"></script>
<script type="text/javascript">
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    let setMonth = parseInt(currentMonth) + 1;
    let TableData = [];
    let PressData = [];
    let ControlData = [];
    let SummaryData = [];
    let FinalSummaryData = [];

    let TableDisplay = $("#DiePressMonitoringlistV2");
    let MonitorDisplay = $("#DiePressMonitoringlist");
    let ToolingDisplay = $("#RegistrylistData");
    let ControlDisplay = $("#DiePressControlist");

    const editRegistry = document.getElementById("ToolPressforms");

    // Date Dropdown Selection
    const addRegistry = document.getElementById("AddToolPressforms");
    const addDieControl = document.getElementById("DieToolForms");

    const select = document.getElementById("monthSelect");
    const updatePress = document.getElementById("InputPress");


    let isTabLoaded = [true, false, false, false];

    // Tabs Content
    const tabs = document.querySelectorAll(".Mold_tab");
    const slider = document.querySelector(".Mold_slider");
    const contents = document.querySelectorAll(".Mold_content");

    tabs.forEach((tab, index) => {
        tab.addEventListener("click", () => {
            // Handle tab active class
            document.querySelector(".Mold_tab.active").classList.remove("active");
            tab.classList.add("active");

            // Move slider
            slider.style.transform = `translateX(${index * 100}%)`;

            // Switch content
            const target = tab.getAttribute("data-target");
            contents.forEach((content) => {
                content.classList.remove("show");
            });

            // Add show class with slight delay
            setTimeout(() => {
                document.getElementById(target).classList.add("show");
            }, 50);

            if (index === 0) {
                $("#MoldSummary").show();
                $("#MoldMonitor").hide();
                $("#MoldTooling").hide();
                $("#MoldControl").hide();

                // Footer Pagination
                $("#Summaryfooter").show();
                $("#Monitorfooter").hide();
                $("#Registryfooter").hide();
                $("#DieControlfooter").hide();
            } else if (index === 1) {
                $("#MoldSummary").hide();
                $("#MoldMonitor").show();
                $("#MoldTooling").hide();
                $("#MoldControl").hide();

                // Footer Pagination
                $("#Summaryfooter").hide();
                $("#Monitorfooter").show();
                $("#Registryfooter").hide();
                $("#DieControlfooter").hide();
            } else if (index === 2) {
                $("#MoldSummary").hide();
                $("#MoldMonitor").hide();
                $("#MoldTooling").show();
                $("#MoldControl").hide();

                // Footer Pagination
                $("#Summaryfooter").hide();
                $("#Monitorfooter").hide();
                $("#Registryfooter").show();
                $("#DieControlfooter").hide();
            } else {
                $("#MoldSummary").hide();
                $("#MoldMonitor").hide();
                $("#MoldTooling").hide();
                $("#MoldControl").show();

                // Footer Pagination
                $("#Summaryfooter").hide();
                $("#Monitorfooter").hide();
                $("#Registryfooter").hide();
                $("#DieControlfooter").show();
            }

            if (!isTabLoaded[index]) {
                switch (index) {
                    case 0:
                        GetPressSummary();
                        break;
                    case 1:
                        GetPressMonitoring(setMonth, currentYear);
                        break;
                    case 2:
                        GetPressRegistry();
                        break;
                    default:
                        GetPressControl();
                        break;
                }
                isTabLoaded[index] = true;
            }


        });
    });

    $("#Registrymodal").on('click', (e) => {
        e.preventDefault();
        $("#AddTooling").modal("show");
    });

    $("#controlmodal").on('click', (e) => {
        e.preventDefault();
        $("#DieControlTool").modal("show");
    });

    $("#addmodal").on('click', (e) => {
        e.preventDefault();
        $("#InputMoldieModal").modal("show");
    });

    addRegistry.addEventListener('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("AddPressRegistry", "DieMold")', formData);

        if (res.StatusCode === 201) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                confirmButtonColor: "#0d97c9",
                timer: 1500
            }).then(() => {
                GetPressRegistry();
                $("#AddTooling").modal("hide");
            });
        } else {
            Swal.fire({
                icon: "error",
                text: data.ToolNo + " is already Exist",
                timer: 1500,
                showConfirmButton: false
            });
        }
    });

    addDieControl.addEventListener('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        console.log(data);
    });


    editRegistry.addEventListener('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("UpdatePressRegistry", "DieMold")', formData);

        if (res.StatusCode === 200) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                confirmButtonColor: "#0d97c9",
                timer: 1500
            }).then(() => {
                GetPressRegistry();
                $("#EdiTooling").modal("hide");
            });
        }

    });

    updatePress.addEventListener('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("AddUpdatePressDieMonitor", "DieMold")', data);
        if (res.StatusCode === 201) {
            GetPressMonitoring(setMonth, currentYear);
            //GetMoldDieMonth(select.value, currentYear);
            $("#InputMoldieModal").modal("hide");
        }
    });

    const GetPressRegistry = async () => {
        $("#ToolNo").empty();

        const colval = (ActionRestrict() === false) ? 5 : 6; 

        const id = loadingDisplay(2, colval);
        Loadingsteps(id, async () => {
            let res = await fetchData('@Url.Action("GetPressDieRegistryList", "DieMold")', {});
            if (res && res.Success) {
                SummaryData = res.Data;
                const ToolData = SummaryData.filter(res => res.Operational === 1).map(res => res.ToolNo);
                $.each(ToolData, function (index, row) {
                    $("#ToolNo").append("<option value='" + row + "'>" + row + "</option>");
                });

                displayRegistryPagination(SummaryData, 'RegistrylistData', 'RegistryPaginationContainer', 50, 5);
            }
        });

    }
    const GetPressMonitoring = async (month, year) => {
        //let formData = new FormData();
        //// Where value of month is around 1 - 12
        //formData.append('Months', month);
        //formData.append('Year', year);

        //$("#MonthHeader").text(months[month - 1]);

        //const data = Object.fromEntries(formData);
        const id = loadingDisplay(1, 7);
        Loadingsteps(id, async () => {
             let res = await fetchData('@Url.Action("GetPressDieMainMonitoringList", "DieMold")', {});
             if (res && res.Success) {
                 TableData = res.Data;
                 displayMainMonitoring(TableData, 'DiePressMonitoringlist', 'PaginationContainer', 50, 5);
             } else {
                 console.log("No Data found");
             }
        });
    }
    const GetPressSummary = async () => {
        const id = loadingDisplay(0, 10);
        Loadingsteps(id, async () => {
            let res = await fetchData('@Url.Action("GetPressDieSummaryList", "DieMold")', {});
            if (res && res.Success) {
                PressData = res.Data;
                //console.log(PressData);
                displaySummarPressPagination(PressData, 'DiePressMonitoringlistV2', 'PaginationContainerv2', 50, 5);
            } else {
                console.log("No Data found");
            }
        });
    }
    const GetPressControl = async () => {
        const id = loadingDisplay(3, 11);
        Loadingsteps(id, async () => {
            let res = await fetchData('@Url.Action("GetPressDieControlList", "DieMold")', {});
            if (res && res.Success) {
                ControlData = res.Data;
                displayControlPagination(ControlData, 'DiePressControlist', 'PaginationControlContainer', 50, 5);
            } else {
                console.log("No Data found");
            }
        });

    }


    function displayRegistryPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 10, visibleButtons = 5) {
      let currentPage = 1;
      let filteredData = [...dataArray]; // Make a copy for filtering

      const updatePaginationInfo = () => {
          const totalRecords = filteredData.length;
          const totalPages = Math.ceil(totalRecords / recordsPerPage);

          $("#RegistrytotalpageID").text(totalPages);
          $("#RegistryDatalengthID").text(totalRecords);

          return totalPages;
      };

      const renderTable = (page) => {
          const totalPages = updatePaginationInfo();
          const startIndex = (page - 1) * recordsPerPage;
          const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
          const tableBody = document.getElementById(tableBodyId);
          tableBody.innerHTML = '';

          for (let i = startIndex; i < endIndex; i++) {
              let buttons = "";
              const rowData = filteredData[i];

              let colorcirle = rowData.Operational === 1 ? "#04bd6c" : "red";

              if (ActionRestrict() !== false) {
                  $("#HiddenColumns").show();
                  buttons = ` <td id='datatable' style='text-align: center;'>
                                <button type='button' class='btn actionicon text-primary rowClick' id='editButton_${rowData.ToolNo}' >
                                   <i class='fa-regular fa-pen-to-square action_btn'></i>
                                </button>
                            </td>`;
              } else {
                  $("#HiddenColumns").hide();
              }


              const rowHtml = `<tr class='row_${i}' >
                                  <td style='font-weight: 600; color: #222; padding-left: 1.5em;' data-cell="ToolNo">
                                        <div class='d-flex align-item-center justify-content-start gap-2'>
                                            <div class="circleprog" style="background-color: ${colorcirle};"></div>
                                            <span>${rowData.ToolNo}</span>
                                        </div>
                                  </td>
                                  <td data-cell="Type">${rowData.Type}</td>
                                  <td data-cell="Model">${rowData.Model}</td>
                                  <td data-cell="Lines">${rowData.Lines}</td>
                                  <td data-cell="Status">${rowData.Status}</td>
                                  ${buttons}
                              </tr>`;

              tableBody.innerHTML += rowHtml;
          }

          $("#RegistrypagecountID").text(currentPage);
      };

      const renderPagination = () => {
          const totalPages = updatePaginationInfo();
          const paginationContainer = document.getElementById(paginationId);
          paginationContainer.innerHTML = '';

          let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
          let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

          if (endPage > totalPages) {
              endPage = totalPages;
              startPage = Math.max(1, endPage - visibleButtons + 1);
          }

          if (totalPages <= visibleButtons) {
              startPage = 1;
              endPage = totalPages;
          }

          // Previous button
          paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="RegistrychangePage(${currentPage - 1})">
                                         <i class="fa-solid fa-backward"></i>
                                     </button>`;

          for (let i = startPage; i <= endPage; i++) {
              paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="RegistrychangePage(${i})">${i}</button>`;
          }

          // Next button
          paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="RegistrychangePage(${currentPage + 1})">
                                        <i class="fa-solid fa-forward"></i>
                                     </button>`;
      };

        const RegistrychangePage = (page) => {
          if (page >= 1 && page <= updatePaginationInfo()) {
              currentPage = page;
              renderTable(currentPage);
              renderPagination();
          }
      };

      // 🔍 Search functionality
      const searchTable = () => {
          const query = $('#Summarysearchbox').val().toLowerCase();

          filteredData = dataArray.filter(item =>
              item.ToolNo.toLowerCase().includes(query) || item.Type.toLowerCase().includes(query)
          );

          currentPage = 1;
          renderTable(currentPage);
          renderPagination();
      };

      // Add event listener for search input
      $('#Summarysearchbox').on('input', searchTable);

      // Handle click event for edit button
      $(document).on('click', '.rowClick', function (e) {
          e.stopPropagation();
          const buttonId = $(this).attr('id');
          const rowIndex = buttonId.split('_')[1];
          const result = SummaryData.find(p => p.ToolNo == rowIndex);
          if (result) {
              let Ope = result.Operational === 1 ? "Operational" : "No Operational";

              $("#ToolName").text(result.ToolNo);
              $("#EditToolNo").val(result.ToolNo);
              $("#Ope").text(Ope);
              $("#EditType").val(result.Type);
              $("#EditModel").val(result.Model);
              $("#EditLine").val(result.Lines);
              $("#EditStatus").val(result.Status);

              //// Get all radio buttons with the name 'choice'
              let radioButtons = document.querySelectorAll('[name="EditOpe"]');
              //// CHECK IF THE value is the same value
              radioButtons.forEach(radio => {
                  if (parseInt(radio.value) === result.Operational) {
                      radio.checked = true;
                  }
              });


              $("#EdiTooling").modal("show");
          }
      });

       // UPDATES THE DETAILS DATA
       @*detailsform.addEventListener('submit', async (e) => {
           e.preventDefault();

           let formData = new FormData(e.target);
           formData.append('ProcessCode', processcode);
           formData.append('Capgroup_ID', cap_groupID);
           const data = Object.fromEntries(formData);
           let res = await postData('@Url.Action("EditMoldingByDetails", "PostCapacity")', formData);
           EditResult(res, data);
      });*@

      // Initialize table and pagination
      window.RegistrychangePage = RegistrychangePage;
      renderTable(currentPage);
      renderPagination();
    }
    function displaySummarPressPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 10, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#SummarytotalpageID").text(totalPages);
            $("#SummaryDatalengthID").text(totalRecords);

            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';


            // Step 1: Group by "No"
            const groupMap = new Map();
            for (let i = startIndex; i < endIndex; i++) {
                const row = filteredData[i];
                if (!groupMap.has(row.ToolNo)) groupMap.set(row.ToolNo, []);
                groupMap.get(row.ToolNo).push(row);
            }

            // Step 2: Render rows with merged "No"
            groupMap.forEach((groupRows, noValue) => {
                const DieValue = groupRows[0].Type;
                const ToolValue = groupRows[0].ToolNo;
                const StatsValue = groupRows[0].Status;

                const TotalStampValue = groupRows[0].TotalPressStamp;
                let percentValue = 0;
                //const percentValue = Math.round((50 / 100) * 100);

                groupRows.forEach((rowData, idx) => {
                    let rowHtml = "<tr >";

                    switch (StatsValue) {
                        case "Max Die Life":
                            percentValue = 100;
                            break;
                        case "For monitoring":
                            percentValue = 25;
                            break;
                        case "Max Die Life":
                            percentValue = 100;
                            break;
                        case "Reach half die limit":
                            percentValue = 50;
                            break;
                        default:
                            percentValue = 0;
                            break;
                    }




                    if (idx === 0) {
                        rowHtml += `<td rowspan="${groupRows.length}" data-cell="Type" style="font-weight: 600; color: #222;">${DieValue}</td>`;
                        rowHtml += `<td rowspan="${groupRows.length}" data-cell="ToolNo">${ToolValue}</td>`;
                        rowHtml += `<td rowspan="${groupRows.length}" data-cell="Status">
                                    <div class="circular-progress" style="--progress: ${percentValue}%" ></div>
                                </td>`;
                        //rowHtml += `<td rowspan="${groupRows.length}" data-cell="Status"><circle-progress  value="50" max="100"></circle-progress></td>`;
                        //rowHtml += `<td rowspan="${groupRows.length}" data-cell="Status">${StatsValue}</td>`;
                    }


                    rowHtml += `<td data-cell="DiePart" ><i class="fa-solid fa-angles-${rowData.DiePart === "Upper" ? "up" : "down" }"></i>  ${rowData.DiePart}</td>`;
                    rowHtml += `<td data-cell="DieHeight" >${rowData.DieHeight}</td>`;
                    rowHtml += `<td data-cell="StdGrind" >${rowData.StdGrind}</td>`;
                    //rowHtml += `<td data-cell="StampGrind" style="font-weight: 600">${rowData.StampGrind}</td>`;
                    rowHtml += `<td data-cell="Line" >${rowData.Line}</td>`;
                    rowHtml += `<td data-cell="Avg" >${rowData.Avg}</td>`;

                    if (idx === 0) {
                        rowHtml += `<td rowspan="${groupRows.length}" data-cell="TotalStampValue">${getFormatComma(TotalStampValue)}</td>`;
                    }

                    rowHtml += `<td data-cell="Remaining">${getFormatComma(rowData.Remaining)}</td>`;

                    //if (idx === 0) {
                    //    rowHtml += `<td rowspan="${groupRows.length}" data-cell="DieNumber">${dienumValue}</td>`;
                    //    rowHtml += `<td rowspan="${groupRows.length}" data-cell="DieSerial">${dieSerialValue}</td>`;
                    //    rowHtml += `<td rowspan="${groupRows.length}" data-cell="DieLife">${dielifeValue}</td>`;
                    //    rowHtml += `<td rowspan="${groupRows.length}" data-cell="PreviousCount">${PreviousValue}</td>`;
                    //    rowHtml += `<td rowspan="${groupRows.length}" data-cell="ShotOnwards">${ShotOnValue}</td>`;
                    //    rowHtml += `<td rowspan="${groupRows.length}" data-cell="Remarks" style="${remarkColor}">${RemarkeValue}</td>`;
                    //}
                    rowHtml += "</tr>";
                    tableBody.innerHTML += rowHtml;
                });
            });


            $("#SummarypagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="SummarychangePage(${currentPage - 1})">
                                       <i class="fa-solid fa-backward"></i>
                                   </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="SummarychangePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="SummarychangePage(${currentPage + 1})">
                                      <i class="fa-solid fa-forward"></i>
                                   </button>`;
        };

        const SummarychangePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // 🔍 Search functionality
        //const searchTable = () => {
        //    const query = $('#Summarysearchbox').val().toLowerCase();

        //    filteredData = dataArray.filter(item =>
        //        item.PartNo.toLowerCase().includes(query)
        //    );

        //    currentPage = 1;
        //    renderTable(currentPage);
        //    renderPagination();
        //};

        //// Add event listener for search input
        //$('#Summarysearchbox').on('input', searchTable);


         // Initialize table and pagination
         window.SummarychangePage = SummarychangePage;
         renderTable(currentPage);
         renderPagination();
    }
    function displayPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 50, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);

            return totalPages;
        };



        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {

                const rowData = filteredData[i];
                const rowHtml = ` <tr class='row_${i} rowClick' id='editButton_${i}'>
                    <td data-cell="DateInput">${rowData.DateInput}</td>
                    <td data-cell="Upper" style="font-weight: 600; color: hsl(209, 91%, 34%);">${rowData.ToolNo}</td>
                    <td data-cell="Upper">${rowData.Upper}</td>
                    <td data-cell="Lower">${rowData.Lower}</td>
                    <td data-cell="Lower_ActualHeight">${rowData.Lower_ActualHeight}</td>
                    <td data-cell="Lower_DrawingHeight">${rowData.Lower_DrawingHeight}</td>
                    <td data-cell="Upper_ActualHeight">${rowData.Upper_ActualHeight}</td>
                    <td data-cell="Upper_DrawingHeight">${rowData.Upper_DrawingHeight}</td>
                    <td data-cell="PressStamp">${getFormatComma(rowData.PressStamp)}</td>
                </tr>`;

                tableBody.innerHTML += rowHtml;
            }


            $("#pagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                                        <i class="fa-solid fa-backward"></i>
                                    </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                                       <i class="fa-solid fa-forward"></i>
                                    </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // 🔍 Search functionality
        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase();

            filteredData = dataArray.filter(item =>
                item.PartNo.toLowerCase().includes(query)
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        // Add event listener for search input
        //$('#searchbox').on('input', searchTable);

        //// Handle click event for edit button
        //$(document).on('click', '.rowClick', function (e) {
        //    e.stopPropagation();
        //    const buttonId = $(this).attr('id');
        //    const rowIndex = buttonId.split('_')[1];
        //    const result = TableData.find(p => p.RecordID == rowIndex);
        //    if (result) {
        //        $("#PartNo").val(result.PartNo);
        //        $("#No").val(result.No);
        //        $("#MoldInput").val(result.TotalDie);
        //        $("#InputMoldieModal").modal("show");
        //    }
        //});

        // UPDATES THE DETAILS DATA
        @* detailsform.addEventListener('submit', async (e) => {
            e.preventDefault();

            let formData = new FormData(e.target);
            formData.append('ProcessCode', processcode);
            formData.append('Capgroup_ID', cap_groupID);
            const data = Object.fromEntries(formData);
            let res = await postData('@Url.Action("EditMoldingByDetails", "PostCapacity")', formData);
            EditResult(res, data);
        });*@
                 // Initialize table and pagination
         window.changePage = changePage;
         renderTable(currentPage);
         renderPagination();
    }

    function displayMainMonitoring(dataArray, tableBodyId, paginationId, recordsPerPage = 50, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering
        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);

            return totalPages;
        };
        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                
                const rowData = filteredData[i];
                let remarkColor = (rowData.Operational === "End of Life") ? "color: #a81818;" : "color: #054e92;";
               
                const rowHtml = ` <tr class='row_${rowData.MonitorID} rowClick' id='editButton_${rowData.MonitorID}'>
                    <td data-cell="ToolNo" style='font-weight: 600;'>${rowData.ToolNo}</td>
                    <td data-cell="Type" >${rowData.Type}</td>
                    <td data-cell="Upper">${rowData.Line}</td>
                    <td data-cell="Upper">${rowData.MinUpper}</td>
                    <td data-cell="Lower">${rowData.MinLower}</td>
                    <td data-cell="Lower_ActualHeight">${getFormatComma(rowData.TotalPressStamp)}</td>
                    <td data-cell="Lower_DrawingHeight" style="${remarkColor};">${rowData.Operational}</td>
                </tr>`;

                tableBody.innerHTML += rowHtml;
            }


            $("#MonitorpagecountID").text(currentPage);
        };
        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="MonitorchangePage(${currentPage - 1})">
                                        <i class="fa-solid fa-backward"></i>
                                    </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="MonitorchangePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="MonitorchangePage(${currentPage + 1})">
                                       <i class="fa-solid fa-forward"></i>
                                    </button>`;
        };
        const MonitorchangePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };
        // 🔍 Search functionality
        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase();

            filteredData = dataArray.filter(item =>
                item.PartNo.toLowerCase().includes(query)
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        // Add event listener for search input
        //$('#searchbox').on('input', searchTable);

        // Handle click event for edit button
        $(document).on('click', '.rowClick', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];

            window.location.href = "/P1SA/DieMold/DiePressMonitorDetails?ID=" + rowIndex;
          
        });

        // UPDATES THE DETAILS DATA
        @* detailsform.addEventListener('submit', async (e) => {
            e.preventDefault();

            let formData = new FormData(e.target);
            formData.append('ProcessCode', processcode);
            formData.append('Capgroup_ID', cap_groupID);
            const data = Object.fromEntries(formData);
            let res = await postData('@Url.Action("EditMoldingByDetails", "PostCapacity")', formData);
            EditResult(res, data);
        });*@
        // Initialize table and pagination
         window.MonitorchangePage = MonitorchangePage;
         renderTable(currentPage);
         renderPagination();
    }



    function displayControlPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 10, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#DieControltotalpageID").text(totalPages);
            $("#DieControlDatalengthID").text(totalRecords);

            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];

                let dieCon;

                if (rowData.DieCondition === 1) {
                    dieCon = "Continue";
                } else if (rowData.DieCondition === 2) {
                    dieCon = "Grinding Needed";
                } else {
                    dieCon = "Grinding Completed";
                }

                const rowHtml = `<tr class='row_${i}' >
                                  <td data-cell="Date">${rowData.DateInput}</td>
                                  <td data-cell="Type">${rowData.Type}</td>
                                  <td data-cell="Stamping">${getFormatComma(rowData.Stamp)}</td>
                                  <td data-cell="Total">233</td>
                                  <td data-cell="Machine">${rowData.Machine}</td>
                                  <td data-cell="DieCondition">${dieCon}</td>
                                  <td data-cell="Operator">${rowData.Operator}</td>
                                  <td data-cell="DieHeight">${rowData.DieHeight}</td>
                                  <td data-cell="LeaderCom">${rowData.LeaderCom}</td>
                                  <td data-cell="Gear">${rowData.Gear}</td>
                                  <td data-cell="Pitch">${rowData.Pitch}</td>
                              </tr>`;

                tableBody.innerHTML += rowHtml;
            }

            $("#DieControlpagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="DieControlchangePage(${currentPage - 1})">
                                     <i class="fa-solid fa-backward"></i>
                                 </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="DieControlchangePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="DieControlchangePage(${currentPage + 1})">
                                    <i class="fa-solid fa-forward"></i>
                                 </button>`;
        };

        const DieControlchangePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // 🔍 Search functionality
        const searchTable = () => {
            const query = $('#Summarysearchbox').val().toLowerCase();

            filteredData = dataArray.filter(item =>
                item.ToolNo.toLowerCase().includes(query) || item.Type.toLowerCase().includes(query)
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        // Add event listener for search input
        $('#Summarysearchbox').on('input', searchTable);

        // Handle click event for edit button
        $(document).on('click', '.rowClick', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];
            const result = SummaryData.find(p => p.ToolNo == rowIndex);
            if (result) {
                let Ope = result.Operational === 1 ? "Operational" : "No Operational";

                $("#ToolName").text(result.ToolNo);
                $("#EditToolNo").val(result.ToolNo);
                $("#Ope").text(Ope);
                $("#EditType").val(result.Type);
                $("#EditModel").val(result.Model);
                $("#EditLine").val(result.Lines);
                $("#EditStatus").val(result.Status);

                //// Get all radio buttons with the name 'choice'
                let radioButtons = document.querySelectorAll('[name="EditOpe"]');
                //// CHECK IF THE value is the same value
                radioButtons.forEach(radio => {
                    if (parseInt(radio.value) === result.Operational) {
                        radio.checked = true;
                    }
                });


                $("#EdiTooling").modal("show");
            }
        });

        // UPDATES THE DETAILS DATA


            // Initialize table and pagination
        window.DieControlchangePage = DieControlchangePage;
        renderTable(currentPage);
        renderPagination();
    }

    function loadingDisplay(load, col) {
        let targetDisplay, loadingTextId;

        switch (load) {
            case 0:
                targetDisplay = TableDisplay;
                loadingTextId = "loadingStepText_Main";
                break;
            case 1:
                targetDisplay = MonitorDisplay;
                loadingTextId = "loadingStepText_Monitor";
                break;
            case 2:
                targetDisplay = ToolingDisplay;
                loadingTextId = "loadingStepText_Tooling";
                break;
            default:
                targetDisplay = ControlDisplay;
                loadingTextId = "loadingStepText_Control";
                break;
        }


        const loadData = `<tr>
                      <td colspan='${col}'>
                          <div class='Loadercontainer'>
                              <span class="loader"></span>
                              <p id="${loadingTextId}">Fetching data from the database..</p>
                          </div>
                      </td>
                  </tr>`;

        targetDisplay.empty();
        targetDisplay.append(loadData);

        return loadingTextId;

    }
    function Loadingsteps(loadingTextId, callback) {
        const steps = [
            "Fetching data from the database...",
            "Processing data...",
            "Finalizing table view..."
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            const stepText = document.getElementById(loadingTextId);
            if (stepText) {
                stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval); // in case it's removed
            }

            if (stepIndex >= steps.length) {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }

    const LoadPageData = async () => {
        try {
            if (ActionRestrict() !== false) {
                $("#HiddenColumns").hide();
            }


            $("#MoldSummary").show();
            $("#MoldMonitor").hide();
            $("#MoldTooling").hide();
            $("#MoldControl").hide();

            // Footer Pagination
            $("#Summaryfooter").show();
            $("#Monitorfooter").hide();
            $("#Registryfooter").hide();
            $("#DieControlfooter").hide();

            const [regis, Monitor, Summary, Control] = await Promise.all([
                GetPressRegistry(),
                GetPressMonitoring(setMonth, currentYear),
                GetPressSummary(),
                GetPressControl()
            ]);

        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    };

    $(document).ready(() => {
        LoadPageData();
    });
</script>
