
@model  PMACS_V2.Areas.P1SA.Models.PressMainMonitor

@{
    ViewBag.Title = "DiePressMonitorDetails";
    Layout = "~/Areas/P1SA/Views/Shared/_Layout.cshtml";
}

<section class="mb-3">
    <header class="MainHeader">
        <div class="MoldTitle">
            <div class="d-flex align-items-center gap-4">
                <a class="d-flex align-items-center justify-content-center" href="/P1SA/DieMold/DiePressLife"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
                <div>
                    <span class="fw-bold fs-5" style="color: #222;"><span>@Model.Type</span>  Stator Die (<span>@Model.Line</span> lines) </span> <br />
                    <span class="fw-bold" style="color: #222;">Tool No: </span><span id="ToolText">@Model.ToolNo</span> <span class="m-0" id="Ope">@Model.Operational</span>
                </div>
            </div>
        </div>
        <div class="Mold__actions d-flex gap-2">
            <button id="sortbtn"><i class="fa-solid fa-arrow-down-short-wide"></i></button>
            <button  id="cancelmodal"><i class="fa-solid fa-stop"></i> End of Life</button>
            <button class="primary_button_color" id="addmodal"><i class="fa-solid fa-plus"></i> Add Data</button>
        </div>
    </header>
</section>


<div class="DieMainTable PressTable">
    <table>
        <thead>
            <tr>
                <th rowspan="3">Date</th>
                <th colspan="2" class="green-header">Die Life</th>
                <th colspan="6" class="blue-header">Die Grinding</th>
                <th rowspan="3" class="blue-header">
                    No. of Press stamp
                    <span id="TotalStamp">@Model.TotalPressStamp</span>
                </th>
            </tr>
            <tr>
                <th class="green-header">Upper</th>
                <th class="green-header">Lower</th>

                <th colspan="3" class="blue-subheader">Upper</th>
                <th colspan="3" class="blue-subheader">Lower</th>
            </tr>
            <tr>
                <td class="green-header">11</td>
                <td class="green-header">10</td>

                <!-- Upper Grinding -->
                <td class="blue-subheader">①<br>Actual<br>Height</td>
                <td class="blue-subheader">②<br>Drawing<br>Height</td>
                <td class="blue-subheader">③<br>②−①</td>

                <!-- Lower Grinding -->
                <td class="blue-subheader">①<br>Actual<br>Height</td>
                <td class="blue-subheader">②<br>Drawing<br>Height</td>
                <td class="blue-subheader">③<br>②−①</td>
            </tr>
        </thead>
        <tbody id="DieMoldToolist">
        </tbody>
    </table>


</div>
<div class="PressMoldfooterContainer" id="Summaryfooter">
    <span>Showing  <span id="SummarypagecountID">-</span> to <span id="SummarytotalpageID">-</span> of  <span id="SummaryDatalengthID">-</span> Entries</span>
    <div id="PaginationContainer" class="paginationPartlocal"></div>
</div>





<div class="modal fade modal-md" id="MonitorModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>Die Life Monitoring Input</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <div class="MoldieBodyModal mt-3">
                    <form id="AddMoldieform" autocomplete="off">
                        <input type="hidden" name="ToolNo" value="@Model.ToolNo" />
                        <input type="hidden" name="MonitorID" value="@Model.MonitorID" />
                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label>Up Actual Height</label>
                                <input type="text" name="Upper_ActualHeight" onkeypress="return restrictChars(event)" required />
                            </div>

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label>Up Drawing Height</label>
                                <input type="text" name="Upper_DrawingHeight" onkeypress="return restrictChars(event)" required />
                            </div>
                        </div>


                        <div class="row">
                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label>low Actual Height</label>
                                <input type="text" name="Lower_ActualHeight" onkeypress="return restrictChars(event)" required />
                            </div>

                            <div class="form_group col-12 col-lg-6 col-sm-12">
                                <label>low Drawing Height</label>
                                <input type="text" name="Lower_DrawingHeight" onkeypress="return restrictChars(event)" required />
                            </div>
                        </div>


                        <div class="form_group col-12  col-sm-12">
                            <label>No. of Stamping Press</label>
                            <input type="text" name="PressStamp" onkeypress="return restrictChars(event)"  />
                        </div>


                        <div class="edits_footer" id="editsdisplay">
                            <button type="submit" class="primary_button_color">
                                <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                            </button>
                        </div>
                    </form>
                </div>


            </div>


        </div>
    </div>
</div>







<script type="text/javascript">
    let sort = 0;
    let StatusName = $("#Ope").text;

    $("#addmodal").on('click', (e) => {
        e.preventDefault();
        $("#MonitorModal").modal('show');
    });

    $("#sortbtn").on('click', (e) => {
        e.preventDefault();
        sort = (sort === 0) ? 1 : 0;
        GetPressMonitoring();
    });

    $("#cancelmodal").on('click',  (e) => {
        e.preventDefault();
        Swal.fire({
            title: "End of Life ?",
            text: "Are you sure you want press it?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#a3a3a3",
            confirmButtonText: "Log out"
        }).then(async (result) => {
            /* Read more about isConfirmed, isDenied below */
            if (result.isConfirmed) {
                let res = await postData('@Url.Action("EndofLifeMonitor", "DieMold")', { ToolNo: $("#ToolText").text() });
                if (res.StatusCode === 201) {
                    Swal.fire({
                        title: "Success",
                        text: res.Message,
                        icon: "success",
                        confirmButtonColor: "#0d97c9",
                        timer: 1500
                    }).then(() => {
                        $("#cancelmodal").prop("disabled", true);
                        $("#addmodal").prop("disabled", true);
                        $("#Ope").text("End of Life");
                    });
                }
            }
        });
    });

    $("#AddMoldieform").on('submit', async (e) => {
        e.preventDefault();
        const addmodelform = document.querySelector('#AddMoldieform');
        let formdata = new FormData(e.target);
        const data = Object.fromEntries(formdata);

        let res = await postData('@Url.Action("AddMoldiePressMonitor", "DieMold")', data);
        console.log(res);
        if (res.StatusCode === 201) {
            GetPressMonitoring();
            addmodelform.reset();
            $("#TotalStamp").text(res.Data);
            $("#MonitorModal").modal('hide');

            //Swal.fire({
            //    title: "Success",
            //    text: res.Message,
            //    icon: "success",
            //    confirmButtonColor: "#0d97c9",
            //    timer: 1500
            //}).then(() => {
            //    GetPressMonitoring();
            //    addmodelform.reset();
            //    $("#TotalStamp").text(res.Data);   
            //    $("#MonitorModal").modal('hide');
            //});
        } else {
            //Swal.fire({
            //    icon: "error",
            //    text: data.ToolNo + " is already Exist",
            //    timer: 1500,
            //    showConfirmButton: false
            //});
        }
    });


    const GetPressMonitoring = async () => {
        let res = await FetchAuthenticate('@Url.Action("GetPressDieMonitoringList", "DieMold")', { ToolNo: $("#ToolText").text() });
         if (res && res.Success) {
             TableData = res.Data;

             if (sort == 0) {
                 TableData.sort((a, b) => a.RecordID - b.RecordID);
             } else {
                 TableData.sort((a, b) => b.RecordID - a.RecordID);
             }
             
             displaySummarPressPagination(TableData, 'DieMoldToolist', 'PaginationContainer', 50, 5);
         } else {
             console.log("No Data found");
         }
     }
    function displaySummarPressPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 50, visibleButtons = 5) {
         let currentPage = 1;
         let filteredData = [...dataArray]; // Make a copy for filtering
         const updatePaginationInfo = () => {
             const totalRecords = filteredData.length;
             const totalPages = Math.ceil(totalRecords / recordsPerPage);

             $("#totalpageID").text(totalPages);
             $("#DatalengthID").text(totalRecords);

             return totalPages;
         };
         const renderTable = (page) => {
             const totalPages = updatePaginationInfo();
             const startIndex = (page - 1) * recordsPerPage;
             const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
             const tableBody = document.getElementById(tableBodyId);
             tableBody.innerHTML = '';

             for (let i = startIndex; i < endIndex; i++) {

                 const rowData = filteredData[i];
                 const rowHtml = ` <tr class='row_${rowData.MonitorID} rowClick' id='editButton_${rowData.MonitorID}'>
                     <td data-cell="DateInput">${rowData.DateInput}</td>
                     <td data-cell="Up" style='font-weight: 600;'>${rowData.Up}</td>
                     <td data-cell="Low" style='font-weight: 600;'>${rowData.Low}</td>
                     <td data-cell="Upper_ActualHeight" style='font-weight: 600;'>${rowData.Upper_ActualHeight}</td>
                     <td data-cell="Upper_DrawingHeight" style='font-weight: 600;'>${rowData.Upper_DrawingHeight}</td>
                     <td data-cell="GrindUpper" style='font-weight: 600;'>${rowData.GrindUpper}</td>
                     <td data-cell="Lower_ActualHeight" style='font-weight: 600;'>${rowData.Lower_ActualHeight}</td>
                     <td data-cell="Lower_DrawingHeight" style='font-weight: 600;'>${rowData.Lower_DrawingHeight}</td>
                     <td data-cell="GrindLower" style='font-weight: 600;'>${rowData.GrindLower}</td>
                     <td data-cell="PressStamp">${rowData.PressStamp}</td>
                 </tr>`;

                 tableBody.innerHTML += rowHtml;
             }


             $("#MonitorpagecountID").text(currentPage);
         };
         const renderPagination = () => {
             const totalPages = updatePaginationInfo();
             const paginationContainer = document.getElementById(paginationId);
             paginationContainer.innerHTML = '';

             let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
             let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

             if (endPage > totalPages) {
                 endPage = totalPages;
                 startPage = Math.max(1, endPage - visibleButtons + 1);
             }

             if (totalPages <= visibleButtons) {
                 startPage = 1;
                 endPage = totalPages;
             }

             // Previous button
             paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="MonitorchangePage(${currentPage - 1})">
                                         <i class="fa-solid fa-backward"></i>
                                     </button>`;

             for (let i = startPage; i <= endPage; i++) {
                 paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="MonitorchangePage(${i})">${i}</button>`;
             }

             // Next button
             paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="MonitorchangePage(${currentPage + 1})">
                                        <i class="fa-solid fa-forward"></i>
                                     </button>`;
         };
         const MonitorchangePage = (page) => {
             if (page >= 1 && page <= updatePaginationInfo()) {
                 currentPage = page;
                 renderTable(currentPage);
                 renderPagination();
             }
         };
         // 🔍 Search functionality
         //const searchTable = () => {
         //    const query = $('#searchbox').val().toLowerCase();

         //    filteredData = dataArray.filter(item =>
         //        item.PartNo.toLowerCase().includes(query)
         //    );

         //    currentPage = 1;
         //    renderTable(currentPage);
         //    renderPagination();
         //};

         // Add event listener for search input
         //$('#searchbox').on('input', searchTable);

         // Handle click event for edit button
         $(document).on('click', '.rowClick', function (e) {
             e.stopPropagation();
             const buttonId = $(this).attr('id');
             const rowIndex = buttonId.split('_')[1];


         });

         // UPDATES THE DETAILS DATA
         @* detailsform.addEventListener('submit', async (e) => {
             e.preventDefault();

             let formData = new FormData(e.target);
             formData.append('ProcessCode', processcode);
             formData.append('Capgroup_ID', cap_groupID);
             const data = Object.fromEntries(formData);
             let res = await postData('@Url.Action("EditMoldingByDetails", "PostCapacity")', formData);
             EditResult(res, data);
         });*@
         // Initialize table and pagination
          window.MonitorchangePage = MonitorchangePage;
          renderTable(currentPage);
          renderPagination();
     }

    $(document).ready(() => {
        if (StatusName === "End of Life") {
            $("#cancelmodal").prop("disabled", true);
            $("#addmodal").prop("disabled", true);
        }
        GetPressMonitoring();
    });
   
</script>
