
@{
    ViewBag.Title = "ForecastData";
    Layout = "~/Areas/P1SA/Views/Shared/_Layout.cshtml";
}

<div class="selectiontabs">
    <header class="MainHeader">
        <div class="d-flex align-items-center gap-3">
            <a href="/P1SA/PMACS/Selection"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
            <h4>Forecast Data</h4>
        </div>

        <div class="Mold__actions flex_align">
            <div class="searchinputContainer" id="hiddenInput">
                <i class="fa-solid fa-magnifying-glass"></i>
                <input type="text" placeholder="Search here ... " id="searchbox" />
                <div class="line"></div>
            </div>
            <button id="Excelbtn" class="primary_button_color"><i class="fa-solid fa-file-import"></i>  Update forecast</button>
        </div>
    </header>

    <div class="selectiontabs__header mt-3">
        <div class="active">Total by month</div>
        <div>Data table</div>
    </div>



    <div class="selectiontabs__body">
        <div class="active" style="width: 100%;">
            <div class="Chartwrapper">
                <canvas id="myChart"></canvas>
            </div>
        </div>
        <div style="width: 100%;">
            <div class="ForecastTable">
                <table>
                    <thead>
                        <tr>
                            <th class="sortable" style="text-align: left; padding-left: 1.5em; width: 150px;">Model Base</th>
                            <th>Jan</th>
                            <th>Feb</th>
                            <th>Mar</th>
                            <th>Apr</th>
                            <th>May</th>
                            <th>Jun</th>
                            <th>Jul</th>
                            <th>Aug</th>
                            <th>Sept</th>
                            <th>Oct</th>
                            <th>Nov</th>
                            <th>Dec</th>
                        </tr>
                    </thead>

                    <tbody id="forecastdata">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="MasterlistWrap_footer " id="tablefooter">
    <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

    <div id="MastertableContainer" class="paginationPartlocal flex_align"></div>
</div>





<!--########################## UPLOAD DATA #############################-->
<div class="modal fade modal-lg " id="uploadmodal" data-keyboard="false" data-backdrop="static" tabindex="-1" role="dialog"
     data-bs-backdrop="static"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <div class="custom_modal__icon">
                        <div class="custom_icon_container">
                            <i class="fa-solid fa-file-import"></i>
                        </div>
                        <div class="custom_modal_title">
                            <span>Update  forecast Data</span>
                            <p id="procname">Upload Excel File Only</p>
                        </div>
                    </div>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>


                <div class="custom_modal_body">
                    <div class="modal__date">

                        <select id="calendar" name="calendar" class="mb-3">
                            <option value="month">All</option>
                            <option value="January">January</option>
                            <option value="February">February</option>
                            <option value="March">March</option>
                            <option value="April">April</option>
                            <option value="May">May</option>
                            <option value="June">June</option>
                            <option value="July">July</option>
                            <option value="August">August</option>
                            <option value="September">September</option>
                            <option value="October">October</option>
                            <option value="November">November</option>
                            <option value="December">December</option>
                        </select>
                    </div>

                    <form method="post" enctype="multipart/form-data" id="ImportExcel">
                        <div class="upload-container" id="upload-container">
                            <p>Drag and drop an Excel file here</p>
                            <input type="file" id="file-input" name="file-input" accept=".xlsx, .xls" hidden>
                        </div>
                        <progress id="progress-bar" value="0" max="100" style="width: 100%; display: none;"></progress>
                    </form>
                </div>
            </div>

        </div>
    </div>
</div>



<script src="~/Scripts/chart.js"></script>
<script type="text/javascript">
    const totalSumData = [];

    const GetForecastData = async() => {
        // Create a new Date object
        var currentDate = new Date();
        let jan = 0.0;
        let feb = 0.0;
        let mar = 0.0;
        let apr = 0.0;
        let may = 0.0;
        let jun = 0.0;
        let jul = 0.0;
        let aug = 0.0;
        let sep = 0.0;
        let oct = 0.0;
        let nov = 0.0;
        let dec = 0.0;

        let res = await fetchData('@Url.Action("GetForecastModelList", "Capacity")', { year: currentDate.getFullYear() });
        if (res && res.Success) {
            MasterlistPagination(res.Data, 'forecastdata', 'MastertableContainer', 50, 5);
        }

    }
    const GetForecastForChart = async () => {
        let res = await fetchData('@Url.Action("GetForecastChartList", "Capacity")', {})
        if (res && res.Success) {
            const result = Object.values(res.Data[0]).map(value => Math.round(value));
            DisplayChartData(result);
        }
    }
    function DisplayChartData(data) {
        // DISPLAY THE CHART TOTAL
        const ctx = document.getElementById('myChart');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                datasets: [{
                    label: 'Total forecast Data ',
                    data: data,
                    backgroundColor: [
                        'rgba(25, 131, 230, 0.3)',
                        'rgba(25, 131, 230, 0.3)',
                        'rgba(25, 131, 230, 0.3)',
                        'rgba(25, 131, 230, 0.3)',
                        'rgba(25, 131, 230, 0.3)',
                        'rgba(25, 131, 230, 0.3)',
                        'rgba(25, 131, 230, 0.3)',
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false // 👈 removes the legend box (red area)
                    },
                    title: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            font: {
                                family: 'Poppins', // Change the font family
                                size: 12,        // Change the font size
                                weight: 'bold'   // Change the font weight
                            },
                            color: '#222' // Change the font color
                        }
                    },
                    x: {
                        ticks: {
                            font: {
                                family: 'Poppins', // Change the font family
                                size: 14,        // Change the font size
                                weight: 'medium'   // Change the font weight
                            },
                            color: '#222' // Change the font color
                        }
                    }
                }
            }
            
        });
    }


    // TABS CONTROLS
    let tabs = document.querySelector(".selectiontabs");
    let tabheader = tabs.querySelector(".selectiontabs__header");
    let tabBody = tabs.querySelector(".selectiontabs__body");
    let tabIndicator = tabs.querySelector(".tabs__indicator");
    let tabHeadernodes = tabs.querySelectorAll(".selectiontabs__header > div");
    let tabBodynodes = tabs.querySelectorAll(".selectiontabs__body > div");

    for (let i = 0; i < tabHeadernodes.length; i++) {
        tabHeadernodes[i].addEventListener("click", function () {
            tabheader.querySelector(".active").classList.remove("active");
            tabHeadernodes[i].classList.add("active");
            tabBody.querySelector(".active").classList.remove("active");
            tabBodynodes[i].classList.add("active");

            if (i === 1) {
                $("#hiddenInput").show();
                $("#tablefooter").show();
            } else {
                $("#hiddenInput").hide();
                $("#tablefooter").hide();
            }
        });
    }

    
    function ValidationForm() {
        if ($("#calendar").val() == 'month') {
            return false;
        } else {
            return true;
        }
    }

    $("#Excelbtn").click(function () {
        $("#uploadmodal").modal("show");
    });

    //-------------------  UPLOAD EXCEL FILE ------------------------------

    document.addEventListener('DOMContentLoaded', () => {
        const uploadContainer = document.getElementById('upload-container');
        const fileInput = document.getElementById('file-input');

        uploadContainer.addEventListener('click', () => fileInput.click());

        uploadContainer.addEventListener('dragover', (event) => {
            event.preventDefault();
            uploadContainer.classList.add('dragover');
        });

        uploadContainer.addEventListener('dragleave', () => {
            uploadContainer.classList.remove('dragover');
        });

        uploadContainer.addEventListener('drop', (event) => {
            event.preventDefault();
            uploadContainer.classList.remove('dragover');
            handleFiles(event.dataTransfer.files);
        });

        fileInput.addEventListener('change', (event) => {
            handleFiles(event.target.files);
        });

        function handleFiles(files) {
            if (files.length === 0) return;
            const file = files[0];
            if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {
                alert('Please upload a valid Excel file.');
                return;
            }
            const formData = new FormData();
            formData.append('excelfile', file);
            formData.append('calendar', $("#calendar").val());
            //const data = Object.fromEntries(formData);
            //console.log(data);
            // You can now send the formData to the server using fetch or XMLHttpRequest
            // Example using fetch:
            // fetch('/your-upload-endpoint', {
            //     method: 'POST',
            //     body: formData
            // }).then(response => response.json())
            //   .then(data => console.log(data))
            //   .catch(error => console.error('Error:', error));
            let check = ValidationForm();
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/Capacity/ImportForecastData', true);

            xhr.upload.addEventListener('progress', function (e) {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    const progressBar = document.getElementById('progress-bar');
                    progressBar.style.display = 'block';
                    progressBar.value = percentComplete;
                }
            });

            xhr.addEventListener('load', function () {
                const progressBar = document.getElementById('progress-bar');
                progressBar.style.display = 'none';
                if (xhr.status === 200) {
                    const res = JSON.parse(xhr.responseText);
                    if (res.isSuccess) {
                        $("#uploadmodal").modal("hide");
                        Swal.fire({
                            text: res.message,
                            icon: "success",
                            confirmButtonColor: "#0d97c9",
                            timer: 2000
                        }).then(() => {
                            window.location.href = "/Capacity/ForecastData";
                        });
                    } else {
                        alert("Upload a file first");
                    }
                } else {
                    alert('Upload failed!');
                }
            });

            xhr.addEventListener('error', function () {
                alert('An error occurred while uploading the file.');
            });


            xhr.send(formData);


        }




      
    });
  
    function MasterlistPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
          let currentPage = 1;
          let filteredData = [...dataArray];

          const updatePaginationInfo = () => {
              const totalRecords = filteredData.length;
              const totalPages = Math.ceil(totalRecords / recordsPerPage);
              $("#totalpageID").text(totalPages);
              $("#DatalengthID").text(totalRecords);
              return totalPages;
          };

          const renderTable = (page) => {
              let jan = 0.0;
              let feb = 0.0;
              let mar = 0.0;
              let apr = 0.0;
              let may = 0.0;
              let jun = 0.0;
              let jul = 0.0;
              let aug = 0.0;
              let sep = 0.0;
              let oct = 0.0;
              let nov = 0.0;
              let dec = 0.0;


              const totalPages = updatePaginationInfo();
              const startIndex = (page - 1) * recordsPerPage;
              const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
              const tableBody = document.getElementById(tableBodyId);
              tableBody.innerHTML = '';

              for (let i = startIndex; i < endIndex; i++) {
                  const rowData = filteredData[i];
                  const color = rowData.Color;

                  var rowHtml = `<tr class= 'row_${i}'>
                                      <td style='font-weight: 600; text-align: left; padding-left: 1.5em; width: 150px;'>${rowData.Model_name}</td>
                                      <td>${rowData.January}</td>
                                      <td>${rowData.February}</td>
                                      <td>${rowData.March}</td>
                                      <td>${rowData.April}</td>
                                      <td>${rowData.May}</td>
                                      <td>${rowData.June}</td>
                                      <td>${rowData.July}</td>
                                      <td>${rowData.August}</td>
                                      <td>${rowData.September}</td>
                                      <td>${rowData.October}</td>
                                      <td>${rowData.November}</td>
                                      <td>${rowData.December}</td>
                                </tr>`;
                  tableBody.innerHTML += rowHtml;


                  jan += parseFloat(rowData.January);
                  feb += parseFloat(rowData.February);
                  mar += parseFloat(rowData.March);
                  apr += parseFloat(rowData.April);
                  may += parseFloat(rowData.May);
                  jun += parseFloat(rowData.June);
                  jul += parseFloat(rowData.July);
                  aug += parseFloat(rowData.August);
                  sep += parseFloat(rowData.September);
                  oct += parseFloat(rowData.October);
                  nov += parseFloat(rowData.November);
                  dec += parseFloat(rowData.December);
              }


              totalSumData.push(jan)
              totalSumData.push(feb)
              totalSumData.push(jan)
              totalSumData.push(mar)
              totalSumData.push(apr)
              totalSumData.push(may)
              totalSumData.push(jun)
              totalSumData.push(jul)
              totalSumData.push(aug)
              totalSumData.push(sep)
              totalSumData.push(oct)
              totalSumData.push(nov)
              totalSumData.push(dec)

              $("#jan").text(getFormatComma(jan));
              $("#feb").text(getFormatComma(feb));
              $("#mar").text(getFormatComma(mar));
              $("#apr").text(getFormatComma(apr));
              $("#may").text(getFormatComma(may));
              $("#jun").text(getFormatComma(jun));
              $("#jul").text(getFormatComma(jul));
              $("#aug").text(getFormatComma(aug));
              $("#sep").text(getFormatComma(sep));
              $("#oct").text(getFormatComma(oct));
              $("#nov").text(getFormatComma(nov));
              $("#dec").text(getFormatComma(dec));




              $("#pagecountID").text(currentPage);
          };

          const renderPagination = () => {
              const totalPages = updatePaginationInfo();
              const paginationContainer = document.getElementById(paginationId);
              paginationContainer.innerHTML = '';

              let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
              let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

              if (endPage > totalPages) {
                  endPage = totalPages;
                  startPage = Math.max(1, endPage - visibleButtons + 1);
              }

              if (totalPages <= visibleButtons) {
                  startPage = 1;
                  endPage = totalPages;
              }

              // Previous button
              paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                  <i class="fa-solid fa-backward"></i>
              </button>`;

              for (let i = startPage; i <= endPage; i++) {
                  paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
              }

              // Next button
              paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                  <i class="fa-solid fa-forward"></i>
              </button>`;
          };

          const changePage = (page) => {
              if (page >= 1 && page <= updatePaginationInfo()) {
                  currentPage = page;
                  renderTable(currentPage);
                  renderPagination();
              }
          };


          const searchTable = () => {
              const query = $('#searchbox').val().toLowerCase() || '';
              filteredData = dataArray.filter(item =>
                  item.Model_name.toLowerCase().includes(query)
              );
              currentPage = 1;
              renderTable(currentPage);
              renderPagination();
          };

          $('#searchbox').on('input', searchTable);

          window.changePage = changePage;
          renderTable(currentPage);
          renderPagination();
      }

    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            $("#hiddenInput").hide();
            $("#tablefooter").hide();

            const [logs, manpower, total] = await Promise.all([
                GetForecastData(),
                GetForecastForChart()
            ]);

        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>
