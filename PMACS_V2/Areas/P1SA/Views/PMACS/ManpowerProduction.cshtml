
@{
    ViewBag.Title = "ManpowerProduction";
    Layout = "~/Areas/P1SA/Views/Shared/_Layout.cshtml";
}


<header class="MainHeader">
    <h4>Production Manpower</h4>
    <div class="header__action">
        <span id="Updatelog" style="color: #222;">last Update April 2025</span>
    </div>
</header>

<section class="mt-4">
    <div class="row">
        <div class="col-8">
            <div class="chart_container" style="padding: 1.5em; background: #fff; border: 1px solid #d4d3d3; border-radius: .5em;">
                <canvas id="lackingChart" width="600" height="300"></canvas>
            </div>
        </div>

        <div class="col-4">
            <div class="chart_container" style="padding: 1.5em; background: #fff; border: 1px solid #d4d3d3; border-radius: .5em;">
                <canvas id="manpowerChart" width="200" height="200" style="width: 200px !important; height: 200px"></canvas>
            </div>
        </div>
    </div>
</section>

<div class="Mantabs mt-4">
    <div class="Mantabs__header">
        <div class="active">Lacking Manpower Data</div>
        <div>Manpower/process</div>
    </div>

    <div class="Mantabs__body">
        <div class="active" style="width: 100%;">
            <div class="MainTable">
                <table>
                    <thead>
                        <tr>
                            <th >Section</th>
                            <th>Actual</th>
                            <th>Required</th>
                            <th>Lacking</th>
                        </tr>
                    </thead>
                    <tbody id="DisplaysectionID">
                    </tbody>
                </table>
            </div>
        </div>

        <div style="width: 100%;">
            <div class="MainTable">
                <table>
                    <thead>
                        <tr style="background: hsl(209, 97%, 13%) !important; color: #fff; ">
                            <th style="text-align: left; padding-left: 2em;">Process</th>
                            <th>SDP</th>
                            <th>Subcon</th>
                            <th>Remarks</th>
                            <th id="headertable">Action</th>
                        </tr>
                    </thead>
                    <tbody id="ManpowerID">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
 </div>











    <!--########################## EDIT DATA #############################-->
    <div class="modal fade modal-m" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-body">
                    <div class="custom_modal_header">
                        <div class="custom_modal__icon" >
                            <div class="custom_icon_container">
                                <i class='fa-regular fa-pen-to-square '></i>
                            </div>
                            <div class="custom_modal_title">
                                <span id="exampleModalLabel">Edit Data</span>
                            </div>
                        </div>

                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>


                    <form id="EditPisa" style="margin-top: 1em;">
                    </form>
                </div>




            </div>
        </div>
    </div>

    <!--########################## EDIT DATA #############################-->
    <div class="modal fade modal-m" id="requiredmodal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-body">
                    <div class="custom_modal_header">
                        <div class="custom_modal__icon" style="align-items: center;">
                            <div class="custom_icon_container">
                                <i class='fa-regular fa-pen-to-square '></i>
                            </div>
                            <div class="custom_modal_title">
                                <span>Required</span>
                            </div>
                        </div>

                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>


                    <form id="requiredform" style="margin-top: 1em; padding: 0 1em;">
                        <label id="modelsec">Molding</label>
                        <input type="hidden" name="sectionID" id="sectionID" />
                        <input type="text" name="requiredQty" id="requiredQty" onkeypress="return restrictChars(event)" maxlength="5" />
                        <div class='footer d-flex justify-content-end pt-4 pb-2 gap-2'>
                            <button type='submit' id='saveEditsum'><i class='fa-regular fa-floppy-disk'></i>  Save</button>
                        </div>
                    </form>
                </div>




            </div>
        </div>
    </div>



    <script src="~/Scripts/chart.js"></script>
    <script type="text/javascript">
     const currentYear = new Date().getFullYear();
     const Month = new Date().toLocaleString('en-US', { month: 'long' });

     let load_table = $("#ManpowerID");

     const tabs = document.querySelectorAll('.tab_btn');
     const content = document.querySelectorAll('.content');

     const editmanpower = document.getElementById("EditPisa");
     const editrequired = document.getElementById("requiredform");

     var loadData = [];
     var totalarrayload = [];
     let checkrole = 0;
     let userRole;

     const GetManpowerData = async() =>{
         let res = await fetchData('@Url.Action("GetManpowerData", "PMACS")', {});
         if (res && res.Success) {
             let load = res.Data;
             loadData = load;
             //GET THE TOTAL MANPOWER
             const totalSDP = load.reduce((sum, el) => sum + el.SDP, 0);
             const totalSubCon = load.reduce((sum, el) => sum + el.SubCon, 0);
             const totalManpower = load.reduce((sum, el) => sum + el.SDP + el.SubCon, 0);

             let TotalData = [totalSDP, totalSubCon];

             DoughnutDisplay("", TotalData);
             //displaytheTotalBySection(load);
             displaytableData(load);
         }
     }
     const Totalmanpower = async () => {
         let buttons = '';
         const monthNames = [
             "January", "February", "March", "April", "May", "June",
             "July", "August", "September", "October", "November", "December"
         ];

         let res = await fetchData('@Url.Action("GetTotalmanpower", "PMACS")', { months: monthNames[new Date().getMonth()] });
         if (res && res.Success) {
             totalarrayload = res.Data;

             let labelData = totalarrayload.map(res => res.SectionName);
             let lowData = totalarrayload.map(res => res.Lacking);


             ChartDisplay(labelData, lowData);

             var totalData = $("#DisplaysectionID");
             totalData.empty();
             $.each(totalarrayload, function (index, rowData) {
                 const negativecolor = parseFloat(rowData.Lacking);
                 const color = negativecolor < 0 ? 'red' : 'black';

                 var getdata = "<tr class= 'row_" + index + "  '>" +
                     "<td style='font-weight: 600;'>" + rowData.SectionName + "</td>" +
                     "<td style='text-align: center;'>" + rowData.Actual + "</td>" +
                     "<td style='text-align: center;'>" + rowData.Required + "</td>" +
                     "<td style='text-align: center;   color: " + color + "; font-weight: 600;'>" + rowData.Lacking + "</td>" +
                     "</tr>";
                 totalData.append(getdata);
             });
         }
     }

   



     // LOADS THE DATA FIRST
     const userDataRole = () => {
         let index = localStorage.getItem('users');
         var parsedObject = JSON.parse(index);
         checkrole = parsedObject.Roles_ID;
         EmployeeID = parsedObject.EmployeeID;
         if (parsedObject.Roles_ID == 2) {
             $("#descbtn").hide();
             $("#addbtn").hide();
             $("#fansaveEdit").hide();
             $("#fanEnableEdit").hide();
             $(".Addmach__uploadaction").hide();
         }
     }



    function ChartDisplay(label, dataS) {
        const ctx = document.getElementById('lackingChart').getContext('2d');

        const backgroundColors = dataS.map(value => value < 0 ? '#ff4d4d' : '#1983e6');

        const data = {
            labels: label,
            datasets: [{
                label: 'Lacking Manpower',
                data: dataS,
                backgroundColor: backgroundColors,
                borderRadius: 5
            }]
        }


        const config = {
            type: 'bar',
            data: data,
            options: {
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                            display: false,
                            text: '',
                            font: {
                                family: 'Poppins'  // 👈 Set font family for axis title
                            }
                        },
                        ticks: {
                            font: {
                                family: 'Poppins'
                            }
                        }
                    },
                    y: {
                        ticks: {
                            font: {
                                family: 'Poppins'
                            }
                        }
                    }
                },
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        labels: {
                            font: {
                                family: 'Poppins'
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return `${context.parsed.y}`;
                            }
                        },
                        titleFont: {
                            family: 'Poppins'
                        },
                        bodyFont: {
                            family: 'Poppins'
                        }
                    }
                }
            }
        };


        const lackingChart = new Chart(ctx, config);

    }
    function DoughnutDisplay(label, total) {
        const ctx = document.getElementById('manpowerChart').getContext('2d');

        const data = {
            labels: ['SPD', 'Sub/Con'],
            datasets: [{
                data: total,
                backgroundColor: ['#10171e', '#0859a6'],
                hoverOffset: 10
            }]
        };

        const config = {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                cutout: '70%',
                plugins: {
                    title: {
                        display: true,
                        text: 'Total Manpower Distribution',
                        align: 'center',
                        font: {
                            size: 14,
                            family: 'Poppins'
                        },
                        padding: {
                            top: 10,
                            bottom: 20
                        }
                    },
                    legend: {
                        position: 'bottom',
                        labels: {
                            font: {
                                family: 'Poppins',
                                size: 14
                            },
                            generateLabels: function (chart) {
                                const data = chart.data;
                                const dataset = data.datasets[0];
                                return data.labels.map((label, i) => {
                                    return {
                                        text: `${label}: ${dataset.data[i]}`,
                                        fillStyle: dataset.backgroundColor[i],
                                        strokeStyle: dataset.backgroundColor[i],
                                        index: i
                                    };
                                });
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const label = context.label || '';
                                const value = context.parsed || 0;
                                return `${label}: ${value}`;
                            }
                        },
                        titleFont: {
                            family: 'Poppins'
                        },
                        bodyFont: {
                            family: 'Poppins'
                        }
                    }
                }
            }
        };

        new Chart(ctx, config);
    }




     function displaytheTotalBySection(array) {
         const summedData = array.reduce((acc, item) => {
             // Compute the total count of every section
             if (!acc[item.Section_ID]) {
                 acc[item.Section_ID] = {
                     Section_ID: item.Section_ID,
                     Section_name: item.Section_name,
                     SDP: item.SDP,
                     SubCon: item.SubCon,
                     Manbreak: item.SDP + item.SubCon
                 };
             } else {
                 acc[item.Section_ID].SDP += item.SDP;
                 acc[item.Section_ID].SubCon += item.SubCon;
                 acc[item.Section_ID].Manbreak += item.SDP + item.SubCon;
             }
             return acc;
         }, {});

         const resultArray = Object.values(summedData);
         var SetData = $("#DisplaysectionID");
         SetData.empty();
         $.each(resultArray, function (index, rowData) {
             var getdata = "<div class='Production__section " + index + "'> " +
                 "<span>" + rowData.Section_name + "</span>" +
                 "<p>" + rowData.Manbreak + "</p>" +
                 "</div>";
             SetData.append(getdata);
         });
     }
     function displaytableData(array) {
         var SetData = $("#ManpowerID");
         let buttons = '';


         SetData.empty();
         $.each(array, function (index, rowData) {
             if (ActionRestrict() !== false) {
                 $("#headertable").show();
                 buttons = "<td><div class='table__action'> " +
                     "<button type='button' class= 'row_" + index + " editButton' id='editButton_" + rowData.Manpower_ID + "'><i class='fa-regular fa-pen-to-square action_btn'></i> </button>" +
                     "</div></td>";
             } else {
                 $("#headertable").hide();

             }


             var getdata = "<tr class= 'row_" + index + "'>" +
                 "<td style='text-align: left; padding-left: 2em;'> " + rowData.Process + "</td>" +
                 "<td>" + rowData.SDP + "</td>" +
                 "<td>" + rowData.SubCon + "</td>" +
                 "<td>" + rowData.Remarks + "</td>" +
                 buttons +
                 "</tr>";
             SetData.append(getdata);
         });
     }

     editmanpower.addEventListener('submit', async (e) => {
         e.preventDefault();
         var formData = new FormData(e.target);
         let res = await postData('@Url.Action("EditManpower", "PMACS")', formData);
         if (res.StatusCode === 200) {
             $("#exampleModal").modal("hide");
             Swal.fire({
                 title: "Success",
                 text: res.Message,
                 icon: "success",
                 showConfirmButton: false,
                 timer: 1000
             }).then(() => {
                 InitializationData();
             });
         }

     });
     editrequired.addEventListener('submit', async(e) => {
         e.preventDefault();
         var formData = new FormData(e.target);
         let res = await postData('@Url.Action("EditRequiredManpower", "PMACS")', formData);
         //const data = Object.fromEntries(formData);

         if (res.StatusCode === 200) {
             $("#requiredmodal").modal("hide");
             InitializationData();
         }
     });

     $(document).on('click', '.editButton', function () {
         var SetData = $('#EditPisa');
         var buttonId = $(this).attr('id');
         var rowIndex = buttonId.split('_')[1];
         let data = searchByID(loadData, "Manpower_ID", rowIndex);

         $("#exampleModalLabel").text(data.Process);

         SetData.empty();
         var rows = "<label style='font-weight: 600; color: #222; margin-bottom: .5em;'>SDP :</label> <br />"
                 + "<input type='hidden' value='" + data.Manpower_ID + "' name='Manpower_ID' class='form-control' id='SumID' />"
                 + "<input type='text' value='" + data.SDP + "' name='SDP'   id='SDP' autocomplete='off' onkeypress='return restrictChars(event)' maxlength='5' /><br />"
                 + "<label style='font-weight: 600; color: #222; margin-bottom: .5em;'>SubCon :</label> <br />"
                 + "<input type='text' value='" + data.SubCon + "' name='Sub/Con'   id='SubCon' autocomplete='off'  maxlength='5' onkeypress='return restrictChars(event)' /><br />"
                 + "<label style='font-weight: 600; color: #222; margin-bottom: .5em; '>Remarks :</label> <br />"
                 + "<input type='text' value='" + data.Remarks + "' name='Remarks'   id='Remarks' autocomplete='off' />"
                 + "<div class='footer d-flex justify-content-end pt-4 pb-2 gap-2'>"
                 + "<button type='submit'  id='saveEditsum'><i class='fa-regular fa-floppy-disk'></i>  Save</button>"
             + "</div>";

         SetData.append(rows);
         $("#exampleModal").modal("show");

     });
     $(document).on('click', '.editTotalman', function () {
         var buttonId = $(this).attr('id');
         var rowIndex = buttonId.split('_')[1];
         let data = searchByID(totalarrayload, "Section_ID", rowIndex);
         $("#sectionID").val(rowIndex);
         $("#modelsec").text(data.Section_name);
         $("#requiredQty").val(data.Required);
         $("#requiredmodal").modal("show");
     });

     function searchByID(array, key, value) {
         var founditem = null;
         array.forEach(function (item) {
             if (item[key] === parseInt(value)) {
                 founditem = item;
             }
         });
         return founditem;
     }

    const getLogsUpdated = async () => {
        let res = await fetchData('@Url.Action("GetUpdateLogs", "PMACS")', { Module: 1 });
        if (res && res.Success) {
            $("#Updatelog").text("Last Updated : " + res.Data[0].LastUpdated);
        }
    }


     

        // ########################################  TABS CONTROLS ########################################## //

        let tabs2 = document.querySelector(".Mantabs");
        let tabheader = tabs2.querySelector(".Mantabs__header");
        let tabBody = tabs2.querySelector(".Mantabs__body");
        let tabIndicator = tabs2.querySelector(".Mantabs__indicator");
        let tabHeadernodes = tabs2.querySelectorAll(".Mantabs__header > div");
        let tabBodynodes = tabs2.querySelectorAll(".Mantabs__body > div");

        for (let i = 0; i < tabHeadernodes.length; i++) {
            tabHeadernodes[i].addEventListener("click", function () {
                tabheader.querySelector(".active").classList.remove("active");
                tabHeadernodes[i].classList.add("active");
                tabBody.querySelector(".active").classList.remove("active");
                tabBodynodes[i].classList.add("active");

                
            });
        }



      // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
     const LoadPageData = async() => {
         try {
             if (ActionRestrict() === false) {
                 $("#headertable").hide();
             }

             $("#currentdatetime").text(Month + "  " + currentYear)

             const [logs, manpower, total] = await Promise.all([
                 getLogsUpdated(),
                 GetManpowerData(),
                 Totalmanpower()
             ]);
         
         } catch (error) {
             console.error("Failed to load page data:", error);
         } finally {
             // Hide loading spinner whether success or failure
             //$("#loadingSpinner").hide();
         }
     }

     $(document).ready(() => {
         LoadPageData();
     });
</script>
