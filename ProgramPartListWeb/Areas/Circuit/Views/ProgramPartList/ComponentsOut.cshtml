
@{
    ViewBag.Title = "ComponentsOut";
    Layout = "~/Areas/Circuit/Views/Shared/_LayoutPartlist.cshtml";
}

<section class="Serieswrapper">
    <div class="SeriesTitle d-flex align-items-center justify-content-between mb-3">
        <h5 class="m-0">Components Partlist Out</h5>
    </div>

    <div class="d-flex align-items-center justify-content-between mb-3">
        <div class="SearchInputbox">
            <input type="text" name="searchID" id="searchID" placeholder="Search something " />
            <i class="fa-solid fa-magnifying-glass"></i>
        </div>

        <div class="SeriesAction">
            <button id="Excelbtn" class="primarybtn"><i class="fa-solid fa-upload"></i>  Upload Components Out</button>
        </div>
    </div>


    <div class="MainTable">
        <table>
            <thead>
                <tr>
                    <th>Component Name</th>
                    <th>Quantity</th>
                    <th>Parts Code</th>
                    <th>Ambassador</th>
                    <th>Reel ID</th>
                </tr>
            </thead>
            <tbody id="ComponentsData">
            </tbody>
        </table>

        <div class="tableseriesNoData">
            <p>No Data Found</p>
        </div>
    </div>
</section>



<!--########################## UPLOAD DATA #############################-->
<div class="modal fade modal-lg " id="uploadmodal" data-keyboard="false" data-backdrop="static" tabindex="-1" role="dialog"
     data-bs-backdrop="static"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="custom_modal_header">
                    <div class="custom_modal__icon">
                        <div class="custom_icon_container">
                            <i class="fa-solid fa-file-import"></i>
                        </div>
                        <div class="custom_modal_title">
                            <span>Update Components Out Data</span>
                            <p id="procname">Upload Excel File Only</p>
                        </div>
                    </div>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>


                <div class="custom_modal_body">
                    <form method="post" enctype="multipart/form-data" id="ImportExcel">
                        <div class="upload-container" id="upload-container">
                            <p>Drag and drop an Excel file here</p>
                            <input type="file" id="file-input" name="file-input" accept=".xlsx, .xls, .csv" hidden>
                        </div>
                        <progress id="progress-bar" value="0" max="100" style="width: 100%; display: none;"></progress>
                    </form>
                </div>
            </div>

        </div>
    </div>
</div>



<script src="~/Scripts/Utilities.js"></script>
<script src="~/Scripts/sweetalert2.min.js"></script>
<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
    const searchinput = document.getElementById("searchID");
    const excelbtn = document.getElementById("Excelbtn");

    excelbtn.addEventListener('click', function (e) {
        e.preventDefault();
        $("#uploadmodal").modal("show");
    });
    // Search while typing filter data
    searchinput.addEventListener('input', function () {
        const input = this.value.toLowerCase();
        const tableRows = document.querySelectorAll('#ComponentsData tr');
        let foundMatch = false;

        tableRows.forEach(row => {
            const seriesNoCell = row.cells[0].textContent.toLowerCase();

            // If input is empty, show all rows
            if (!input || seriesNoCell.includes(input)) {
                row.classList.remove('hidden'); // Show matching rows
                foundMatch = true;
            } else {
                row.classList.add('hidden'); // Hide non-matching rows
            }
        });

        // Show or hide the "Nodata" element based on matches
        if (foundMatch) {
            $(".Nodata").addClass('hidden'); // Hide the "No data" message
        } else {
            $(".Nodata").removeClass('hidden'); // Show the "No data" message
        }
    });

    const DisplayComponentsOut = async() => {
        let res = await FetchAuthenticate('@Url.Action("GetComponentOutList", "ProgramPartList")', {});

        if (res && res.Success) {
            var setData = $("#ComponentsData");
            setData.empty();
            $.each(res.Data, function (index, rowData) {
                var getdata = `
                     <tr class='row_${index} rowClick' >
                     <td data-cell="Series no">${rowData.ComponentsName}</td>
                     <td data-cell="Machine">${rowData.Quantity}</td>
                     <td data-cell="Time Target">${rowData.ItemCode}</td>
                       <td data-cell="Time Target">${rowData.Ambassador}</td>
                         <td data-cell="Time Target">${rowData.Reel_ID}</td>
                     </tr>`;

                setData.append(getdata);
            });
            $(".tableseriesNoData").hide();
        } else {
            $(".tableseriesNoData").show();
        }
    }



    //-------------------  UPLOAD EXCEL FILE ------------------------------
    document.addEventListener('DOMContentLoaded', () => {
        const uploadContainer = document.getElementById('upload-container');
        const fileInput = document.getElementById('file-input');

        uploadContainer.addEventListener('click', () => fileInput.click());

        uploadContainer.addEventListener('dragover', (event) => {
            event.preventDefault();
            uploadContainer.classList.add('dragover');
        });

        uploadContainer.addEventListener('dragleave', () => {
            uploadContainer.classList.remove('dragover');
        });

        uploadContainer.addEventListener('drop', (event) => {
            event.preventDefault();
            uploadContainer.classList.remove('dragover');
            handleFiles(event.dataTransfer.files);
        });

        fileInput.addEventListener('change', (event) => {
            handleFiles(event.target.files);
        });

        function handleFiles(files) {
            if (files.length === 0) return;
            const file = files[0];
            if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls') && !file.name.endsWith('.csv')) {
                alert('Please upload a valid Excel file.');
                return;
            }
            const formData = new FormData();
            formData.append('excelfile', file);

            const data = Object.fromEntries(formData);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '@Url.Action("UploadComponentsOut", "ProgramPartList")', true);

            xhr.upload.addEventListener('progress', function (e) {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    const progressBar = document.getElementById('progress-bar');
                    progressBar.style.display = 'block';
                    progressBar.value = percentComplete;
                }
            });

            xhr.addEventListener('load', function () {

                if (xhr.status === 200) {
                    const res = JSON.parse(xhr.responseText);
                    console.log(res);
                    if (res.StatusCode === 200) {
                        Swal.fire({
                            title: "Success",
                            text: "UPLOAD COMPLETE",
                            icon: "success",
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            DisplayComponentsOut();
                        });
                    } else {
                        Swal.fire({
                            title: "Invalid Upload File",
                            text: res.Message,
                            icon: "error",
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {

                        });
                    }


                } else {
                    console.log('Upload failed!');
                }
            });

            xhr.addEventListener('error', function () {
                alert('An error occurred while uploading the file.');
            });


            xhr.send(formData);


        }

    });

    DisplayComponentsOut();

</script>