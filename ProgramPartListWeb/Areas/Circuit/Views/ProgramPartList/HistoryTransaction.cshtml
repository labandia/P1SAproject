@{
    ViewBag.Title = "HistoryTransaction";
    Layout = "~/Areas/Circuit/Views/Shared/_LayoutPartlist.cshtml";
}

<header class="MainHeader">
    <h4>History Transaction</h4>
    <div class="header__action flex_align">
        <button id="exportbtn" class="primarybtn">Download csv</button>
        <div class="searchinputContainer">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input type="text" placeholder="Search Plan Schedule... " id="searchbox" />
            <div class="line"></div>
        </div>
    </div>
</header>

<div class="MainTable">
    <table>
        <thead>
            <tr>
                <th>Plan Schedule</th>
                <th>ProductName </th>
                <th>Ambassador</th>
                <th>ItemCode</th>
                <th>Need Qty</th>
                <th>IN</th>
                <th>OUT</th>
                <th>Return Qty</th>
                <th>Diff %</th>
            </tr>
        </thead>
        <tbody id="HistorylistData">
        </tbody>
    </table>

    <div class="tableseriesNoData">
        <p>No Data Found</p>
    </div>
</div>

<div class="MasterlistWrap_footer">
    <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

    <div id="PaginationContainer" class="paginationPartlocal"></div>
</div>

<script src="~/Scripts/Utilities.js"></script>
<script src="~/Scripts/html5-qrcode.min.js"></script>
<script src="~/Scripts/sweetalert2.min.js"></script>
<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script type="text/javascript">

    const excelExport = document.getElementById("exportbtn");

    //=====================    FETCH FUNCTION DATABASE ===================================
    const SummaryComponentsdetails = async () => {
        let res = await FetchAuthenticate('@Url.Action("GetHistoryTransactionList", "ProgramPartList")', {});
        if (res && res.Success) {
            TablePagination(res.Data, 'HistorylistData', 'PaginationContainer', 20, 5);
            $(".tableseriesNoData").hide();
        } else {
            $(".tableseriesNoData").show();
        }
    }
    //==========================================================================



    //=====================   DISPLAY THE DATAS ===================================
    function TablePagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);

            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];
                var diffColor = rowData.Diff < 0 ? 'color:red;' : '';

                const rowHtml = `<tr class='row_${i} rowClick' >
                        <td data-cell="Series no">${rowData.Series_no}</td>
                        <td data-cell="ProductName">${rowData.ProductName}</td>
                        <td data-cell="AbassadorPartnum">${rowData.AbassadorPartnum}</td>
                        <td data-cell="ItemCode">${rowData.ItemCode}</td>
                        <td data-cell="NeedQuan">${rowData.NeedQuan}</td>
                        <td data-cell="CompIN">${rowData.CompIN}</td>
                        <td data-cell="CompOut">${rowData.CompOut}</td>
                        <td data-cell="Totalprod">${rowData.Totalprod}</td>
                         <td data-cell="Time Target"><span style="${diffColor}">${rowData.Diff}</span></td>
                    </tr>`;

                tableBody.innerHTML += rowHtml;
            }

            $("#pagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                                          <i class="fa-solid fa-backward"></i>
                                     </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                                          <i class="fa-solid fa-forward"></i>
                                     </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // 🔍 Search functionality
        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase();

            filteredData = dataArray.filter(item =>
                (item.AbassadorPartnum != null && item.AbassadorPartnum.toLowerCase().includes(query)) ||
                (item.Series_no.toLowerCase().includes(query))
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };


        const exportData = () => {
            const exportData = filteredData.map(row => ({
                Series_no: row.Series_no,
                ProductName: row.ProductName,
                AbassadorPartnum: row.AbassadorPartnum,
                ItemCode: row.ItemCode,
                NeedQuan: row.NeedQuan,
                CompIN: row.CompIN,
                CompOut: row.CompOut,
                Totalprod: row.Totalprod,
                Diff: row.Diff
            }));

            console.log(exportData);


          $.ajax({
                url: '/Circuit/ProgramPartList/ExportToExcel',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(exportData), // Directly send array
                dataType: 'binary',
                xhrFields: {
                    responseType: 'blob'
                },
                success: function (data) {

                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                    alert('Failed to export data.');
                }
            });
        }

        // Add event listener for search input
        $('#searchbox').on('input', searchTable);

        // ✅ Bind Export Button
        $('#exportbtn').on('click', exportData);

        // Initialize table and pagination
        window.changePage = changePage;
        renderTable(currentPage);
        renderPagination();
    }
     //==========================================================================
    SummaryComponentsdetails();
</script>
