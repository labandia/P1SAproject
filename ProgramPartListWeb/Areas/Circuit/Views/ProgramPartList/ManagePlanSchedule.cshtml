
@{
    ViewBag.Title = "ManagePlanSchedule";
    Layout = "~/Areas/Circuit/Views/Shared/_LayoutPartlist.cshtml";
}

@*<form id="fileUploadForm">
        <input type="file" id="files" name="files" multiple />
        <button type="button" onclick="uploadFiles()">Upload</button>
    </form>

    <div id="uploadResult"></div>*@



<section class="Serieswrapper">
    <div class="SeriesTitle d-flex align-items-center justify-content-between mb-3">
        <h5 class="m-0">Components Partlist Data Management</h5>
    </div>


    <div class="SeriesFilter d-flex align-items-center justify-content-between mb-3">
        <div class="Searchbox d-flex align-items-center gap-2">
            <i class="fa-solid fa-magnifying-glass"></i>

            <input type="text"
                   placeholder="Search by Series No"
                   id="searchInput" />
        </div>

        <div class="d-flex align-items-center gap-3 SeriesTitle">
            <select id="filterselect">
                <option value="2">All</option>
                <option value="1">Online</option>
                <option value="0">Offline</option>
            </select>

            @if (Session["Role"]?.ToString() == "SuperAdmin")
            {
                <button id="Seriesaddmodal" class="primarybtn"><i class='bx bx-save'></i> Add Data</button>
            }
            else
            {
                <button id="Seriesaddmodal" class="btn btn-secondary" disabled><i class='bx bx-save'></i> Add Data</button>
            }

        </div>
    </div>


    <div class="Seriestablewrapper">
        <div class="MainTable">
            <table>
                <tr>
                    <th>Series no</th>
                    <th>Machine</th>
                    <th>Plan</th>
                    <th>Time Target</th>
                    <th>Total partlist</th>
                    @if (Session["Role"]?.ToString() == "SuperAdmin")
                    {
                        <th>Ongoing schedule</th>
                        <th>Details</th>
                        <th>Edit</th>
                    }

                </tr>

                <tbody id="dataSearching">
                  
                </tbody>

            </table>
        </div>

        <div style="margin-top: 1em;" class="Table_footer d-flex align-items-center justify-content-between pt-1 ">
            <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

            <div id="PaginationContainer" class="paginationPartlocal"></div>
        </div>

       

    </div>



   
    <div class="d-flex align-items-center gap-3">
        <div class="loadingdata">
            <div class="bar"></div>
        </div>

    </div>
</section>


<div class="modal fade modal-xl" id="addseriesmodal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <div class="custom_modal__icon">
                        <div class="custom_icon_container">
                            <i class="fa-solid fa-plus"></i>
                        </div>
                        <div class="custom_modal_title">
                            <span>Add new Series data</span>
                            <p>Fill all the required input</p>
                        </div>
                    </div>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="formcontainer" id="AddSeriesdata" autocomplete="off">

                    <div class="row">
                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Series No: </label>
                            <input placeholder="Enter Series no#" name="Series_add" required />
                            <div class="invalid-feedback">Please enter a valid Series No</div>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Line no.: </label>
                            <input type="text" placeholder="Enter line no." name="Line_add" id="Lineid" required />
                            <div class="invalid-line">Only numeric values are allowed.</div>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-2">
                            <label>Time target (hrs): </label>
                            <input type="text" placeholder="Enter Time Target" name="Time_add" id="Timeid" required />
                            <div class="invalid-Time">Please enter a valid Time Target ex :(1.0).</div>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Created By : </label>
                            <input placeholder="Enter name " name="Created_add" />
                        </div>


                        <div class="form_group col-12  col-sm-12 col-lg-6 col-xl-4 mb-3">

                            <label>Set Group : </label>
                            <input placeholder="Enter set group" name="Group_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Setup Navi : </label>
                            <input placeholder="Enter Setup Navi" name="Navi_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Visual Management : </label>
                            <input placeholder="Enter Visual Manage" name="Visual_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Status : </label>
                            <input placeholder="Enter Status" name="Status_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Machine serial no : </label>
                            <input placeholder="Enter Machine serial" name="Machine_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Model/Machine no : </label>
                            <input placeholder="Enter Model no." name="Model_add" />
                        </div>



                        <div class="form_group col-12 col-lg-12 col-lg-6 col-xl-4 mb-3">
                            <label>Remarks : </label>
                            <textarea placeholder="Enter Remarks" name="Remark_add"></textarea>
                        </div>


                    </div>



                    <div class="form_group col-12  mb-2">
                        <div class="d-flex justify-content-between">
                            <label>Upload Program partlist : </label>
                            <label style="color: var(--clr-neon-primary);">File attachments (ex. csv, xlsx, xls) </label>
                        </div>

                        <input type="file" id="excelFileupload" name="filetoupload" accept=".xlsx, .xls, .csv" multiple />
                    </div>




                    <div class="d-flex justify-content-end mt-4">
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<div class="modal fade modal-xl" id="Editseriesmodal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <div class="custom_modal__icon">
                        <div class="custom_icon_container">
                            <i class="fa-solid fa-plus"></i>
                        </div>
                        <div class="custom_modal_title">
                            <span>Edit Series data</span>

                        </div>
                    </div>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="formcontainer" id="EditSeriesdata" autocomplete="off">

                    <div class="row">
                        <input type="hidden" name="SeriesID" id="SeriesID" />
                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Series No: </label>
                            <input placeholder="Enter Series no#" name="Edit_Series_add" id="Edit_Series_add" required />
                            <div class="invalid-feedback">Please enter a valid Series No</div>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Line no.: </label>
                            <input type="text" placeholder="Enter line no." name="Edit_Line_add" id="Edit_Line_add" required />
                            <div class="invalid-line">Only numeric values are allowed.</div>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-2">
                            <label>Time target (hrs): </label>
                            <input type="text" placeholder="Enter Time Target" name="Edit_Time_add" id="Edit_Time_add" required />
                            <div class="invalid-Time">Please enter a valid Time Target ex :(1.0).</div>
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Created By : </label>
                            <input placeholder="Enter name " name="Edit_Created_add" id="Edit_Created_add" />
                        </div>


                        <div class="form_group col-12  col-sm-12 col-lg-6 col-xl-4 mb-3">

                            <label>Set Group : </label>
                            <input placeholder="Enter set group" name="Edit_Group_add" id="Edit_Group_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Setup Navi : </label>
                            <input placeholder="Enter Setup Navi" name="Edit_Navi_add" id="Edit_Navi_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Visual Management : </label>
                            <input placeholder="Enter Visual Manage" name="Edit_Visual_add" id="Edit_Visual_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Status : </label>
                            <input placeholder="Enter Status" name="Edit_Status_add" id="Edit_Status_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Machine serial no : </label>
                            <input placeholder="Enter Machine serial" name="Edit_Machine_add" id="Edit_Machine_add" />
                        </div>

                        <div class="form_group col-12 col-sm-12 col-lg-6 col-xl-4 mb-3">
                            <label>Model/Machine no : </label>
                            <input placeholder="Enter Model no." name="Edit_Model_add" id="Edit_Model_add" />
                        </div>

                        <div class="form_group col-12 col-lg-12 col-lg-6 col-xl-4 mb-3">
                            <label>Remarks : </label>
                            <textarea placeholder="Enter Remarks" name="Edit_Remark_add" id="Edit_Remark_add"></textarea>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mt-4">
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>







<script src="~/Scripts/Utilities.js"></script>
<script src="~/Scripts/sweetalert2.min.js"></script>
<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
    var userRole = '@Session["Role"]';
    let currentpage = 1;
    const rowsperpage = 8;
    let seriesData = [];
    // BUTTONS
    const seriesmodel = document.getElementById("Seriesaddmodal");

    // FORMS
    const addseriesform = document.getElementById("AddSeriesdata");
    const editseriresform = document.getElementById("EditSeriesdata");

    // INPUT TEXT
    const lineinputnumericonly = document.getElementById("Lineid");
    const timeinputnumericonly = document.getElementById("Timeid");
    const searchinput = document.getElementById("searchInput");

    // SELECTION
    const selectfilter = document.getElementById("filterselect");
    let SeriesTable = $("#dataSearching");

    const OngoinSeriesData = async () =>{
        $(".Nodata").hide();
        SeriesTable.empty();

        let res = await FetchAuthenticate('@Url.Action("GetSeriesDataList", "ProgramPartList")', {});
        if (res && res.Success) {
            seriesData = res.Data;
            TablePagination(seriesData, 'dataSearching', 'PaginationContainer', 100, 5);
        } else {
            $("#ErrorMessage").text(res.Message);
            var loadData = "<tr class='NoDataContainer'>  " +
                "<td colspan = '8' > " +
                " <div id='ErrorMessage'>" + res.Message +"</div>" +
                "</td>" +
                "</tr > ";
            SeriesTable.append(loadData);
        }
    }

    // Open the add model for the series
    seriesmodel.addEventListener('click', function () {
        $("#addseriesmodal").modal("show");
    });
    // Save Series data functionality
    addseriesform.addEventListener('submit', async (e) => {
        e.preventDefault();

        let formData = new FormData(e.target);
        let res = await postData('@Url.Action("Addnewseries", "ProgramPartList")', formData);
        
        if (res.StatusCode == 200) {
            Swal.fire({
                title: "Success",
                text: "UPLOAD COMPLETE",
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                OngoinSeriesData(2);
                $("#addseriesmodal").modal("hide");

                // Reset the form
                addseriesform.reset();

                // Clear file inputs manually
                let fileInputs = addseriesform.querySelectorAll('input[type="file"]');
                fileInputs.forEach(input => input.value = '');
            });

        } else {
            //alert('An error occurred while processing the request.');
            //console.error(textStatus, errorThrown);
            Swal.fire({
                icon: "error",
                text: res.Message,
                timer: 1500,
                showConfirmButton: false
            });
            OngoinSeriesData(2);
            $("#addseriesmodal").modal("hide");

            // Reset the form
            addseriesform.reset();

            // Clear file inputs manually
            let fileInputs = addseriesform.querySelectorAll('input[type="file"]');
            fileInputs.forEach(input => input.value = '');
        }

    });

    editseriresform.addEventListener('submit', async(e) => {
        e.preventDefault();
        let formData = new FormData(e.target);

        let res = await postData('@Url.Action("Editseries", "ProgramPartList")', formData);
        if (res.StatusCode == 200) {

        }

    });

    // Validation Input to numeric only
    lineinputnumericonly.addEventListener('input', function () {
        const inputvalue = $(this).val(); // Get current input value
        const $errorLabel = $('.invalid-line'); // Target error label
        // Check if the input contains non-numeric characters
        if (/[^0-9.]/.test(inputvalue) || (inputvalue.match(/\./g) || []).length > 1) {
            $errorLabel.show(); // Show error message
            $(this).val(inputvalue.replace(/\D/g, '')); // Remove non-numeric characters
        } else {
            $errorLabel.hide(); // Hide error message
        }
    });
    timeinputnumericonly.addEventListener('input', function () {
        const inputvalue = $(this).val(); // Get current input value
        const $errorLabel = $('.invalid-Time'); // Target error label
        // Check if the input contains non-numeric characters
        if (/[^0-9.]/.test(inputvalue) || (inputvalue.match(/\./g) || []).length > 1) {
            $errorLabel.show(); // Show error message
            $(this).val(inputvalue.replace(/\D/g, '')); // Remove non-numeric characters
        } else {
            $errorLabel.hide(); // Hide error message
        }
    });

    // Search while typing filter data
    searchinput.addEventListener('input', function () {
        const input = this.value.toLowerCase();
        const tableRows = document.querySelectorAll('#dataSearching tr');
        let foundMatch = false;

        tableRows.forEach(row => {
            const seriesNoCell = row.cells[0].textContent.toLowerCase();

            // If input is empty, show all rows
            if (!input || seriesNoCell.includes(input)) {
                row.classList.remove('hidden'); // Show matching rows
                foundMatch = true;
            } else {
                row.classList.add('hidden'); // Hide non-matching rows
            }
        });

        // Show or hide the "Nodata" element based on matches
        if (foundMatch) {
            $(".Nodata").addClass('hidden'); // Hide the "No data" message
        } else {
            $(".Nodata").removeClass('hidden'); // Show the "No data" message
        }
    });
    // Filter data by selecting online and offline
    selectfilter.addEventListener('change', function () {
        let set = parseInt(this.value);
        $("#dataSearching").empty();
        OngoinSeriesData();
    });

    // Display the page at the begginning
    $(document).ready(function () {
        OngoinSeriesData();
    });

    function encodeBase64(input) {
        return btoa(input); // Convert string to Base64
    }

    function uploadFiles() {
        var formData = new FormData();
        var files = document.getElementById('files').files;

        for (var i = 0; i < files.length; i++) {
            formData.append('files', files[i]);
        }

         // Log each file in the FormData object
         for (var pair of formData.entries()) {
             console.log(pair[0] + ": " + pair[1].name);  // Log the name of the file
         }
    }

    function TablePagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);

            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];

                // Determine radio button selection based on Ongoing value
                let isOnline = rowData.Ongoing === 1;
                let usercontrols = '';


                if (userRole == 'SuperAdmin') {
                    usercontrols = ` <td style='display: flex; align-item: center; justify-content: center;' data-cell="Ongoing schedule">
                                    <div class='radio-group'>
                                         <input type='radio' class='checkonline' id='online_${rowData.Series_ID}' name='option_${rowData.Series_ID}' ${isOnline ? "checked" : ""}>
                                         <label for='online_${rowData.Series_ID}'>
                                             <span>Online</span>
                                         </label>
                                         <input type='radio' class='checkoffline' id='offline_${rowData.Series_ID}' name='option_${rowData.Series_ID}' ${!isOnline ? "checked" : ""}>
                                         <label for='offline_${rowData.Series_ID}'>
                                             <span>Offline</span>
                                         </label>
                                     </div>
                                </td>
                                <td data-cell="Details">
                                    <button type='button' class='detailsbutton text-primary bg-white' id='detailsbutton_${rowData.Series_ID}' >
                                       <i class="fa-solid fa-circle-info"></i>
                                    </button>
                                </td>
                                <td data-cell="Details">
                                    <button type='button' class='Editbtnbutton text-primary bg-white' id='Editbtnbutton_${rowData.Series_ID}' >
                                      <i class="fa-regular fa-pen-to-square"></i>
                                    </button>
                                </td>`;
                } else {
                    usercontrols = '';
                }


                const rowHtml = `
                           <tr class='row_${i} rowClick' id='series_${rowData.Series_ID}'>
                           <td data-cell="Series no">${rowData.Series_no}</td>
                           <td data-cell="Machine">${rowData.MachineSerial}</td>
                           <td data-cell="Time Target">${rowData.SetGroup}</td>
                           <td data-cell="Wins">${rowData.Timetarget}</td>
                           <td data-cell="Total partlist">${rowData.TotalCount}</td>
                           ${usercontrols}
                           </tr>
                       `;

                tableBody.innerHTML += rowHtml;
            }

            $("#pagecountID").text(currentPage);


            $(document).on('change', '.radio-group input[type="radio"]', async function () {
                       const selectedValue = $(this).attr('id').includes('online') ? 1 : 0;
                       const seriesId = $(this).closest('tr').attr('id').split('_')[1];
                       const row = $(this).closest('tr'); // Get the parent row

                       var formData = new FormData();
                       formData.append("SeriesID", selectedValue);
                       formData.append("Selected", seriesId);
                       const data = Object.fromEntries(formData);
                       let res = await postData('@Url.Action("SetActiveSeries", "ProgramPartList")', formData);
            });


            $(document).on('click', '.detailsbutton', function (e) {
                  e.stopPropagation(); // Prevent triggering the row click event
                   var rowId = $(this).attr('id');
                   var rowIndex = rowId.split('_')[1];
                   var encodedSeries = encodeBase64(rowIndex);

                   window.location.href = "/Circuit/ProgramPartList/PlanDetails?series=" + encodedSeries;
            });

            $(document).on('click', '.Editbtnbutton', function (e) {
                e.stopPropagation(); // Prevent triggering the row click event
                var rowId = $(this).attr('id');
                var rowIndex = rowId.split('_')[1];

                const result = seriesData.find(p => p.Series_ID == rowIndex);


                $("#SeriesID").val(result.Series_ID);
                $("#Edit_Created_add").val(result.CreatedBy);
                $("#Edit_Group_add").val(result.SetGroup);
                $("#Edit_Line_add").val(result.Line);
                $("#Edit_Machine_add").val(result.MachineSerial);
                $("#Edit_Model_add").val(result.Modelno);
                $("#Edit_Navi_add").val(result.SetupNavi);
                $("#Edit_Remark_add").val(result.Remarks);
                $("#Edit_Series_add").val(result.Series_no);
                $("#Edit_Status_add").val(result.Status);
                $("#Edit_Time_add").val(result.Timetarget);
                $("#Edit_Visual_add").val(result.VisualManage);


                $("#Editseriesmodal").modal("show");
            });




        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                                        <i class="fa-solid fa-backward"></i>
                                    </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                                        <i class="fa-solid fa-forward"></i>
                                    </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };


        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase();

            filteredData = dataArray.filter(item =>
                (item.AbassadorPartnum != null && item.AbassadorPartnum.toLowerCase().includes(query)) ||
                (item.Partname != null && item.Partname.toLowerCase().includes(query))
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };


        // Initialize table and pagination
        window.changePage = changePage;
        renderTable(currentPage);
        renderPagination();
    }



    function loadingScreen() {
        SeriesTable.empty();
        var loadData = "<tr class='NoDataContainer'>  " +
            "<td colspan = '8' > " +
            "<div class='loader2' id='loadingSpinner'></div> " +
            "</td>" +
            "</tr > ";
        SeriesTable.append(loadData);
    }
</script>

