
@{
    ViewBag.Title = "PlanSchedule";
    Layout = "~/Areas/Circuit/Views/Shared/_LayoutPartlist.cshtml";
}


<header class="InspectHead flex_space">
    <h4 >Plan Schedule</h4>
    <div class="searchinputContainer">
        <i class="fa-solid fa-magnifying-glass"></i>
        <input type="text" placeholder="Search here ... " id="searchbox" autocomplete="off" />
        <div class="line"></div>
    </div>
</header>

<div class="MainTable">
    <table>
        <thead>
            <tr>
                <th>Plan Schedule</th>
                <th>Serial No# </th>
                <th>Machine No.</th>
                <th>Line</th>
                <th>Set Group</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="PlanScheduleData">
        </tbody>
    </table>


</div>



<div class="MasterlistWrap_footer">
    <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

    <div id="PaginationContainer" class="paginationPartlocal"></div>
</div>







<script type="text/javascript">
    let TableDisplay = $("#PlanScheduleData");


    const PlanScheduleData = async () => {
        loadingDisplay();

        Loadingsteps(async () => {
            let res = await fetchData('@Url.Action("GetScheduleSeries", "ProgramPartList")', {});
            if (res && res.Success) {
                let hasValidData = false;
                plandata = res.Data;
                console.log(plandata);
                TablePagination(plandata, 'PlanScheduleData', 'PaginationContainer', 20, 5);
            } else {
                const loadData = `<tr>
                                    <td colspan='6'>
                                        🔍 ${res.Message}
                                    </td>
                                </tr>`;

                TableDisplay.empty();
                TableDisplay.append(loadData);
            }
        });

    };



    //=====================   DISPLAY THE DATAS ===================================
    function TablePagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);

            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];

                const rowHtml = `<tr class='row_${rowData.Series_ID} rowClick' id='rowClick_${rowData.Series_ID}' >
                    <td data-cell="Series no" style='font-weight: 600;'>${rowData.Series_no}</td>
                    <td data-cell="MachineSerial">${rowData.MachineSerial}</td>
                    <td data-cell="AbassadorPartnum">${rowData.Modelno}</td>
                    <td data-cell="ItemCode">${rowData.Line}</td>
                    <td data-cell="NeedQuan">${rowData.SetGroup}</td>
                    <td data-cell="CompIN">
                         <span class='${rowData.Planstatus === 1 ? "Complete" : "Incomplete"}'>
                             ${rowData.Planstatus === 1 ? "Completed" : "Pending"}
                         </span>
                    </td>
                </tr>`;

                tableBody.innerHTML += rowHtml;
            }

            $("#pagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                                      <i class="fa-solid fa-backward"></i>
                                 </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                                      <i class="fa-solid fa-forward"></i>
                                 </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // Handle click event for edit button
        $(document).on('click', '.rowClick', function (e) {
            e.stopPropagation();
            var buttonId = $(this).attr('id');
            var rowIndex = buttonId.split('_')[1];
            var encodedSeries = encodeBase64(rowIndex);
            window.location.href = "/Circuit/ProgramPartList/PlanScheduleDetails?series=" + encodedSeries;
        });


        // 🔍 Search functionality
        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase() || '';

            filteredData = dataArray.filter(item =>
                (item.Series_no.toLowerCase().includes(query))
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        $('#searchbox').on('input', searchTable);

        // Initialize table and pagination
        window.changePage = changePage;
        renderTable(currentPage);
        renderPagination();
    }
    //==========================================================================
    function loadingDisplay() {
        TableDisplay.empty();
        const loadData = `<tr>
                         <td colspan='6'>
                             <div class='Loadercontainer2'>
                                 <span class="loader2"></span>
                                 <p id="loadingStepText">Fetching data from the database..</p>
                             </div>
                         </td>
                     </tr>`;
        TableDisplay.append(loadData);
    }

    function Loadingsteps(callback) {
        const steps = [
            "Fetching data from the database...",
            "Processing data...",
            "Finalizing table view..."
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            if (stepIndex < steps.length) {
                const stepText = document.getElementById("loadingStepText");
                if (stepText) stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }

    function encodeBase64(input) {
        return btoa(input); // Convert string to Base64
    }

    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            //if (ActionRestrict() === false) {
            //    $('#Showadd').prop('disabled', true);
            //    $("#hiddenColumn").hide();
            //}

            const [plan] = await Promise.all([
                PlanScheduleData()
            ]);
        } catch (error) {
            console.error("Failed to load page data:", error);
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>