
@{
    ViewBag.Title = "Chambers";
    Layout = "~/Areas/Hydroponics/Views/Shared/HydroPartsLayout.cshtml";
}


<section class="InspectHead flex_space">
    <div class="flex_align">
        <div class="Pricedisplay">
            <small style=" font-weight: 500;">Total PHP Cost:  </small><span id="TotalPH"></span> -
            <small style="font-weight: 500;">Total USD Cost:  </small><span id="TotalUSD"></span>
        </div>
        <div class="Inputcontainer" style="display: none;">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input type="text" placeholder="Search here ... " id="searchbox" autocomplete="off" />
            <div class="line"></div>
        </div>
    </div>

    <div class="flex_align">
        <div class="select-container">
            <select id="chamberselect">
            </select>
        </div>
        <button style="display: none;" id="Showadd" class="primarybtn" type="button"><i class="fa-solid fa-user-secret"></i> Add parts</button>
    </div>
</section>

<hr />
<strong>Material used :</strong>

<div class="InspecTable">
    <table>
        <thead>
            <tr>
                <th style="width: 10%;"> <span style="margin-left: .5em;">Image</span>  </th>
                <th style="width: 20%; text-align: left; padding-left: 1.5em;"><i class="fa-solid fa-user-secret"></i>  <span style="margin-left: .5em;">Part No. / Partname</span> </th>
                <th><i class="fa-regular fa-comment-dots"></i> <span style="margin-left: .5em;">Supplier</span>  </th>
                <th><i class="fa-regular fa-comment-dots"></i> <span style="margin-left: .5em;">Require Qty</span>  </th>
                <th> <span style="margin-left: .5em;">Unit Cost</span>  </th>
                <th> <span style="margin-left: .5em;">Total Cost</span>  </th>
            </tr>
        </thead>
        <tbody id="ChamberlistData">
        </tbody>
    </table>
</div>

<div class="MasterlistWrap_footer ">
    <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

    <div id="MastertableContainer" class="paginationPartlocal flex_align"></div>
</div>



@*=================================================================================*@
@*=========================== ADD PARTS CHAMBER ===================================*@
@*=================================================================================*@
<div class="modal fade modal-l" id="AddChamberModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Add Chamber Parts</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="addformcontainer" id="addnewform" autocomplete="off">
                    <div class="row">
                        @*<div class="form_group col-12 col-sm-12 col-lg-6 mb-2">
                                <label>Employee ID </label> <br />
                                <input type="text" placeholder="type Employee ID" name="Employee_ID" id="Employee_ID" required />
                                <small class="text-danger" id="Noemployee"></small>
                            </div>*@
                        <div class="form_group col-12 col-sm-12 col-lg-12 mb-2">
                            <label>Part no.  <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                            @*<input type="text" placeholder="N/A" name="Fullname" id="Fullname" />*@
                            <div class="search-box">
                                <input type="hidden" name="Employee_ID" id="Employee_ID">
                                <input type="text" placeholder="Type Name or ID no." name="EmployeeSearch" id="EmployeeSearch" required>
                                @*<div class="namesdisplay"></div>*@
                            </div>
                        </div>
                    </div>
                    <div class="form_group col-12 col-sm-12">
                        <label>Part Name.  <small style="color: #a81818; font-weight: 600;">*</small></label>
                        <input type="text" placeholder="type Ojt registration No." name="OJTRegistration" id="OJTRegistration" required />
                    </div>

                    <div class="form_group col-12 col-sm-12 ">
                        <label>Category <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <div class="select-container">
                            <select id="addCategory">
                                <option value="0">-- select Category --</option>
                            </select>
                        </div>
                    </div>

                    <div class="form_group col-12 col-sm-12 ">
                        <label>Supplier <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <input type="text" placeholder="type Ojt registration No." name="OJTRegistration" id="OJTRegistration" required />
                    </div>

                    <div class="form_group col-12 col-sm-12 ">
                        <label>Need Quantity <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <input type="text" placeholder="type Ojt registration No." name="OJTRegistration" id="OJTRegistration" required />
                    </div>
                    <div class="form_group col-12 col-sm-12 ">
                        <label>Unit (ex. pcs, ml) <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <input type="text" placeholder="type Ojt registration No." name="OJTRegistration" id="OJTRegistration" required />
                    </div>
                    <div class="form_group col-12 col-sm-12 ">
                        <label>PHP Cost <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <input type="text" placeholder="type Ojt registration No." name="OJTRegistration" id="OJTRegistration" required />
                    </div>

                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div>
                            <small>All fields marked with (<small style="color: #a81818; font-weight: 600;">*</small>) must be filled out</small>
                        </div>
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>




<script type="text/javascript">
    let chamberlist = [];
    let loadData = [];
    let partsID;
    let userRole;

    let totalUSD = 0.0;


    // Modals
    const addmodal = document.getElementById("Showadd");

    // Forms
    const addQuanforms = document.getElementById("AddQuantityform");

    let TableDisplay = $("#ChamberlistData");
    const resultBox = document.querySelector(".namesdisplay");

    const GetTotalChamberPrice = async (ID) => {
      let res = await FetchAuthenticate('@Url.Action("GetTotalPriceChamber", "Hydro")', { chamber: ID });
      if (res && res.Success) {
          $("#TotalPH").text("$ " + res.Data.PHPTotal.toLocaleString('en-US'));
          $("#TotalUSD").text("₱ " +res.Data.USDTotal.toLocaleString('en-US'));
      }
    };

    const ChamberTable = async (ID) => {
        loadingDisplay();

        Loadingsteps(async () => {
            let res = await FetchAuthenticate('@Url.Action("GetAllChamberList", "Hydro")', { chamber: ID });
            if (res && res.Success) {
                chamberlist = res.Data;
                TableDisplay.empty(); // Removing the Loading Display

                ChamberPagination(chamberlist, 'ChamberlistData', 'MastertableContainer', 50, 5);
            } else {
                const loadData = `<tr>
                  <td colspan='9'>
                      🔍 ${res.Message}
                  </td>
              </tr>`;

                TableDisplay.empty();
                TableDisplay.append(loadData);

            }
        });
    }

    const GetChamberDatalist = async () => {
         let res = await FetchAuthenticate('@Url.Action("GetChamberDropDownList", "Hydro")', {});
          if (res && res.Success) {
              $.each(res.Data, function (index, row) {
                  $("#chamberselect").append("<option value='" + row.ChamberID + "'>" + row.ChamberName + "</option>");
              });
          }
     };


    const ActionRestrict = () => {
        userRole = localStorage.getItem("UserRole");
        if (userRole === "Leader" || userRole === "Users") {
            return false;
        }
    }

    function ChamberPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray];

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);
            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);
            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];
                const color = rowData.Color;


                // Compute by USD dollar
                let computeUSD = parseFloat(rowData.UnitCost_PHP) / 58;
                var roundedNum = parseFloat(computeUSD.toFixed(2));

                let totalUSDCost = roundedNum * rowData.QuantityPerChamber;

                // Image Display
                let imagePath = rowData.ImageParts
                      ? `/Hydro/DisplaytheImage?filename=${encodeURIComponent(rowData.ImageParts)}`
                      : '@Url.Content("~/Content/Images/no-image.png")';


                const rowHtml = `
                        <tr class='rowClick' id='editButton_${rowData.PartID}'>
                           <td data-cell="Images" style='display: flex; justify-content: center; align-items: center; border-top: 1px solid #dcdce2; border-bottom: none;'>
                                   <img class="NoImages" src="${imagePath}"
                                             loading="lazy"
                                             onerror="this.src='@Url.Content("~/Content/Images/no-image.png")'" />
                            </td>
                            <td style='text-align: left; padding-left: 1em;' data-cell="PartNo">
                                <p style='color: #195e8b; font-weight: 600;'>${rowData.PartName ? rowData.PartName : "-"}</p>
                                <small> ${rowData.PartNo}</small>
                            </td>
                            <td data-cell="Supplier">${rowData.Supplier ? rowData.Supplier : "-"}</td>
                            <td data-cell="Supplier" style='font-weight: 600;'>${rowData.RequireQty ? rowData.RequireQty : "-"}</td>
                            <td data-cell="UnitUSD" style='text-align: left;'>
                                <p>Dollar ($): <strong> ${roundedNum}</strong>  </p>
                                <p>Pesos (₱): <strong> ${rowData.UnitCost_PHP}</strong>  </p>
                             </td>
                            <td data-cell="UnitUSD" style='text-align: left;'>
                                <p>Dollar ($): <strong> ${totalUSDCost.toFixed(2) }</strong>  </p>
                                <p>Pesos (₱):  <strong> ${rowData.TotalPHPCost}</strong>  </p>
                              </td>
                        </tr>
                    `;
                tableBody.innerHTML += rowHtml;
            }


            $('.dropdown-menu').removeClass('show').hide();
            $("#pagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                <i class="fa-solid fa-backward"></i>
            </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                <i class="fa-solid fa-forward"></i>
            </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };





        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase() || '';
            filteredData = dataArray.filter(item =>
                item.PartName.toLowerCase().includes(query) || item.PartNo.toLowerCase().includes(query)
            );
            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        $('#searchbox').on('input', searchTable);

        window.changePage = changePage;
        renderTable(currentPage);
        renderPagination();
    }


    $("#searchPartno").keyup(function () {
        let result = [];
        let input = this.value;

        if (input.length > 0) {
            result = Inventlist.filter((item) => {
                return item.PartNo.toLowerCase().includes(input.toLowerCase()) ||
                    item.PartName.toLowerCase().includes(input.toLowerCase())
            });
            console.log(result);
            if (result.length > 0) {
                resultBox.style.display = 'block';
                display(result); // assumes display() handles array of objects
            } else {
                resultBox.style.display = 'none';
            }
        } else {
            resultBox.style.display = 'none';
        }
    });



    $("#chamberselect").on('change', function (e) {
        e.preventDefault();
        let ID = parseInt(e.target.value);
        GetTotalChamberPrice(ID);
        ChamberTable(ID);
    });


    function display(result) {
        const content = result.map((list) => {
            return `<li onclick="selectinput(this)" data-id="${list.PartID}">${list.PartName}</li>`;
        });

        resultBox.innerHTML = "<ul>" + content.join('') + "</ul>";
    }

    function selectinput(list) {
        const ID = list.getAttribute("data-id");
        partsID = ID;
        $("#AddPartID").val(ID);
        $("#searchPartno").val(list.innerHTML);
        resultBox.innerHTML = '';
        resultBox.style.display = 'none';
    }

    const getStatusClass = (status) => {
        switch (status) {
            case "OK": return "StocksGood";
            case "LOW STOCK": return "Low";
            case "WARNING": return "Warning";
            default: return "Incomplete";
        }
    };


    addmodal.addEventListener('click', (e) => {
        e.preventDefault();
        $("#AddChamberModal").modal('show');
    });




    function loadingDisplay() {
        TableDisplay.empty();
        const loadData = `<tr>
                            <td colspan='9'>
                                <div class='Loadercontainer'>
                                    <span class="loader"></span>
                                    <p id="loadingStepText">Fetching data from the database..</p>
                                </div>
                            </td>
                        </tr>`;
        TableDisplay.append(loadData);
    }
    function Loadingsteps(callback) {
        const steps = [
            "Fetching data from the database...",
            "Processing data...",
            "Finalizing table view..."
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            if (stepIndex < steps.length) {
                const stepText = document.getElementById("loadingStepText");
                if (stepText) stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }



    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            if (ActionRestrict() === false) {
            }

            const [total, invent, drop] = await Promise.all([
                GetTotalChamberPrice(1),
                GetChamberDatalist(),
                ChamberTable(1)
            ]);
        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>

