
@{
    ViewBag.Title = "Inventorylist";
    Layout = "~/Areas/Hydroponics/Views/Shared/HydroPartsLayout.cshtml";
}

<section class="InspectHead flex_space">
    <div class="flex_align">
        <div class="Inputcontainer">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input type="text" placeholder="Search here ... " id="searchbox" autocomplete="off" />
            <div class="line"></div>
        </div>
        
      
    </div>

    <div class="flex_align">
        <div class="select-container">
            <select id="Categoryselect">
                <option value="0">-- Category --</option>
            </select>
        </div>
        <button style="width: 100%; display: none;" id="ShowStocks" class="primarybtn" type="button"><i class="fa-solid fa-user-secret"></i> Add Stocks</button>
        <button style="width: 100%;" id="Showadd" class="primarybtn" type="button"><i class="fa-solid fa-box-archive"></i> Add Stocks</button>
    </div>
</section>
<hr />

<div class="flex_space">
    <div>
        <input type="checkbox" id="chkCheck" value="check" />
        &#9989 <span>check</span>

        <input type="checkbox" id="chkRestock" value="Restock" />
        ⚠️ <span>Restock</span>

        <input type="checkbox" id="chkOut" value="Out of stocks" />
        🛑 <span>Out of Stocks</span>
    </div>
    <span>Total Parts: <span id="Countlist"></span> </span>
</div>

<div class="InspecTable">
    <table>
        <thead>
            <tr>
                <th style="width: 25%; text-align: left; padding-left: 1.5em !important;"><span style="margin-left: .5em;">Part No. / Partname</span> </th>
                <th> <i class="fa-regular fa-address-card"></i> <span style="margin-left: .5em;">Supplier</span>  </th>
                <th> <i class="fa-solid fa-box-open"></i>  <span style="margin-left: .5em;">Current Stock</span>  </th>
                <th> <i class="fa-regular fa-square-check"></i> <span style="margin-left: .5em;">Mininum Stock</span>  </th>
                <th style="width: 15%;"> <i class="fa-regular fa-comment-dots"></i> <span style="margin-left: .5em;">Status</span>  </th>
              
            </tr>
        </thead>
        <tbody id="InventorylistData">
        </tbody>
    </table>
</div>


@*=================================================================================*@
@*=========================== CHANGE LEVEL WARNING ================================*@
@*=================================================================================*@
<div class="modal fade modal-m" id="ChangeCostModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Change Stock Alert</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="changeWarning" class="addformcontainer">


                    <div class="form_group col-12 col-sm-12">
                        <input type="hidden" name="StockID" id="StockID">
                        <input type="number" name="WarningLevel" id="WarningLevel" onkeypress="return restrictChars(event)" autocomplete="off">
                    </div>
                    <div class="flex_space" id="editsdisplay">
                        <label for="">Available Stocks : <span id="CurrentQty"></span> </label>
                        <button type="submit" class="primarybtn">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>

        </div>
    </div>
</div>



<script type="text/javascript">
    let Inventlist = [];
    let loadData = [];
    let userRole;

    // Modals
    const addmodal = document.getElementById("Showadd");

    // Forms
    const addQuanforms = document.getElementById("AddQuantityform");
    const changeWarn = document.getElementById("changeWarning");

    let TableDisplay = $("#InventorylistData");
    const resultBox = document.querySelector(".namesdisplay");

    const InventoryTable = async () => {
        loadingDisplay();

        Loadingsteps(async () => {
            let res = await FetchAuthenticate('@Url.Action("GetHydroInventory", "Hydro")', {});
            if (res && res.Success) {
                Inventlist = res.Data;
                $("#Countlist").text(Inventlist.length);
                TableDisplay.empty(); // Removing the Loading Display

                InventoryPagination(Inventlist, 'InventorylistData');
            } else {
                const loadData = `<tr>
                  <td colspan='9'>
                      🔍 ${res.Message}
                  </td>
              </tr>`;

                TableDisplay.empty();
                TableDisplay.append(loadData);

            }
        });
    }

    const GetCategoryDatalist = async () => {
         let res = await FetchAuthenticate('@Url.Action("GetCategorylist", "Hydro")', {});

          if (res && res.Success) {

              $.each(res.Data, function (index, row) {
                  $("#Categoryselect").append("<option value='" + row.CategoryID + "'>" + row.CategoryName + "</option>");
              });

              $.each(res.Data, function (index, row) {
                  $("#addCategory").append("<option value='" + row.CategoryID + "'>" + row.CategoryName + "</option>");
              });
          }
     };


    const ActionRestrict = () => {
        userRole = localStorage.getItem("UserRole");
        if (userRole === "Leader" || userRole === "Users") {
            return false;
        }
    }

    function InventoryPagination(dataArray, tableBodyId) {
        let filteredData = [...dataArray];

        // === Overlay setup (once) ===
        if (!document.getElementById("imageOverlay")) {
            $("body").append(`
             <div id="imageOverlay">
                 <img id="overlayImage" src="" />
             </div>
         `);
        }

        const renderTable = () => {
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = "";

            $.each(filteredData, function (index, row) {
                    // Image Display
                let imagePath = row.ImageParts
                                    ? `/Hydro/DisplaytheImage?filename=${encodeURIComponent(row.ImageParts)}`
                    : '@Url.Content("~/Content/Images/no-image.png")';


                    
              

                   const rowHtml = `
                                     <tr data-id="${row.PartID}" data-category="${row.CategoryID}" class='rowClick' id='editButton_${row.PartID}'>

                                        <td style='text-align: left; padding-left: 1.5em;' data-cell="PartNo">
                                             <div class="flex_align" style='padding-left: 1.5em; gap: 15px;'>
                                                 <img class="NoImages lazy"
                                                     src='@Url.Content("~/Content/Images/no-image.png")'
                                                     data-src="${imagePath}"
                                                     loading="lazy"
                                                     onerror="this.src='@Url.Content("~/Content/Images/no-image.png")'" />
                                                 <div>
                                                     <p style='color: #222; font-weight: 600;'>${row.PartName ? row.PartName : "-"}</p>
                                                     <small> ${row.PartNo}</small>
                                                 </div>
                                             </div>
                                         </td>
                                         <td data-cell="Supplier">${row.Supplier ? row.Supplier : "-"}</td>
                                         <td data-cell="CurrentQty" style="font-weight: 600; color: #185d8b;">${row.CurrentQty} </td>
                                         <td data-cell="WarningLevel" style="font-weight: 600;">${row.WarningLevel}</td>
                                         <td data-cell="Approval" >
                                           <div class='${getStatusClass(row.Status)}'>
                                            ${getIconStatus(row.Status)} ${row.Status}
                                           </div>
                                         </td>
                                         <td data-cell="Delete" >
                                          <div class='flex_center'>
                                              <button  class='Editbtnbutton text-primary bg-white' id='editButton_${row.StockID}' ">
                                                 <i class="fa-solid fa-pen-to-square"></i>
                                              </button>
                                          </div>
                                          </td>
                                     </tr>
                                 `;
                tableBody.insertAdjacentHTML("beforeend", rowHtml);

                // Attach blur-up effect
                const lazyImages = document.querySelectorAll("img.lazy[data-src]");
                lazyImages.forEach(img => {
                    const realSrc = img.getAttribute("data-src");
                    img.onload = () => img.classList.add("loaded"); // smooth transition
                    img.setAttribute("src", realSrc);
                    img.removeAttribute("data-src");
                });
            });

        };

        // === CLICK HANDLER: Show overlay image ===
        $(document).on('click', '.NoImages', function (e) {
            e.stopPropagation();

            let imgSrc = $(this).attr("src") || $(this).attr("data-src");
            let $overlay = $("#imageOverlay");
            let $overlayImg = $("#overlayImage");

            // force load if only data-src exists
            if ($overlayImg.attr("src") !== imgSrc) {
                $overlayImg.attr("src", imgSrc);
            }

            $overlay.show(0, function () {
                $overlay.addClass("show");
            });
        });

        // === Hide overlay on click ===
        $(document).on("click", "#imageOverlay", function () {
            let $overlay = $(this);

            // Remove .show → triggers scale-down + fade-out
            $overlay.removeClass("show");

            // Wait until transition ends, then hide
            setTimeout(() => {
                $overlay.hide();
            }, 400); // match CSS transition
        });



        $(document).on('click', '.Editbtnbutton', function (e) {
            e.stopPropagation(); // Prevent triggering the row click event
            var rowId = $(this).attr('id');
            var rowIndex = rowId.split('_')[1];

            var filterdata = Inventlist.find(item => item.StockID === parseInt(rowIndex));
            if (filterdata) {
                $("#StockID").val(rowIndex);
                $("#WarningLevel").val(filterdata.WarningLevel);
                $("#ChangeCostModal").modal("show");

            }

        });


        const searchTable = debounce(() => {
            const query = $('#searchbox').val().toLowerCase();
            $("#PartlistData tr").each(function () {
                const partName = $(this).find("p").text().toLowerCase();
                const partNo = $(this).find("small").text().toLowerCase();

                if (partName.includes(query) || partNo.includes(query)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        }, 300);


        $('#searchbox').on('input', searchTable);

        renderTable();
    }



 

    changeWarn.addEventListener('submit', async function (e) {
        e.preventDefault();
        let forms = new FormData(e.target);
        let res = await postData('@Url.Action("updateWarningStock", "Hydro")', forms);
         if (res && res.Success) {
              Swal.fire({
                  title: "Success",
                  text: res.Message,
                  icon: "success",
                  showConfirmButton: false,
                  timer: 1500
              }).then(() => {
                  InventoryTable();
                  $("#ChangeCostModal").modal('hide');
              });
          }

    });


    //$("#Categoryselect").on('change', function (e) {
    //    e.preventDefault();
    //    let filterdata = Inventlist.filter(item => item.CategoryID === parseInt(e.target.value));
    //    if (parseInt(e.target.value) !== 0) {
    //        InventoryPagination(filterdata, 'InventorylistData', 'MastertableContainer', 50, 5);
    //    } else {
    //        InventoryPagination(Inventlist, 'InventorylistData', 'MastertableContainer', 50, 5);
    //    }
    //});

    // ======= FiLTER BY CATEGORY ===============
    $("#Categoryselect").on('change', function () {
        const selected = parseInt(this.value);
        $("#InventorylistData tr").each(function () {
            const rowCategory = parseInt($(this).data("category"));
            if (selected === 0 || rowCategory === selected) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    });

    function applyFilters() {
        let query = $('#searchbox').val().toLowerCase() || '';
        let selectedCategory = parseInt($('#Categoryselect').val());

        // Get selected status filters
        let selectedStatuses = [];
        if ($("#chkCheck").is(":checked")) selectedStatuses.push("check");
        if ($("#chkRestock").is(":checked")) selectedStatuses.push("Restock");
        if ($("#chkOut").is(":checked")) selectedStatuses.push("Out of stocks");

        let filtered = Inventlist.filter(item => {
            let matchesSearch =
                item.PartName.toLowerCase().includes(query) ||
                item.PartNo.toLowerCase().includes(query);

            let matchesCategory = (selectedCategory === 0 || item.CategoryID === selectedCategory);

            let matchesStatus = (selectedStatuses.length === 0 || selectedStatuses.includes(item.Status));

            return matchesSearch && matchesCategory && matchesStatus;
        });

        if (filtered.length === 0) {
            TableDisplay.empty();
            TableDisplay.append(`<tr><td colspan='5'>🔍 No results found..</td></tr>`);
            return;
        }

        InventoryPagination(filtered, 'InventorylistData');
    }


    const getStatusClass = (status) => {
        switch (status) {
            case "check": return "StocksGood";
            case "Out of stocks": return "Low";
            case "Restock": return "Warning";
            default: return "Incomplete";
        }
    };

    const getIconStatus = (status) => {
        switch (status) {
            case "check": return "&#9989";
            case "Out of stocks": return "🛑";
            case "Restock": return "⚠️";
            default: return "Incomplete";
        }
    };


    addmodal.addEventListener('click', (e) => {
        e.preventDefault();
        //$("#AddChamberModal").modal('show');
        window.location.href = "/Hydroponics/Hydro/AddStocks";
    });

  
    function loadingDisplay() {
        TableDisplay.empty();
        const loadData = `<tr>
                            <td colspan='6'>
                                <div class='Loadercontainer'>
                                    <span class="loader"></span>
                                    <p id="loadingStepText">Fetching data from the database..</p>
                                </div>
                            </td>
                        </tr>`;
        TableDisplay.append(loadData);
    }
    function Loadingsteps(callback) {
        const steps = [
            "Fetching data from the database...",
            "Processing data...",
            "Finalizing table view..."
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            if (stepIndex < steps.length) {
                const stepText = document.getElementById("loadingStepText");
                if (stepText) stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }

    // 🔄 Debounce helper
    function debounce(func, delay) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            if (ActionRestrict() === false) {
            }

            const [invent, drop] = await Promise.all([
                InventoryTable(),
                GetCategoryDatalist()
            ]);
        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }



    $(document).ready(() => {
        LoadPageData();


        $('#searchbox').on('input', applyFilters);
        $('#Categoryselect').on('change', applyFilters);
        $('#chkCheck, #chkRestock, #chkOut').on('change', applyFilters);

    });
</script>