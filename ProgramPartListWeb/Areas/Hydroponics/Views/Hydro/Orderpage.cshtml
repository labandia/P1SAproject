
@{
    ViewBag.Title = "Orderpage";
    Layout = "~/Areas/Hydroponics/Views/Shared/HydroPartsLayout.cshtml";
}





@*<button id="Showadd" class="floatBtn" type="button"><i class="fa-solid fa-file-circle-plus"></i></button>*@


<div class="filters flex_space">
    <div class="flex_align">
        <div class="filter-group">
            <strong>Chamber Type :</strong>
            <div class="select-container">
                <select id="categoryFilter">
                    <option value="all">All Types</option>
                    <option value="SHIBAKAWA">SHIBAKAWA</option>
                    <option value="NUPON">NUPON</option>
                    <option value="SLIM TYPE">SLIM TYPE</option>
                </select>
            </div>



        </div>
        <div class="filter-group">
            <strong>Status :</strong>
            <div class="select-container">
                <select id="stockStatusFilter">
                    <option value="all">All Status</option>
                    <option value="Ongoing">Ongoing</option>
                    <option value="Completed">Completed</option>
                    <option value="For Shipped">For Shipping</option>
                </select>
            </div>
        </div>

        <div class="filter-group">
            <strong>Date Range :</strong>
            <div class="flex_align">
                <input type="date" id="startDate">
                <input type="date" id="endDate">
            </div>
        </div>


        @*<div class="filter-group">
            <div class="Inputcontainer">
                <i class="fa-solid fa-magnifying-glass"></i>
                <input type="text" placeholder="Search Request..." id="inventorySearch" autocomplete="off" />
                <div class="line"></div>
            </div>

        </div>*@
    </div>

    <div class="filter-group">
        <button id="Showadd" class="primarybtn" type="button"><i class="fa-solid fa-file-circle-plus"></i> New Request</button>
    </div>
  

</div>


<table id="chamberOrdersTable">
    <thead>
        <tr>
            <th>Order ID</th>
            <th>Chamber Type</th>
            <th>Quantity</th>
            <th>Order Date</th>
            <th>Target Date</th>
            <th>PIC</th>
            <th>Progress </th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="chamberOrdersTableBody">
        <!-- Dynamic content -->
    </tbody>
</table>


@*<div id="paginationV2" class="pagination-container">
</div>*@

<div class="MasterlistWrap_footer ">
    <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

    <div id="MastertableContainer" class="paginationPartlocal flex_align"></div>
</div>



@*=================================================================================*@
@*=========================== ADD PARTS CHAMBER ===================================*@
@*=================================================================================*@
<div class="modal fade modal-l" id="AddRequestModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>New Request Chamber</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="addformcontainer" id="addnewform" autocomplete="off">
                    <div class="form_group col-12 col-sm-12 mb-3">
                        <label class="mb-2">Select Chamber <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <div class="select-container">
                            <select id="ChamberID" name="ChamberID">
                                <option value="0">-- select Chambers --</option>
                            </select>
                        </div>
                    </div>
                    <div class="form_group col-12 col-sm-12 ">
                        <label>No. of Chambers <small style="color: #a81818; font-weight: 600;">*</small></label> <br />
                        <input type="number" value="1" placeholder="type Ojt registration No." name="Quantity" id="Quantity" required />
                    </div>


                    <div class="form_group col-12 col-sm-12">
                        <label>Target Completion Date <small style="color: #a81818; font-weight: 600;">*</small></label>
                        <input type="date" placeholder="type Ojt registration No." name="TargetDate" id="TargetDate" required />
                    </div>



                    <div class="form_group col-12 col-sm-12 ">
                        <label>Person In Charge :  </label> <br />
                        <input type="hidden" value="Aldrin, Rommel" placeholder="type Ojt registration No." name="PIC" id="PIC" />
                        <input type="text" value="Aldrin, Rommel" placeholder="type Ojt registration No." disabled />
                    </div>



                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div>
                            <small>All fields marked with (<small style="color: #a81818; font-weight: 600;">*</small>) must be filled out</small>
                        </div>
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>




<div class="modal fade modal-l" id="StatusUpdateModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Update  Status</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post"  class="addformcontainer" id="Statusnewform" autocomplete="off">
                    <div class="form_group col-12 col-sm-12 mb-3">
                        <input type="hidden" id="OrderID" name="OrderID">
                        <label>Current Status</label>
                        <input type="text" id="currentOrderStatus" readonly>
                    </div>
                    <div class="form_group col-12 col-sm-12 ">
                        <label>New Status *</label>
                        <div class="select-container">
                            <select id="Status" name="Status" required>
                                <option value="">Select Status</option>
                                <option value="Completed">Completed</option>
                                <option value="For Shipped">For Shipped</option>
                            </select>
                        </div>
                    </div>


                   

                    <div class="flex_end mt-4">
                        
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>





<script type="text/javascript">
    let requestData = [];
    let completeData = [];
    let currentPage = 1;
    const rowsPerPage = 10;
    const pageSize = 10;

    let today = new Date();
    let dd = String(today.getDate()).padStart(2, '0');
    let mm = String(today.getMonth() + 1).padStart(2, '0');
    let yyyy = today.getFullYear();
    let todayStr = `${yyyy}-${mm}-${dd}`;
    document.getElementById("TargetDate").setAttribute("min", todayStr);

    const addforms = document.getElementById("addnewform");
    const changeforms = document.getElementById("Statusnewform");

    // ========================== LOAD REQUEST DATA ==============================
    const RequesDataList = async () => {
        const chamberType = $("#categoryFilter").val() || "all";
        const status = $("#stockStatusFilter").val() || "all";
        //const search = $("#inventorySearch").val() || "";
        const startdate = $("#startDate").val() || "";
        const endDate = $("#endDate").val() || "";

        try {
            let res = await FetchAuthenticate('@Url.Action("GetAllRequestList", "Hydro")', {
                chamberType: chamberType,
                status: status,
                startDate: startDate,
                endDate: endDate,
                page: currentPage,
                pageSize: pageSize
            });

            if (res && res.Success) {
                requestData = res.Data.Data || res.Data || [];
                const total = res.Data?.Total ?? requestData.length;

                if (total > 0) {
                    console.clear();
                    renderTable(requestData);
                    renderPagination(total);
                }
            } else {
                $("#chamberOrdersTableBody").html(`<tr><td colspan="9" style="text-align:center; color:#888;">⚠️ No matching records</td></tr>`);
            }
        } catch (err) {
            console.error("Error fetching data:", err);
            $("#chamberOrdersTableBody").html(`
                    <tr><td colspan="9" style="text-align:center; color:red;">Failed to load data</td></tr>
                `);
        }
    };

    // ========================== RENDER TABLE + PAGINATION ======================
    function renderTable(data) {
        const TableData = $("#chamberOrdersTableBody");
        TableData.empty();

        // If no Data found
        if (!data.length) {
            TableData.append(`<tr><td colspan="8" style="text-align:center; color:#888;">⚠️ No matching records</td></tr>`);
            return;
        }

        $.each(data, function (_, row) {
            const percent = Math.round(parseFloat(row.CompletionPercent) || 0);
            let barColor = "#e74c3c"; // red
            if (percent >= 70) barColor = "#27ae60"; // green
            else if (percent >= 40) barColor = "#f39c12"; // yellow

            let statsCss = "";

            if (row.RequestStatus == 'Completed') {
                statsCss = 'readiness-ready'
            } else if (row.RequestStatus == 'For Shipped') {
                statsCss = 'readiness-warning'
            } else {
                statsCss = 'readiness-not-ready'
            }

            const daysRemaining = calculateDaysRemaining(row.TargetDate);

            console.log(daysRemaining);

            TableData.append(`
                <tr >
                    <td><strong>${row.OrderID ?? "-"}</strong></td>
                    <td>${row.ChamberName ?? "-"}</td>
                    <td>${row.ChambersOrdered ?? 0} unit(s)</td>
                    <td>${row.OrderDate ?? "-"}</td>
                    <td>
                        ${row.TargetDate ?? "-"}
                        ${daysRemaining < 0 && row.RequestStatus === 'Ongoing' ? '<br><small style="color: #dc3545;">Overdue</small>' :
                          daysRemaining < 7 && row.RequestStatus === 'Ongoing' ? '<br><small style="color: #ffc107;">Due soon</small>' : ''}
                    </td>
                    <td>${row.PIC ?? "-"}</td>
                    <td style="text-align:center;  display: flex; justify-content: center; flex-direction: column; align-items: center;">
                        <div class="progress-bar-container">
                            <div class="progress-bar" style="width:0; background:${barColor};"></div>
                        </div>
                        <span style="font-size:.75rem;">${percent}% Complete</span>
                    </td>
                    <td>
                        <span class='readiness-badge ${statsCss}'>
                            ${row.RequestStatus ?? "-"}
                        </span>
                    </td>
                    <td class="order-actions">
                        <div class="flex_align">
                            <button class="RequestRow text-secondary bg-white" id="Details_${row.OrderID}">
                                <i class="fas fa-eye"></i>
                            </button>

                 
                            <button  class='EditRow text-primary bg-white' id="Details_${row.OrderID}">
                               <i class="fa-solid fa-pen-to-square"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `);

            const $bar = TableData.find(".progress-bar").last();
            setTimeout(() => $bar.css("width", `${percent}%`), 100);
        });
    }

    // ========================== PAGINATION CONTROLS ============================
    function renderPagination(totalItems) {
        const totalPages = Math.ceil(totalItems / pageSize);
        const pagination = $("#MastertableContainer");
        pagination.empty();

        // Calculate "from" and "to" item numbers
        const startItem = (currentPage - 1) * pageSize + 1;
        const endItem = Math.min(currentPage * pageSize, totalItems);

        // Update text info
        $("#pagecountID").text(startItem > totalItems ? 0 : startItem);
        $("#totalpageID").text(endItem);
        $("#DatalengthID").text(totalItems);

        // Always render pagination, even if only 1 page
        let html = '';

        // Prev button
        html += `<button class="page-btn" data-page="${currentPage - 1}" ${currentPage === 1 ? "disabled" : ""}>Prev</button>`;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            html += `<button class="page-btn ${i === currentPage ? "active" : ""}" data-page="${i}">${i}</button>`;
        }

        // Next button
        html += `<button class="page-btn" data-page="${currentPage + 1}" ${currentPage === totalPages ? "disabled" : ""}>Next</button>`;

        pagination.html(html);

        // If no items, show a disabled state
        if (totalItems === 0) {
            pagination.html(`<button class="page-btn" disabled>No data</button>`);
            $("#pagecountID").text(0);
            $("#totalpageID").text(0);
            $("#DatalengthID").text(0);
        }
    }

    // Pagination click handler
    $(document).on("click", ".page-btn", function () {
        const newPage = parseInt($(this).data("page"));
        if (!isNaN(newPage)) {
            currentPage = newPage;
            RequesDataList();
        }
    });

    // ========================== FILTER EVENTS ================================
    $("#categoryFilter, #stockStatusFilter, #startDate, #endDate").on("change", function () {
        currentPage = 1;
        RequesDataList();
    });

    //$("#inventorySearch").on("keyup", function () {
    //    currentPage = 1;
    //    RequesDataList();
    //});

    // ========================== ROW CLICK EVENT ==============================
    $(document).on('click', '.RequestRow', function (e) {
        e.stopPropagation();
        const rowId = $(this).attr('id').split('_')[1];
        window.location.href = `/Hydroponics/Hydro/OrderpageDetails?orderID=${rowId}`;
    });

    $(document).on('click', '.EditRow', function (e) {
        e.stopPropagation();
        const rowId = $(this).attr('id').split('_')[1];
        var getStats = requestData.filter(res => res.OrderID === rowId);

        if (getStats) {
            $("#currentOrderStatus").val(getStats[0].RequestStatus);
            $("#OrderID").val(getStats[0].OrderID);
            $("#StatusUpdateModal").modal('show');
        }
    });

    // ========================== ADD REQUEST ==============================
    const GetChamberDatalist = async () => {
        let res = await FetchAuthenticate('@Url.Action("GetChamberList", "Hydro")', {});
        if (res && res.Success) {
            const select = $("#ChamberID").empty().append(`<option value="0">-- select Chamber --</option>`);
            res.Data.forEach(row => {
                select.append(`<option value="${row.ChamberID}">${row.ChamberName}</option>`);
            });
        }
    };

    $("#Showadd").on('click', function (e) {
        e.preventDefault();
        $("#AddRequestModal").modal("show");
    });

    addforms.addEventListener('submit', async function (e) {
        e.preventDefault();
        let formdata = new FormData(e.target);
        let res = await postData('@Url.Action("NewAddRequestData", "Hydro")', formdata);
        if (res && res.Success) {
            RequesDataList();
            e.target.reset();
            $("#AddRequestModal").modal("hide");
        }
    });

    changeforms.addEventListener('submit', async function (e) {
        e.preventDefault();
        let formdata = new FormData(e.target);
        const data = Object.fromEntries(formdata);
        let res = await postData('@Url.Action("ChangeStatusRequest", "Hydro")', formdata);
        if (res && res.Success) {
            RequesDataList();
            e.target.reset();
            $("#StatusUpdateModal").modal("hide");
        }
    });



    // Calculate the Remaining Days
    function calculateDaysRemaining(targetDate) {
        const target = new Date(targetDate);
        const today = new Date();
        const diffTime = target - today;
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }




    // ========================== INITIAL LOAD ==============================
    $(document).ready(async () => {
        await Promise.all([RequesDataList(), GetChamberDatalist()]);
    });
</script>
