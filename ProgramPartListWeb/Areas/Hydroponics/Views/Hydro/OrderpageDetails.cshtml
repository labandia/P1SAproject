
@{
    ViewBag.Title = "OrderpageDetails";
    var ID = Request.QueryString["orderID"];
}

<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="@Url.Content("~/Content/Images/patrol .ico")">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title</title>
    <link rel="preload" href="~/Content/fonts/Manrope-Regular.ttf" as="font" type="font/ttf" crossorigin="anonymous">
    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <link href="~/Content/css/OrderDetails.css" rel="stylesheet" />


    @Styles.Render("~/Content/shared-css")

    @Scripts.Render("~/bundles/shared-js")
    @Scripts.Render("~/bundles/modernizr")
</head>

<input type="hidden" id="chambID" value="@ID" />
@*<p style="font-weight: 600; margin: 0;">TargetDate: </p><spam id="TargetDate">*@

<nav class="customnav">
    <div class="customnav_title">
        <a href="/Hydroponics/Hydro/Orderpage">
            <i class="fa-solid fa-arrow-left"></i>
        </a>
        <div>
            <span style="font-size: 1rem; font-weight: 500;">@ID</span>
            <p id="ChamberName" style="opacity: .6;">Chamber selected : NUPON</p>
        </div>
        <div class="select-container">
            <select id="RequestStatus" name="RequestStatus" class="default">
                <option value="PENDING" selected>ONGOING</option>
                <option value="COMPLETED">COMPLETED</option>
                <option value="SHIPPED">FOR SHIPPED</option>
            </select>
        </div>
    </div>
    <div class="customnav_Progress">
        <label>Completion rate : <span id="completeRate"></span> </label>
        <div class="progress-bar-container">
            <div class="progress-bar" id="progressBar"></div>
        </div>
    </div>
</nav>

<div class="ChamberWrapper">
    <div class="Chamber_container">
        <div class="ChamberMain">
            <div class="Chamber_Details">
                <div class="Mold_tabcontainer">
                    <div class="Customcontainer">
                        <div class="Mold_tabs">
                            <button class="Mold_tab active" data-target="All">Required <span id="RequireCounts"></span></button>
                            <button class="Mold_tab" data-target="Completed">Completed <span id="CompleteCounts"></span></button>
                            <div class="Mold_slider"></div>
                        </div>
                        <div class="Mold_contentbox">
                            <div class="Mold_content show" id="All">
                                <div class="search-container">
                                    <input type="text" class="search-input" id="requiredSearch" placeholder="Search by Number or Partno...">
                                    <span class="search-info" id="requiredSearchInfo">Showing all items</span>
                                </div>

                                <div class="requiredTable_Wrapper">
                                    <table id="requiredTable">
                                        <thead>
                                            <tr>
                                                <th class="qty-cell" style="text-align: left; padding-left: 1em;  width: 40%;">Partno / Partname</th>
                                                <th class="qty-cell">Required</th>
                                                <th class="qty-cell">Available</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>


                            </div>

                            <div class="Mold_content" id="Completed">
                                <div class="allocatedTable_Wrapper">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th style="width: 30%; text-align: left; padding-left: 1.5em;"><i class="fa-solid fa-screwdriver-wrench"></i>  <span style="margin-left: .5em;">Part No. / Partname</span> </th>
                                                <th style="width: 20%;"> <i class="fa-regular fa-rectangle-list"></i> <span style="margin-left: .5em;">Category</span>  </th>
                                                <th style="width: 10%;"> <span style="margin-left: .5em;">Quantity Used</span>  </th>
                                            </tr>
                                        </thead>
                                        <tbody id="RequestWrapper">
                                        </tbody>
                                    </table>
                                </div>


                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="Chamber_Images">
                <label style="font-weight: 600; font-size: 1.1rem; margin-bottom: .5em;">Allocated Items: <span id="Counts"></span></label>

                <div class="search-container">
                    <input type="text" class="search-input" id="allocatedSearch" placeholder="Search by Number or Partno...">
                    <span class="search-info" id="allocatedSearchInfo">Showing all items</span>
                </div>

                <div class="allocatedTable_Wrapper">
                    <table id="allocatedTable">
                        <thead>
                            <tr>
                                <th>No.</th>
                                <th>Partno</th>
                                <th class="qty-cell">Allocated</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="allocatedData">
                        </tbody>
                    </table>
                </div>

                <div class="controls">
                    <button class="btn-primary" id="completeOrderBtn">Save Details</button>
                </div>



                @*<label style="font-weight: 600; font-size: 1.1rem;">Materials Partlist:</label>
                    <div class="Chamber_preview">
                        <img loading="lazy" src="~/Content/Images/HydroChamber.png" alt="ChamberDisplay" />
                    </div>

                    <div class="Chamber_Images_selector">
                        <div class="Chamber_Images_container">
                            <img loading="lazy" src="~/Content/Images/HydroChamber.png" alt="Chamber Section A" />
                    <img loading="lazy" src="~/Content/Images/HydrochamberPart2.png" alt="Chamber Section B" />
                    <img loading="lazy" src="~/Content/Images/Electrical.png"  alt="Chamber Section C" />
                        </div>
                    </div>*@
            </div>
        </div>
    </div>
</div>


<!-- Loader -->
<div id="loader" class="loader-overlay show">
    <div class="loader-box">
        <div class="spinner"></div>
      
    </div>
</div>




<script type="text/javascript">
    const loader = document.getElementById('loader');
    let TableDisplay = $("#allocatedData");
    const select = document.getElementById("RequestStatus");
    const ID = $("#chambID").val();
    let requestData = [];

    // Set initial style
    select.classList.remove("default");
    select.classList.add(select.value);

    select.addEventListener("change", function () {
        // Reset classes
        select.classList.remove("COMPLETED", "PENDING", "SHIPPED", "default");
        // Apply class based on value
        select.classList.add(this.value);
    });


    // Tabs Content
    const tabs = document.querySelectorAll(".Mold_tab");
    const slider = document.querySelector(".Mold_slider");
    const contents = document.querySelectorAll(".Mold_content");

    tabs.forEach((tab, index) => {
        tab.addEventListener("click", () => {
            // Handle tab active class
            document.querySelector(".Mold_tab.active").classList.remove("active");
            tab.classList.add("active");

            // Move slider
            slider.style.transform = `translateX(${index * 100}%)`;

            // Switch content
            const target = tab.getAttribute("data-target");
            contents.forEach((content) => {
                content.classList.remove("show");
            });

            // Add show class with slight delay
            setTimeout(() => {
                document.getElementById(target).classList.add("show");
            }, 50);

        });
    });

    // Track allocated parts
    let allocatedParts = {};

    // Initialize the tables
    document.addEventListener('DOMContentLoaded', function () {

        loader.classList.add('show');

        setTimeout(() => {
                    const loadData = `<tr>
                       <td colspan='4'>
                           🔍 No Allocated Data
                       </td>
                   </tr>`;

                    TableDisplay.empty();
                    TableDisplay.append(loadData);


                    populateRequiredTable();
                    RequestMain();
                    //updateProgress();
                    //updateCounts();
                    //updateProgress();

                    // Add event listeners
                    document.getElementById('requiredTable').addEventListener('click', handleRequiredTableClick);
                    document.getElementById('completeOrderBtn').addEventListener('click', completeOrder);
                    loader.classList.remove('show');
        }, 2000);

    });


    const RequestMain = async () => {
        let res = await FetchAuthenticate('@Url.Action("GetMainRequestList", "Hydro")', { orderID: ID });
        if (res && res.Success) {
            $("#ChamberName").text(`Chamber selected : ${res.Data.ChamberName}`);
            $("#RequestStatus").val(res.Data.RequestStatus);
            $("#MaterialStatus").text(res.Data.MaterialStatus);


            const percent = parseFloat(res.Data.CompletionPercent) || 0;
            let displaypercent = Math.round(percent);

            let barColor = "linear-gradient(90deg, #e74c3c, #c0392b)"; // red
            if (percent >= 70) barColor = "linear-gradient(90deg, #2ecc71, #27ae60)"; // green
            else if (percent >= 40) barColor = "linear-gradient(90deg, #f1c40f, #f39c12)"; // yellow

            const progressBar = document.getElementById('progressBar');
            // Reset animation
            progressBar.style.transition = "none";
            progressBar.style.width = "0%";

            // Force reflow so browser applies reset before animating
            progressBar.offsetHeight;

            // Animate the bar after appending
            progressBar.style.background = barColor;
            progressBar.style.transition = "width 1s ease";
            progressBar.style.width = `${percent}%`;

            //Show the percentage
            $("#completeRate").text(`${percent}%`);

        }
    }

    // Populate the required parts table
     const populateRequiredTable = async () => {

        let res = await FetchAuthenticate('@Url.Action("GetRequestDetails", "Hydro")', { orderID: ID });
        if (res && res.Success) {
            requestData = res.Data;
            // FROM COMPLETE DATAW
            let CompletedData = requestData.filter(res => res.MaterialStatus === "COMPLETED");
            let NotCompletedData = requestData.filter(res => res.MaterialStatus === "INCOMPLETED");
            $("#RequireCounts").text(`(${NotCompletedData.length})`);
            $("#CompleteCounts").text(`(${CompletedData.length})`);

            let TableData = $("#RequestWrapper");
            TableData.empty();
            $.each(CompletedData, function (index, row) {

                const loadData = `<tr class='Editbtnbutton' id='editButton_${row.OrderDetailID}'>
                                     <td style='text-align: left; padding-left: 1em;' data-cell="PartNo">
                                         <p style='color: #0c382ce8; font-weight: 600;'>${row.PartName ? row.PartName : "-"}</p>
                                         <small> ${row.PartNo}</small>
                                     </td>
                                     <td data-cell="Supplier">${row.CategoryName ? row.CategoryName : "-"}</td>
                                     <td data-cell="Supplier">${row.QtyUsed ? row.QtyUsed : "-"}</td>
                                 </tr>`;
                TableData.append(loadData);
            });

            const tbody = document.querySelector('#requiredTable tbody');
            tbody.innerHTML = '';
            console.log(NotCompletedData);
            NotCompletedData.forEach(part => {
                const row = document.createElement('tr');
                row.setAttribute('data-ID', part.PartID);
                row.setAttribute('data-part', part.PartNo);
                row.setAttribute('data-remain', part.RemainQty);
                row.setAttribute('data-required', part.RequiredQty);
                row.setAttribute('data-available', part.CurrentQty);

                // Apply status classes based on availability
                if (part.CurrentQty === 0) {
                    row.classList.add('critical-shortage');
                } else if (part.CurrentQty < part.RequiredQty) {
                    row.classList.add('shortage');
                }

                let imagePath = part.ImageParts
                    ? `/Hydro/DisplaytheImage?filename=${encodeURIComponent(part.ImageParts)}`
                    : '@Url.Content("~/Content/Images/no-image.png")';


                row.innerHTML = `
                  <td style='font-weight: 600; text-align: left;'>
                    <div class='flex_align'>
                          <img class="NoImages lazy"
                          src='@Url.Content("~/Content/Images/no-image.png")'
                          data-src="${imagePath}"
                          loading="lazy"
                          onerror="this.src='@Url.Content("~/Content/Images/no-image.png")'" />
                          <div>
                            <p style='color: #185d8b; font-weight: 600;'>${part.PartName ? part.PartName : "-"}</p>
                            <small> ${part.PartNo}</small>
                         </div>
                    </div>
                  </td>
                  <td class="qty-cell">${part.QtyUsed} / ${part.RequiredQty}</td>
                  <td class="qty-cell">${part.CurrentQty}</td>
              `;

                tbody.appendChild(row);

                // Attach blur-up effect
                const lazyImages = document.querySelectorAll("img.lazy[data-src]");
                lazyImages.forEach(img => {
                    const realSrc = img.getAttribute("data-src");
                    img.onload = () => img.classList.add("loaded"); // smooth transition
                    img.setAttribute("src", realSrc);
                    img.removeAttribute("data-src");
                });
            });
        }
     }



    // Image selector functionality
    //const thumbnails = document.querySelectorAll('.Chamber_Images_container img');
    //const mainImage = document.querySelector('.Chamber_preview img');

    //thumbnails.forEach(thumb => {
    //    thumb.addEventListener('click', function () {
    //        mainImage.src = this.src;
    //        mainImage.alt = this.alt;
    //    });
    //});

    // Handle clicks on the required table
    function handleRequiredTableClick(e) {
        const row = e.target.closest('tr');
        if (!row) return;

        const partID = row.getAttribute('data-ID');
        const partNumber = row.getAttribute('data-part');
        const required = parseInt(row.getAttribute('data-required'));
        const available = parseInt(row.getAttribute('data-available'));
        const remainTable = parseInt(row.getAttribute('data-remain'));

        // Check if part can be allocated
        if (available === 0) {
            alert(`Part ${partNumber} is out of stock and cannot be allocated.`);
            return;
        }

        allocatePart(partID, partNumber, required, available, remainTable);
    }
    // Allocate a part to the order
    function allocatePart(ID, partNumber, required, available, remainTable) {

        const partData = requestData.find(p => p.PartID === parseInt(ID));
        if (!partData) return;

        // Initialize if not already allocated
        if (!allocatedParts[ID]) {
            allocatedParts[ID] = 0;
        }

        // Check if we can allocate more
        if (allocatedParts[ID] < remainTable && allocatedParts[ID] < available) {
            allocatedParts[ID]++;


            updateAllocatedTable();
            updateRequiredTableStyles();
            //updateCounts();
            //updateProgress();
        } else {
            alert(`Cannot allocate more of ${partData.PartNo}. Maximum available: ${Math.min(required, available)}`);
        }
    }


    // Update the allocated parts table
    function updateAllocatedTable() {
        // Count only parts with allocation > 0
        let allocatedCount = Object.values(allocatedParts).filter(qty => qty > 0).length;
        $("#Counts").text(`(${allocatedCount})`);

        const tbody = document.querySelector('#allocatedTable tbody');
        tbody.innerHTML = '';

        for (const ID in allocatedParts) {
            if (allocatedParts[ID] > 0) {
                const partData = requestData.find(p => p.PartID === parseInt(ID));
                const row = document.createElement('tr');


                row.innerHTML = `
                     <td>${partData.PartID}</td>
                     <td>${partData.PartNo}</td>
                     <td class="qty-cell">${allocatedParts[ID]}</td>
                     <td>
                         <div class="action-buttons">
                             <button class="btn btn-remove" onclick="removePart('${ID}')">Remove</button>
                             <button class="btn btn-increment" onclick="incrementPart('${ID}')">+</button>
                             <button class="btn btn-decrement" onclick="decrementPart('${ID}')">-</button>
                         </div>
                     </td>
                 `;

                tbody.appendChild(row);
            }
        }
    }

    // Update styles for the required table based on allocation status
    function updateRequiredTableStyles() {

        const rows = document.querySelectorAll('#requiredTable tbody tr');

        rows.forEach(row => {
            const ID = parseInt(row.getAttribute('data-ID'));
            const partNumber = row.getAttribute('data-part');
            const required = parseInt(row.getAttribute('data-required'));
            const allocated = allocatedParts[ID] || 0;

            // Remove existing status classes
            row.classList.remove('allocated', 'fully-allocated');

            // Add appropriate classes
            if (allocated > 0) {
                if (allocated >= required) {
                    row.classList.add('fully-allocated');
                } else {
                    row.classList.add('allocated');
                }
            }
        });
    }



     // Update the count badges
     function updateCounts() {
         const requiredCount = partsData.length;
         const allocatedCount = Object.keys(allocatedParts).filter(p => allocatedParts[p] > 0).length;

         document.getElementById('requiredCount').textContent = requiredCount;
         document.getElementById('allocatedCount').textContent = allocatedCount;
     }


     // Update the progress bar
     function updateProgress() {
         //let totalRequired = 0;
         //let totalAllocated = 0;

         //partsData.forEach(part => {
         //    totalRequired += part.required;
         //    totalAllocated += allocatedParts[part.partNumber] || 0;
         //});

         //const progress = totalRequired > 0 ? (totalAllocated / totalRequired) * 100 : 0;

         document.getElementById('progressBar').style.width = `20%`;
         //document.getElementById('progressText').textContent = `20%`;
     }


     // Action functions for allocated parts
     function removePart(partNumber) {
         delete allocatedParts[partNumber];

         updateAllocatedTable();
         updateRequiredTableStyles();
         //updateCounts();
         //updateProgress();
         const loadData = `<tr>
           <td colspan='4'>
               🔍 No Allocated Data
           </td>
       </tr>`;

         TableDisplay.empty();
         TableDisplay.append(loadData);
     }

     function incrementPart(ID) {
         const partData = requestData.find(p => p.PartID === parseInt(ID));
         if (!partData) return;

         const remain = partData.RemainQty;
         const available = partData.CurrentQty;
         const allocated = allocatedParts[ID] || 0;
         if (allocated < remain && allocated < available) {
             allocatedParts[ID]++;

             updateAllocatedTable();
             updateRequiredTableStyles();
             //updateCounts();
             //updateProgress();
         } else {
             alert(`Cannot allocate more of ${partData.PartNo}. Maximum: ${Math.min(remain, available)}`);
         }
     }

     function decrementPart(ID) {
         if (allocatedParts[ID] > 1) {
             allocatedParts[ID]--;
             updateAllocatedTable();
             updateRequiredTableStyles();
             //updateCounts();
             //updateProgress();
         } else {
             removePart(ID);
         }
     }
     // Get lengths for all orders
     function getAllAllocationLengths() {
         let lengths = {};

         for (let orderID in allocatedParts) {
             if (allocatedParts.hasOwnProperty(orderID)) {
                 lengths[orderID] = allocatedParts[orderID].length;
             }
         }

         return lengths;
     }


     async function completeOrder() {
         const allocations = getAllocatedPartsFromTable();
         let result = await fetch('@Url.Action("UpdatesRequestMaterialsV2", "Hydro")', {
             method: "POST",
             headers: { "Content-Type": "application/json; charset=utf-8" },
             body: JSON.stringify(allocations)
         });

         let res = await result.json();
         if (res && res.Success) {
             Swal.fire({
                 title: "Success",
                 text: res.Message,
                 icon: "success",
                 showConfirmButton: false,
                 timer: 1500
             }).then(() => {
                 allocatedParts = {};
                 populateRequiredTable();
                 RequestMain();
                 updateAllocatedTable();
             });
         }

         //const allocatedCount = Object.keys(allocatedParts).filter(p => allocatedParts[p] > 0).length;

         //if (allocatedCount === 0) {
         //    alert('No parts have been allocated. Please allocate parts before completing the order.');
         //    return;
         //}

         //// Check if all required parts are fully allocated
         //let allFullyAllocated = true;
         //let message = '';

         //requestData.forEach(part => {
         //    const allocated = allocatedParts[part.partID] || 0;
         //    if (allocated < part.RequiredQty) {
         //        allFullyAllocated = false;
         //        message += `• ${part.partNumber}: ${allocated}/${part.RequiredQty} allocated\n`;
         //    }
         //});

         //if (allFullyAllocated) {
         //    alert('Order completed successfully! All parts have been fully allocated.');
         //    // In a real app, you would submit the order here
         //} else {
         //    if (confirm(`Some parts are not fully allocated. Proceed anyway?\n\n${message}`)) {
         //        alert('Order completed with partial allocation.');
         //        // In a real app, you would submit the order here
         //    }
         //}
     }

    function getAllocatedPartsFromTable() {
        const rows = document.querySelectorAll('#allocatedTable tbody tr');
        let result = [];

        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            result.push({
                OrderID: ID,
                PartID: parseInt(cells[0].textContent.trim()),
                allocated: parseInt(cells[2].textContent.trim(), 10)
            });
        });

        return result;
    }

      $("#RequestStatus").on('change', async function (e) {
         e.preventDefault();
         let formData = new FormData();
         formData.append('OrderID', ID);
         formData.append('RequestStatus', e.target.value);

         let data = Object.fromEntries(formData);
         let res = await postData('@Url.Action("ChangeStatusRequest", "Hydro")', formData);
         if (res && res.Success) {
              Swal.fire({
                  title: "Success",
                  text: res.Message,
                  icon: "success",
                  showConfirmButton: false,
                  timer: 1500
              }).then(() => {
                  RequestMain();
              });
         }
 });
</script>
