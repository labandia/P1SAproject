
@{
    ViewBag.Title = "OrderpageDetails";
    var ID = Request.QueryString["orderID"];
    Layout = "~/Areas/Hydroponics/Views/Shared/HydroPartsLayout.cshtml";
}

<div class="row">
    <div class="col-3">
        <div class="flex_align">
            <a href="/Hydroponics/Hydro/Orderpage"><i class="fa-solid fa-arrow-left"></i></a>
            <h5 style="margin: 0;">Request ID: @ID</h5>
        </div>


        <section>
            <input type="hidden" id="chambID" value="@ID" />
            <div class="requestGroup">
                <strong>Chamber Name:</strong><spam id="ChamberName"> </spam>
            </div>

            <div class="requestGroup">
                <strong>Number of Chambers:</strong><spam id="ChambersOrdered"> </spam>
            </div>

            <div class="requestGroup">
                <strong>TargetDate:</strong><spam id="TargetDate"> </spam>
            </div>

            <div class="requestGroup">
                <strong>RequestStatus:</strong>
                <div class="select-container">
                    <select id="RequestStatus" name="RequestStatus">
                        <option value="ONGOING">ONGOING</option>
                        <option value="COMPLETED">COMPLETED</option>
                        <option value="SHIPPED">FOR SHIPPED</option>
                    </select>
                </div>
            </div>

        </section>
    </div>

    <div class="col-9">
        <div class="flex_space" style="margin-bottom: .5em;">
            <strong>Chamber Parts : </strong>

            <div class="requestGroup">
                <strong>Status :</strong>

                <spam id="MaterialStatus"> </spam>
            </div>
        </div>

        <table>
            <thead>
                <tr>
                    <th style="width: 30%; text-align: left; padding-left: 1.5em;"><i class="fa-solid fa-screwdriver-wrench"></i>  <span style="margin-left: .5em;">Part No. / Partname</span> </th>
                    <th style="width: 20%;"> <i class="fa-regular fa-rectangle-list"></i> <span style="margin-left: .5em;">Category</span>  </th>
                    <th style="width: 10%;"> <span style="margin-left: .5em;">Quantity Used</span>  </th>
                    <th style="width: 10%;">  <span style="margin-left: .5em;">Required Qty</span>  </th>
                    <th style="width: 10%;">  <span style="margin-left: .5em;">Status</span>  </th>
                </tr>
            </thead>
            <tbody id="RequestWrapper">
            </tbody>
        </table>
    </div>
</div>








<!--########################## INPUT DATA #############################-->
<div class="modal fade modal-m" id="ChangeQuanModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Quantity Used</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <form id="InputQuantity" class="addformcontainer">
                    <label for="">Material Parts : <span id="PartName">Black Coated Pipe</span> </label> <br />
                    <label for="">Used Quantity: <span id="DisplayQtyUsed">-</span> </label> <br />

                    <div class="form_group col-12 col-sm-12">
                        <label for="">Add Quantity </label>
                        <input type="hidden" name="OrderDetailID" id="OrderDetailID">
                        <input type="text" name="QtyUsed" id="QtyUsed" onkeypress="return restrictChars(event)" autocomplete="off">

                    </div>
                    <div class="flex_space" id="editsdisplay">
                        <label for="">Available Stocks : <span id="CurrentQty"></span> </label>
                        <button type="submit" class="primarybtn">
                            <span><i class="fa-regular fa-floppy-disk"></i>  Save</span>
                        </button>
                    </div>
                </form>


            </div>


        </div>
    </div>
</div>



<script type="text/javascript">
    let requestData = [];
    let min = 0, max = 0;
    let usedQuantity = 0;
    let currentQuantity = 0;

    let previousValue = 0;
    let inputvalue = 0;
    let newValueQuan = 0;
    let ID = parseInt($("#chambID").val());
    let addQuanform = document.getElementById("InputQuantity");
    const useInput = document.getElementById("QtyUsed");

    const RequestMain = async () => {

       let res = await FetchAuthenticate('@Url.Action("GetMainRequestList", "Hydro")', { orderID: ID });
        if (res && res.Success) {
           $("#ChamberName").text(res.Data.ChamberName);
           $("#ChambersOrdered").text(res.Data.ChambersOrdered);
           $("#TargetDate").text(res.Data.TargetDate);
           $("#RequestStatus").val(res.Data.RequestStatus);
           $("#MaterialStatus").text(res.Data.MaterialStatus);
       }
    }

    const RequesDataList = async () => {
      let TableData = $("#RequestWrapper");

       let res = await FetchAuthenticate('@Url.Action("GetRequestDetails", "Hydro")', { orderID: ID });
       if (res && res.Success) {
           requestData = res.Data;
           TableData.empty();
          $.each(requestData, function (index, row) {

              const loadData = `<tr class='Editbtnbutton' id='editButton_${row.OrderDetailID}'>
                                    <td style='text-align: left; padding-left: 1em;' data-cell="PartNo">
                                        <p style='color: #0c382ce8; font-weight: 600;'>${row.PartName ? row.PartName : "-"}</p>
                                        <small> ${row.PartNo}</small>
                                    </td>
                                    <td data-cell="Supplier">${row.CategoryName ? row.CategoryName : "-"}</td>
                                    <td data-cell="Supplier">${row.QtyUsed ? row.QtyUsed : "-"}</td>
                                    <td data-cell="UnitUSD">${row.RequiredQty ? row.RequiredQty : "-"}</td>
                                    <td data-cell="UnitUSD">${row.MaterialStatus ? row.MaterialStatus : "-"}</td>
                                </tr>`;
              TableData.append(loadData);
          });
       }
    }

    $(document).on('click', '.Editbtnbutton', function (e) {
        e.stopPropagation(); // Prevent triggering the row click event
        var rowId = $(this).attr('id');
        var rowIndex = rowId.split('_')[1];

        var filterdata = requestData.find(item => item.OrderDetailID === parseInt(rowIndex));
        console.log(filterdata);
        if (filterdata) {
             currentQuantity = filterdata.QtyUsed;
             newValueQuan = 0;

            $("#PartName").text(filterdata.PartName);
            $("#DisplayQtyUsed").text(filterdata.QtyUsed + "/" + filterdata.RequiredQty);
            $("#OrderDetailID").val(rowIndex);
            $("#CurrentQty").text(filterdata.CurrentQty);
            
             // ✅ store min/max in dataset
            $("#QtyUsed").attr("data-min", filterdata.QtyUsed);
            $("#QtyUsed").attr("data-max", filterdata.RequiredQty);



            if (filterdata.MaterialStatus !== "Completed") {
                $("#ChangeQuanModal").modal("show");
            }
        }

    });

    // Limits the input required
    useInput.addEventListener("input", function (e) {
        min = parseInt(this.dataset.min) || 0;
        max = parseInt(this.dataset.max) || Infinity;

        usedQuantity = parseInt(this.value) || 0;     
        newValueQuan = usedQuantity - currentQuantity;

    });


    addQuanform.addEventListener('submit', async function (e) {
        e.preventDefault();

        if (usedQuantity > max) {
            alert("Input number are Higher");
            return;
        }
        if (usedQuantity < min)
        {
            alert("Input number are Lower");
            return;
        }


        let formData = new FormData(e.target);
        formData.append('NewUsedQuan', newValueQuan);

        let data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("UpdatesRequestMaterials", "Hydro")', formData);

        console.log(res);   

        @*
        if (res && res.Success) {
             Swal.fire({
                 title: "Success",
                 text: res.Message,
                 icon: "success",
                 showConfirmButton: false,
                 timer: 1500
             }).then(() => {
                 // Reset tracking variables
                 previousValue = 0;
                 newValueQuan = 0;
                 RequestMain();
                 RequesDataList();
                 $("#ChangeQuanModal").modal("hide");
             });
         }*@
    });


    $("#RequestStatus").on('change', async function (e) {
        e.preventDefault();
        let formData = new FormData();
        formData.append('OrderID', ID);
        formData.append('RequestStatus', e.target.value);

        let data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("ChangeStatusRequest", "Hydro")', formData);
        console.log(res);
        if (res && res.Success) {
             Swal.fire({
                 title: "Success",
                 text: res.Message,
                 icon: "success",
                 showConfirmButton: false,
                 timer: 1500
             }).then(() => {
                 RequestMain();
             });
        }
    });


    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {

            const [main, req] = await Promise.all([
                RequestMain(),
                RequesDataList()
            ]);
        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>