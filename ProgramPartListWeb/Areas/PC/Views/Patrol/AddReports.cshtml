
@{
    ViewBag.Title = "Production Patrol Inspection Report System";
    Layout = "";
}
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="@Url.Content("~/Content/Images/patrol .ico")">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title</title>
    <link rel="preload" href="~/Content/fonts/Poppins-Regular.ttf" as="font" type="font/ttf" crossorigin="anonymous">


    <script src="~/Scripts/bootstrap.bundle.min.js"></script>
    <link href="~/Content/css/Patrolforms.css" rel="stylesheet" />

    @Styles.Render("~/Content/shared-css")

    @Scripts.Render("~/bundles/shared-js")
    @Scripts.Render("~/bundles/modernizr")
</head>


<header class="FormMainheader">
    <div class="CustomContainer">
        <div class="HeadTitle">
            <div class="flex_align">
                <a href="/PC/Patrol/PatrolReport"><i class="fa-solid fa-arrow-left"></i>  </a>
                <span>  Back</span>
                <button type="button" id="OpenSenders2"><i class="fa-regular fa-user"></i> Save Draft</button>
                <button type="button" id="OpenSenders2"><i class="fa-regular fa-user"></i> Approve</button>
            </div>
            <div class="HeadTitle__action">
                <button type="button" id="OpenSenders"><i class="fa-regular fa-user"></i> To</button>
                <input type="text" id="selectedEmails" placeholder="Recepients name ...">
                <button type="button" id="OpenCC"><i class="fa-regular fa-user"></i> CC</button>
                <input type="text" id="selectedCC" placeholder="CC ">
                <button id="sendEmail"><i class="fa-regular fa-paper-plane"></i> Send</button>
            </div>
        </div>
    </div>
</header>



<section style="padding: 4rem 0;">
    <div class="Attachmentcontainer">
        <div class="flex_align">
            <label class="mb-0 fw-bold">Attachments : </label>
            <button type="button" id="uploadBtn"><i class="fa-solid fa-paperclip"></i> Upload Files</button>
        </div>


        <section class="flex_align">


            <div id="fileContainer"></div>
            <ul id="fileList" class="file-list flex_align"></ul>


        </section>
    </div>

    <input type="file" id="fileInput" accept="application/pdf" multiple hidden>





    <form method="post" enctype="multipart/form-data" class="formcontainer" id="addnewform" autocomplete="off">
        <div class="row">
            <div class="col-12">
                <div class="d-flex align-items-center gap-4">
                    <a href="/PC/Patrol/PatrolReport"><i class="fa-solid fa-arrow-left"></i></a>
                    <h5 class="mb-0 fw-bold">Details Information</h5>
                </div>
                <hr />
                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6">
                        <label>Registration No. <small style="color: #a81818; font-weight: 600;">*</small> </label> <br />
                        @*<input type="text" placeholder="Type Registration No." name="RegNo" id="RegNo" required />*@
                        <div class="date-wrapper">
                            <span class="prefix">P1SA-</span>
                            <input name="RegNo" id="RegNo" class="styled-date" type="text" placeholder="YYMMDD" readonly required>

                            <div class="calendar-icon-wrapper">
                                <i class="fa-regular fa-calendar-days calendar-icon"></i>
                                <input type="date" class="real-date-input" id="hiddenDatePicker" onchange="formatAndDisplayDate(this.value)">
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-lg-6">
                        <label>Dept. /Section Inspected <small style="color: #a81818; font-weight: 600;">*</small> </label>
                        <div class="select-container">
                            <select id="DepartmentID" name="DepartmentID">
                                <option>-- Select Department --</option>
                                <option value="1">Molding</option>
                                <option value="2">Press</option>
                                <option value="3">Rotor</option>
                                <option value="4">Winding</option>
                                <option value="5">Circuit</option>
                            </select>
                        </div>
                       
                    </div>
                </div>



                <h5 class="mb-4 mt-4 fw-bold">Inspection Criterion / Findings</h5>
                <hr />
                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6">
                        <label>1. Work Practice / Standard / Safety</label> <br />
                        <input type="hidden" value="1" id="Find1" name="Find1" />
                        <textarea placeholder="Type text here..." name="Inpects1" id="Inpects1" rows="3" cols="40" required></textarea>
                    </div>

                    <div class="col-12 col-sm-12 col-lg-6">
                        <label>Countermeasures</label> <br />
                        <textarea placeholder="Type text here..." name="counter1" id="counter1" rows="3" cols="40"></textarea>
                    </div>
                </div>




                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6">
                        <label>2. Identification and status of the product or materials.</label> <br />
                        <input type="hidden" value="2" id="Find2" name="Find2" required />
                        <textarea placeholder="Type text here..." name="Inpects2" id="Inpects2" rows="3" cols="40"></textarea>
                    </div>

                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>Countermeasures</label> <br />
                        <textarea placeholder="Type text here..." name="counter2" id="counter2" rows="3" cols="40"></textarea>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>3. Condition and status of documents / records.</label> <br />
                        <input type="hidden" value="3" id="Find3" name="Find3" required />
                        <textarea placeholder="Type text here..." name="Inpects3" id="Inpects3" rows="3" cols="40"></textarea>
                    </div>

                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>Countermeasures</label> <br />
                        <textarea placeholder="Type text here..." name="counter3" id="counter3" rows="3" cols="40"></textarea>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>4. Record of ‘start-up process check’ and monthly inspection</label> <br />
                        <input type="hidden" value="4" id="Find4" name="Find4" required />
                        <textarea placeholder="Type text here..." name="Inpects4" id="Inpects4" rows="3" cols="40"></textarea>
                    </div>

                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>Countermeasures</label> <br />
                        <textarea placeholder="Type text here..." name="counter4" id="counter4" rows="3" cols="40"></textarea>
                    </div>
                </div>


                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>5. Calibration of equipment and jigs used for measurement or inspection.</label> <br />
                        <input type="hidden" value="5" id="Find5" name="Find5" required />
                        <textarea placeholder="Type text here..." name="Inpects5" id="Inpects5" rows="3" cols="40"></textarea>
                    </div>

                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>Countermeasures</label> <br />
                        <textarea placeholder="Type text here..." name="counter5" id="counter5" rows="3" cols="40"></textarea>
                    </div>
                </div>



                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>6. Countermeasure and implementation of previous quality and safety</label> <br />
                        <input type="hidden" value="6" id="Find5" name="Find6" required />
                        <textarea placeholder="Type text here..." name="Inpects6" id="Inpects6" rows="3" cols="40"></textarea>
                    </div>

                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <label>Countermeasures</label> <br />
                        <textarea placeholder="Type text here..." name="counter6" id="counter6" rows="3" cols="40"></textarea>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-12 col-lg-6 ">
                        <div class="form_group col-12 col-sm-12 ">
                            <label>Date Conducted </label> <br />
                            <input type="date" name="DateConduct" id="DateConduct" />
                        </div>

                    </div>
                    <div class="col-12 col-sm-12 col-lg-6">
               
                        <div class="form_group col-12 col-sm-12">
                            <label>Inspectors: </label> <br />
                            <input type="hidden" value="Melojeane Miclat" id="InspectorName"  />
                            <input type="text" placeholder="Input Inspectors" value="Melojeane Miclat"  disabled />
                        </div>
                    </div>
                </div>



            </div>
        </div>


        <hr />

        <div class="col-12 col-sm-12 col-lg-6" style="display: none;">
            <label>Input Inspectors <small style="color: #a81818; font-weight: 600;">*</small> </label>
            @*<div class="select-container">
                <select id="Employee_ID" name="Employee_ID">
                    <option>-- Select Inspector --</option>
                </select>
            </div>*@
            <div class="flex_align" >
                <div class="search-box" style="width: 70%;">
                    <input type="hidden" name="Employee_ID" id="Employee_ID">
                    <input type="text" placeholder="Type Name or ID no." name="EmployeeSearch" id="EmployeeSearch" autocomplete="off">
                    <div class="namesdisplay"></div>
                </div>
                <small>Include signature: </small>
                <input type="checkbox" name="IsSign" id="IsSign" />
            </div>

        </div>






        <div class="d-flex align-items-center justify-content-between">
            <div class="">

                <div class="form_group col-12 col-sm-12 ">
                    <label>Process Owner: </label> <br />
                    <div class="select-container">
                        <select id="ProcessID" name="ProcessID">
                            <option>-- Select Department --</option>
                            <option value="1">Molding</option>
                            <option value="2">Press</option>
                            <option value="3">Rotor</option>
                            <option value="4">Winding</option>
                            <option value="5">Circuit</option>
                        </select>
                    </div>
                </div>

            </div>
        </div>
    </form>

</section>






@*=================================================================================*@
@*=========================== OPEN SENDER LIST ==================================*@
@*=================================================================================*@
<div class="modal fade modal-lg" id="OpenSenderModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body modalwrap">
                <div class="custom_modal_header">
                    <h5>Select Recepient</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>

                <table>
                    <thead>
                        <tr>
                            <th style="width:50px;">Select</th>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Email Address</th>
                            <th style="width:60px;">Local</th>
                        </tr>
                    </thead>
                    <tbody id="recipientTable">
                    </tbody>
                </table>


                <div class="modal-footer">
                    <button class="btn-ok" id="btnOk">OK</button>
                </div>
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">
    let EmpID;
    let emailTable = [];
    let regisTable = [];
    let loadData = [];

    const fileInput = document.getElementById("fileInput");
    const fileList = document.getElementById("fileList");

    const addform = document.getElementById("addnewform");
    const resultBox = document.querySelector(".namesdisplay");


    const uploadBtn = document.getElementById("uploadBtn");

    let selectedFiles = [];

    // ================= LOAD DATA =======================
    const EmailsTablelist = async () => {
      let res = await FetchAuthenticate('@Url.Action("GetEmailList", "Patrol")', {});
       if (res && res.Success) {
           let selectManager = $("#ManagerSelect");
           let selectPIC = $("#PICselect");
           //selectManager.empty();
           //selectPIC.empty();

           emailTable = res.Data;
           var SetData = $("#recipientTable");

           $.each(emailTable, function (index, res) {
               var getdata = `<tr>
                               <td><input type="checkbox" class="emailCheck" value="${res.Email}"></td>
                               <td>${res.FirstName}</td>
                               <td>${res.LastName}</td>
                               <td>${res.Email}</td>
                               <td>${res.Local}</td>
                           </tr>`;
               SetData.append(getdata);

               selectManager.append('<option value="' + res.Email + '">' + res.FirstName + '</option>');
               selectPIC.append('<option value="' + res.Email + '">' + res.FirstName + '</option>');
           });


           // Add row click event
           $("#recipientTable tr").click(function (e) {
               // Prevent toggling when clicking directly on checkbox
               if (e.target.type !== 'checkbox') {
                   const checkbox = $(this).find(".emailCheck");
                   checkbox.prop("checked", !checkbox.prop("checked"));
               }
           });
      }
   }
    const RegistrationTable = async() => {
        let res = await FetchAuthenticate('@Url.Action("GetRegistrationNo", "Patrol")', {});
        if (res && res.Success) {
            regisTable = res.Data;
        }
    }
    const PopulateComboxInspector = async () => {
        Resetforms();
        let res = await FetchAuthenticate('@Url.Action("GetInspectorsByAdd", "Patrol")', {});
        if (res && res.Success) {
            loadData = res.Data;
        }
    }
    const Getuserinfo = async () => {
        const accessToken = localStorage.getItem('accessToken');
        const result = await FetchAuthenticate('/User/GetUserInformation', { accessToken });
        EmpID = result.Employee_ID;
    }
    // ================= OPEN MODAL ======================
    let buttonselect;
    const table = document.getElementById("recipientTable");
    const btnOk = document.getElementById("btnOk");

    btnOk.addEventListener("click", function () {
        const selectedEmails = document.getElementById("selectedEmails");
        const selectedCC = document.getElementById("selectedCC");
        let checked = document.querySelectorAll(".emailCheck:checked");
        let emails = [];
        checked.forEach(cb => emails.push(cb.value));

        if (buttonselect === "OpenSenders") {
            selectedEmails.value = emails.join("; ");
        } else if (buttonselect === "OpenCC") {
            selectedCC.value = emails.join("; ");
        }

        // ✅ Clear all checkboxes after OK
        document.querySelectorAll(".emailCheck").forEach(cb => cb.checked = false);


        $("#OpenSenderModal").modal('hide');
    });


    $("#OpenSenders").on('click', function (e) {
        e.preventDefault();
        buttonselect = this.id;
        $("#OpenSenderModal").modal('show');
    });
    $("#OpenCC").on('click', function (e) {
        e.preventDefault();
        buttonselect = this.id;
        $("#OpenSenderModal").modal('show');
    });


    addform.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Validate Excel file type before sending
        //let fileInput = document.querySelector('#ExcelFile');
        //let file = fileInput.files[0];
        //if (file) {
        //    if (!/\.(xls|xlsx)$/i.test(file.name)) {
        //        Swal.fire({
        //            icon: "error",
        //            text: "Only Excel files (.xls, .xlsx) are allowed",
        //            timer: 1500,
        //            showConfirmButton: false
        //        });
        //        return;
        //    }
        //}

        // Append form data
        let strfind = findingsJson(e.target);
        let finalformData = new FormData(e.target);
        finalformData.append('FindJson', strfind);

        // ✅ Add Sender and CC values
        let toEmails = document.querySelector("#selectedEmails").value;
        let ccEmails = document.querySelector("#selectedCC").value;


        finalformData.append("Senders", toEmails);
        finalformData.append("CC", ccEmails);

        // ✅ Add multiple attachments
        selectedFiles.forEach(file => {
            finalformData.append("Attachments", file);
        });

        // For registration validation, read RegNo from form data
        const finaldata = Object.fromEntries(finalformData);


        let reg = "P1SA-" + finaldata.RegNo;


        if (formValidation(reg)) {
            Swal.fire({
                icon: "error",
                text: "Registration No is already inserted",
                timer: 1500,
                showConfirmButton: false
            });

            $("#errorvalid").show();
            $("#labelguide").hide();
            $("#RegNo").css("border", "1px solid red");
            return;
        }


        //if (CheckAccountName()) {
        //    Swal.fire({
        //        icon: "error",
        //        text: "The name you entered was not found in the database.",
        //        timer: 1500,
        //        showConfirmButton: false
        //    });
        //    return;
        //}


        const savebtn = document.querySelector("#btnSave");
        savebtn.innerHTML = " <div class='buttonloading'></div> Generating PDF Please wait...";

        // Send form data with file to controller
        let res = await postData('@Url.Action("AddRegistration", "Patrol")', finalformData);
        if (res.StatusCode === 201) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                setTimeout(() => {
                    window.location.href = "/PC/Patrol/PatrolReport";
                }, 3000);
            });
        }

        Resetforms();
    });


    $("#sendEmail").on('click', async function (e) {
        e.preventDefault();
        // ✅ Add Sender and CC values
        let toEmails = document.querySelector("#selectedEmails").value;
        let ccEmails = document.querySelector("#selectedCC").value;

        if (toEmails === "" && ccEmails === "") {
            alert("Select A Recepient or CC ");
            return;
        }



        let finalformData = new FormData();
     


        finalformData.append("Senders", toEmails);
        finalformData.append("CC", ccEmails);

        const data = Object.fromEntries(finalformData);

        let res = await postData('@Url.Action("SendingEmails", "Patrol")', finalformData);
        console.log(res);

    });


    uploadBtn.addEventListener("click", () => fileInput.click());
    // =================== MULTIPLE UPLOAD FILES ==============================
    fileInput.addEventListener("change", function () {
        // Add new files to the array (avoid duplicates by name+size)
        for (let file of fileInput.files) {
            let exists = selectedFiles.some(f => f.name === file.name && f.size === file.size);
            if (!exists) {
                selectedFiles.push(file);
            }
        }
        renderFileList();
        fileInput.value = ""; // reset input to allow re-upload of same file
    });

    function renderFileList() {
        fileList.innerHTML = "";
        selectedFiles.forEach((file, index) => {
            const div = document.createElement("div");
            div.classList.add("pdf-container");

            const pdfBtn = document.createElement("button");
            pdfBtn.classList.add("open-pdf-btn");
            pdfBtn.innerHTML = `<i class="fa-solid fa-file-pdf"></i> ${file.name}`;
            pdfBtn.onclick = () => {
                const fileURL = URL.createObjectURL(file);
                window.open(fileURL, "_blank");
            };

            const removeBtn = document.createElement("button");
            removeBtn.classList.add("remove-btn");
            removeBtn.innerHTML = `<i class="fa-regular fa-circle-xmark"></i>`;
            removeBtn.onclick = () => {
                selectedFiles.splice(index, 1);
                renderFileList();
            };

            div.appendChild(pdfBtn);
            div.appendChild(removeBtn);
            fileList.appendChild(div);
        });
    }



    // ================== FORM CONTROLS INPUT ==================================
    const Resetforms = () => {
        $("#RegNo").css("border", "1px solid #A5A1AA");
        $("#errorvalid").hide();
        $("#labelguide").show();
    };

    const formValidation = (regno) => {
        const checkexist = regisTable.find(n => n.RegNo === regno);
        return checkexist;
    };
    function triggerDatePicker() {
        document.getElementById("hiddenDatePicker").click();
    }
    function formatAndDisplayDate(value) {
        if (!value) return;
        const date = new Date(value);
        const yy = String(date.getFullYear()).slice(-2);
        const mm = String(date.getMonth() + 1).padStart(2, '0');
        const dd = String(date.getDate()).padStart(2, '0');
        document.getElementById('RegNo').value = `${yy}${mm}${dd}`;
    }
    // CHECKS IF THE USER HAS A ACCOUNT TO THE SYSTEM
    const CheckAccountName = () => {
        let gettext = $("#EmployeeSearch").val();
        var exists = loadData.some(u => u.Fullname === gettext);

        if (!exists) {   // means no match found
            return true;
        }
        return false;
    }

    const findingsJson = (e) => {
        let formData = new FormData(e);
        const data = Object.fromEntries(formData);

        const findings = [];

        for (let i = 1; i <= 6; i++) {
            findings.push({
                RegNo: data.RegNo,
                FindID: data[`Find${i}`],
                FindDescription: data[`Inpects${i}`],
                Countermeasure: data[`counter${i}`]
            });
        }

        return JSON.stringify(findings);
    };


    // ============== INPUT SEARCH EMPLOYEE NAME WHEN TYPE =======================
    $("#EmployeeSearch").keyup(function () {
        let result = [];
        let input = this.value;

        if (input.length > 0) {
            result = loadData.filter((item) => {
                return item.Fullname?.toLowerCase().includes(input.toLowerCase()) ||
                    (item.Employee_ID?.toLowerCase() || '').includes(input.toLowerCase());
            });

            if (result.length > 0) {
                resultBox.style.display = 'block';
                display(result); // assumes display() handles array of objects
            } else {
                resultBox.style.display = 'block';
                resultBox.innerHTML = '<div style="padding: 5px; color: #999;">No search found</div>';
            }
        } else {
            resultBox.style.display = 'none';
            resultBox.innerHTML = ''; // clear the previous results or message
        }
    });

    function display(result) {
        const content = result.map((list) => {
            return `<li onclick="selectinput(this)" data-id="${list.Employee_ID}">${list.Fullname}</li>`;
        });

        resultBox.innerHTML = "<ul>" + content.join('') + "</ul>";
    }

    function selectinput(list) {
        const employeeId = list.getAttribute("data-id");
        employeeID = employeeId;
        $("#Employee_ID").val(employeeId);
        $("#EmployeeSearch").val(list.innerHTML);
        resultBox.innerHTML = '';
        resultBox.style.display = 'none';
    }




    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            //$("#errorvalid").hide();
            //$("#currentdatetime").text(Month + "  " + currentYear);

            const [email, Account, Register, User] = await Promise.all([
                EmailsTablelist(),
                PopulateComboxInspector(),
                RegistrationTable(),
                Getuserinfo()
            ]);

        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>