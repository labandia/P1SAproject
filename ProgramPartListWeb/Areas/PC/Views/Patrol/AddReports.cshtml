
@{
    ViewBag.Title = "AddReports";
    Layout = "~/Areas/PC/Views/Shared/_PatrolLayout.cshtml";
}


<form method="post" enctype="multipart/form-data" class="formcontainer" id="addnewform" autocomplete="off">
    <div class="row">
        <div class="col-12">
            <div class="d-flex align-items-center gap-4">
                <a href="/PC/Patrol/PatrolReport"><i class="fa-solid fa-arrow-left"></i></a>
                <h5 class="mb-0 fw-bold">Details Information</h5>
            </div>
            <hr />
            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6">
                    <label>Registration No. <small style="color: #a81818; font-weight: 600;">*</small> </label> <br />
                    @*<input type="text" placeholder="Type Registration No." name="RegNo" id="RegNo" required />*@
                    <div class="date-wrapper">
                        <span class="prefix">P1SA-</span>
                        <input name="RegNo" id="RegNo" class="styled-date" type="text" placeholder="YYMMDD" readonly required>

                        <div class="calendar-icon-wrapper">
                            <i class="fa-regular fa-calendar-days calendar-icon"></i>
                            <input type="date" class="real-date-input" id="hiddenDatePicker" onchange="formatAndDisplayDate(this.value)">
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-lg-6">
                    <label>Input Inspectors <small style="color: #a81818; font-weight: 600;">*</small> </label>
                    @*<div class="select-container">
                            <select id="Employee_ID" name="Employee_ID">
                                <option>-- Select Inspector --</option>
                            </select>
                        </div>*@
                    <div class="flex_align">
                        <div class="search-box" style="width: 70%;">
                            <input type="hidden" name="Employee_ID" id="Employee_ID">
                            <input type="text" placeholder="Type Name or ID no." name="EmployeeSearch" id="EmployeeSearch" autocomplete="off">
                            <div class="namesdisplay"></div>
                        </div>
                        <small>Include signature: </small>
                        <input type="checkbox" name="IsSign" id="IsSign" />
                    </div>

                </div>
            </div>



            <h5 class="mb-4 mt-4 fw-bold">Inspection Criterion / Findings</h5>
            <hr />
            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6">
                    <label>1. Work Practice / Standard / Safety</label> <br />
                    <input type="hidden" value="1" id="Find1" name="Find1" />
                    <textarea placeholder="Type text here..." name="Inpects1" id="Inpects1" rows="3" cols="40" required></textarea>
                </div>

                <div class="col-12 col-sm-12 col-lg-6">
                    <label>Countermeasures</label> <br />
                    <textarea placeholder="Type text here..." name="counter1" id="counter1" rows="3" cols="40"></textarea>
                </div>
            </div>




            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6">
                    <label>2. Identification and status of the product or materials.</label> <br />
                    <input type="hidden" value="2" id="Find2" name="Find2" required />
                    <textarea placeholder="Type text here..." name="Inpects2" id="Inpects2" rows="3" cols="40"></textarea>
                </div>

                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>Countermeasures</label> <br />
                    <textarea placeholder="Type text here..." name="counter2" id="counter2" rows="3" cols="40"></textarea>
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>3. Condition and status of documents / records.</label> <br />
                    <input type="hidden" value="3" id="Find3" name="Find3" required />
                    <textarea placeholder="Type text here..." name="Inpects3" id="Inpects3" rows="3" cols="40"></textarea>
                </div>

                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>Countermeasures</label> <br />
                    <textarea placeholder="Type text here..." name="counter3" id="counter3" rows="3" cols="40"></textarea>
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>4. Record of ‘start-up process check’ and monthly inspection</label> <br />
                    <input type="hidden" value="4" id="Find4" name="Find4" required />
                    <textarea placeholder="Type text here..." name="Inpects4" id="Inpects4" rows="3" cols="40"></textarea>
                </div>

                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>Countermeasures</label> <br />
                    <textarea placeholder="Type text here..." name="counter4" id="counter4" rows="3" cols="40"></textarea>
                </div>
            </div>


            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>5. Calibration of equipment and jigs used for measurement or inspection.</label> <br />
                    <input type="hidden" value="5" id="Find5" name="Find5" required />
                    <textarea placeholder="Type text here..." name="Inpects5" id="Inpects5" rows="3" cols="40"></textarea>
                </div>

                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>Countermeasures</label> <br />
                    <textarea placeholder="Type text here..." name="counter5" id="counter5" rows="3" cols="40"></textarea>
                </div>
            </div>



            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>6. Countermeasure and implementation of previous quality and safety</label> <br />
                    <input type="hidden" value="6" id="Find5" name="Find6" required />
                    <textarea placeholder="Type text here..." name="Inpects6" id="Inpects6" rows="3" cols="40"></textarea>
                </div>

                <div class="col-12 col-sm-12 col-lg-6 ">
                    <label>Countermeasures</label> <br />
                    <textarea placeholder="Type text here..." name="counter6" id="counter6" rows="3" cols="40"></textarea>
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-sm-12 col-lg-6 ">
                    <div class="form_group col-12 col-sm-12 ">
                        <label>Managers </label> <br />
                        <input type="text" placeholder="type person in charge" name="Manager" id="Manager" />
                    </div>


                    <div class="form_group col-12 col-sm-12 ">
                        <label>Managers (Comments): </label> <br />
                        <textarea placeholder="Type text here..." name="Manager_Comments" id="Manager_Comments" rows="9" cols="40"></textarea>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-lg-6">
                    <div class="form_group col-12 col-sm-12 ">
                        <label>Date Conducted </label> <br />
                        <input type="date" name="DateConduct" id="DateConduct" />
                    </div>

                    <div class="form_group col-12 col-sm-12 ">
                        <label>Person In Charge </label> <br />
                        <input type="text" placeholder="type person in charge" name="PIC" id="PIC" />
                    </div>


                    <div class="form_group col-12 col-sm-12 ">
                        <label>PIC (Comments): </label> <br />
                        <textarea placeholder="Type text here..." name="PIC_Comments" id="PIC_Comments" rows="5" cols="40"></textarea>
                    </div>
                </div>
            </div>



        </div>
    </div>

    <div class="row">
        <div class="col-12 col-sm-12 col-lg-6">
            <label>Upload Counter Measures File:</label> <br />
            <input type="file" name="ExcelFile" id="ExcelFile" accept=".xlsx,.xls" class="form-control" />
            <small class="text-muted">Only .xlsx or .xls files are allowed</small>
        </div>

        <div class="col-12 col-sm-12 col-lg-6 ">
            <label>Send Notification To: </label> <br />
            <div class="select-container">
                <select id="Sendto" name="Sendto">
                <option value="jaye.labandia@sanyodenki.com">Jaye Labandia</option>
                </select>
            </div>
            
        </div>
    </div>

    <hr />

    <div class="d-flex align-items-center justify-content-between">
        <span id="errorvalid" class="text-danger">* Registration No is already inserted</span>
        <span id="labelguide">All fields marked with (<small style="color: #a81818; font-weight: 600;">*</small>) must be filled out</span>
        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
    </div>
</form>



<script type="text/javascript">
    let regisTable = [];
    let loadData = [];

    const addform = document.getElementById("addnewform");
    const resultBox = document.querySelector(".namesdisplay");

    function triggerDatePicker() {
        document.getElementById("hiddenDatePicker").click();
    }

    function formatAndDisplayDate(value) {
        if (!value) return;
        const date = new Date(value);
        const yy = String(date.getFullYear()).slice(-2);
        const mm = String(date.getMonth() + 1).padStart(2, '0');
        const dd = String(date.getDate()).padStart(2, '0');
        document.getElementById('RegNo').value = `${yy}${mm}${dd}`;
    }
   

    const RegistrationTable = async() => {
        let res = await FetchAuthenticate('@Url.Action("GetRegistrationNo", "Patrol")', {});
        if (res && res.Success) {
            regisTable = res.Data;
        }
    }

    const PopulateComboxInspector = async () => {
        Resetforms();
        let res = await FetchAuthenticate('@Url.Action("GetInspectorsByAdd", "Patrol")', {});
        if (res && res.Success) {
            loadData = res.Data;
        }
    }

    // RESETS FORM
    const Resetforms = () => {
        //Resets the Form
        $("#RegNo").css("border", "1px solid #A5A1AA");
        $("#errorvalid").hide();
        $("#labelguide").show();
    };

    // CHECKS IF THE REGISTRATION NUMBER EXIST
    const formValidation = (regno) => {
        const checkexist = regisTable.find(n => n.RegNo === regno);
        return checkexist;
    };

    // CHECKS IF THE USER HAS A ACCOUNT TO THE SYSTEM 
    const CheckAccountName = () => {
        let gettext = $("#EmployeeSearch").val();
        var exists = loadData.some(u => u.Fullname === gettext);

        if (!exists) {   // means no match found
            return true;
        }
        return false;
    }

    const findingsJson = (e) => {
        let formData = new FormData(e);
        const data = Object.fromEntries(formData);

        const findings = [];

        for (let i = 1; i <= 6; i++) {
            findings.push({
                RegNo: data.RegNo,
                FindID: data[`Find${i}`],
                FindDescription: data[`Inpects${i}`],
                Countermeasure: data[`counter${i}`]
            });
        }

        return JSON.stringify(findings);
    };

    

    addform.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Validate Excel file type before sending
        let fileInput = document.querySelector('#ExcelFile');
        let file = fileInput.files[0];
        if (file) {
            if (!/\.(xls|xlsx)$/i.test(file.name)) {
                Swal.fire({
                    icon: "error",
                    text: "Only Excel files (.xls, .xlsx) are allowed",
                    timer: 1500,
                    showConfirmButton: false
                });
                return;
            }
        }

        // Append form data
        let strfind = findingsJson(e.target);
        let finalformData = new FormData(e.target);
        finalformData.append('FindJson', strfind);

        // For registration validation, read RegNo from form data
        const finaldata = Object.fromEntries(finalformData);

        let reg = "P1SA-" + finaldata.RegNo;
        if (formValidation(reg)) {
            Swal.fire({
                icon: "error",
                text: "Registration No is already inserted",
                timer: 1500,
                showConfirmButton: false
            });

            $("#errorvalid").show();
            $("#labelguide").hide();
            $("#RegNo").css("border", "1px solid red");
            return;
        }


        if (CheckAccountName()) {
            Swal.fire({
                icon: "error",
                text: "The name you entered was not found in the database.",
                timer: 1500,
                showConfirmButton: false
            });
            return;
        }



        const savebtn = document.querySelector("#btnSave");
        savebtn.innerHTML = " <div class='buttonloading'></div> Generating PDF Please wait...";

        // Send form data with file to controller
        let res = await postData('@Url.Action("AddRegistration", "Patrol")', finalformData);
        if (res.StatusCode === 201) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                setTimeout(() => {
                    window.location.href = "/PC/Patrol/PatrolReport";
                }, 3000);
            });
        }

        Resetforms();
    });



    // INPUT SEARCH EMPLOYEE NAME WHEN TYPE
    $("#EmployeeSearch").keyup(function () {
        let result = [];
        let input = this.value;

        if (input.length > 0) {
            result = loadData.filter((item) => {
                return item.Fullname?.toLowerCase().includes(input.toLowerCase()) ||
                    (item.Employee_ID?.toLowerCase() || '').includes(input.toLowerCase());
            });

            if (result.length > 0) {
                resultBox.style.display = 'block';
                display(result); // assumes display() handles array of objects
            } else {
                resultBox.style.display = 'block';
                resultBox.innerHTML = '<div style="padding: 5px; color: #999;">No search found</div>';
            }
        } else {
            resultBox.style.display = 'none';
            resultBox.innerHTML = ''; // clear the previous results or message
        }
    });

    function display(result) {
        const content = result.map((list) => {
            return `<li onclick="selectinput(this)" data-id="${list.Employee_ID}">${list.Fullname}</li>`;
        });

        resultBox.innerHTML = "<ul>" + content.join('') + "</ul>";
    }

    function selectinput(list) {
        const employeeId = list.getAttribute("data-id");
        employeeID = employeeId;
        $("#Employee_ID").val(employeeId);
        $("#EmployeeSearch").val(list.innerHTML);
        resultBox.innerHTML = '';
        resultBox.style.display = 'none';
    }

  


    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            $("#errorvalid").hide();
            //$("#currentdatetime").text(Month + "  " + currentYear);

            const [combo, regis] = await Promise.all([
                PopulateComboxInspector(),
                RegistrationTable()
            ]);

        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>