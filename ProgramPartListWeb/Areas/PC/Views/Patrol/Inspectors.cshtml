
@{
    ViewBag.Title = "Inspectors";
    Layout = "~/Areas/PC/Views/Shared/_PatrolLayout.cshtml";
}



<header class="InspectHead">
    <div class="Inputcontainer">
        <i class="fa-solid fa-magnifying-glass"></i>
        <input type="text" placeholder="Search here ... " id="searchbox" />
        <div class="line"></div>
    </div>
    <button id="Showadd" type="button"><i class="fa-solid fa-user-secret"></i> Add New</button>
</header>


<div class="MainTable">
    <table>
        <thead>
            <tr>
                <th style="text-align: left; padding-left: 1.5em;"><i class="fa-solid fa-user-secret"></i>  <span style="margin-left: .5em;">Inspector</span> </th>
                <th> <i class="fa-regular fa-calendar-days"></i> <span style="margin-left: .5em;">Date Qualified</span></th>
                <th> <i class="fa-solid fa-file-contract"></i> <span style="margin-left: .5em;">Registration No.</span> </th>
                <th> <i class="fa-regular fa-comment-dots"></i> <span style="margin-left: .5em;">Remarks</span>  </th>
                <th> <i class="fa-regular fa-square-check"></i> <span style="margin-left: .5em;">Approval</span>  </th>
                <th> <i class="fa-solid fa-bolt"></i> <span style="margin-left: .5em;">Action</span> </th>
                @*<th>Action</th>*@
            </tr>
        </thead>
        <tbody id="MasterlistData">
        </tbody>
    </table>

    <div class="MasterlistWrap_footer">
        <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>

        <div id="MastertableContainer" class="paginationPartlocal"></div>
    </div>
</div>


@*=========================== ADD NEW INSPECTORS ==================================*@
<div class="modal fade modal-l" id="AddProductModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>Add Inspectors</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="addformcontainer" id="addnewform" autocomplete="off">
                    <div class="row">
                        @*<div class="form_group col-12 col-sm-12 col-lg-6 mb-2">
                                <label>Employee ID </label> <br />
                                <input type="text" placeholder="type Employee ID" name="Employee_ID" id="Employee_ID" required />
                                <small class="text-danger" id="Noemployee"></small>
                            </div>*@
                        <div class="form_group col-12 col-sm-12 col-lg-12 mb-2">
                            <label>Employee Name  </label> <br />
                            @*<input type="text" placeholder="N/A" name="Fullname" id="Fullname" />*@
                            <div class="search-box">
                                <input type="hidden" name="Employee_ID" id="Employee_ID">
                                <input type="text" placeholder="Type Name or ID no." name="EmployeeSearch" id="EmployeeSearch">
                                <div class="namesdisplay"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form_group col-12 col-sm-12">
                        <label>OJT Registration No.  </label>
                        <input type="text" placeholder="type Ojt registration No." name="OJTRegistration" id="OJTRegistration" required />
                    </div>

                    <div class="form_group col-12 col-sm-12 ">
                        <label>Date Qualified </label> <br />
                        <input type="date" placeholder="Select Date Qualified" name="DateQualified" id="DateQualified" required />
                    </div>

                    <div class="form_group col-12 col-sm-12">
                        <label>Remarks  </label> <br />
                        <textarea placeholder="Type any remarks" name="Remarks" id="Remarks" rows="3" cols="50" required></textarea>
                    </div>



                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <small id="Errormessage">Fill up all the input fields</small>
                        <button id="btnSave"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>
@*=================================================================================*@
@*=========================== EDIT INSPECTORS =====================================*@
@*=================================================================================*@
<div class="modal fade modal-l" id="EditInpectorModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>Edit Inspectors</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="addformcontainer" id="editnewform" autocomplete="off">
                    <div class="row">
                        <input type="hidden" name="EditInspectID" id="EditInspectID" />
                        <input type="hidden" placeholder="type Employee ID" name="EditEmployee_ID" id="EditEmployee_ID" required />
                        <div class="form_group col-12 col-sm-12 col-lg-12 mb-2">
                            <label>Employee Name  </label> <br />
                            <input type="text" placeholder="N/A" name="EditFullName" id="EditFullName" disabled />
                        </div>
                    </div>
                    <div class="form_group col-12 col-sm-12">
                        <label>OJT Registration No.  </label>
                        <input type="text" placeholder="type Ojt registration No." name="EditOJTRegistration" id="EditOJTRegistration" required />
                    </div>

                    <div class="form_group col-12 col-sm-12 ">
                        <label>Date Qualified </label> <br />
                        <input type="date" placeholder="Select Date Qualified" name="EditDateQualified" id="EditDateQualified" required />
                    </div>

                    <div class="form_group col-12 col-sm-12">
                        <label>Remarks  </label> <br />
                        <textarea placeholder="Type any remarks" name="EditRemarks" id="EditRemarks" rows="3" cols="50" required></textarea>
                    </div>



                    <div class="d-flex justify-content-end mt-4">
                        <button id="btnSave"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>
@*=================================================================================*@


<script src="~/Scripts/Cryptojs.min.js"></script>
<script src="~/Scripts/Utilities.js"></script>
<script src="~/Scripts/sweetalert2.min.js"></script>
<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
    //const searchEmployee = document.getElementById("Employee_ID");
    const addmodal = document.getElementById("Showadd");
    let masterlist = [];
    let loadData = [];
    let employeeID;

    const resultBox = document.querySelector(".namesdisplay");
    const addforms = document.getElementById("addnewform");
    const editforms = document.getElementById("editnewform");

    //searchEmployee.addEventListener('input', async (e) => {
    //    const searchTerm = e.target.value;
    //    // Only search if user typed something
    //    if (searchTerm.trim() !== '') {
    //        let res = await FetchAuthenticate('/User/SearchEmployeeID', { empID: searchTerm });
    //        if (res.StatusCode === 200) {
    //            $("#Fullname").css("border", "1px solid green");
    //            $("#Fullname").val(res.Data.FullName);
    //            //$("#Noemployee").text("");
    //        } else {
    //            $("#Fullname").css("border", "1px solid red");
    //            $("#Fullname").val('');
    //            //$("#Noemployee").text("Employee ID Doesnt Exist *");
    //        }
    //    } else {
    //        $("#Noemployee").text("");
    //        $("#Fullname").css("border", "1px solid #A5A1AA");
    //    }

    //});

    // INPUT SEARCH EMPLOYEE NAME WHEN TYPE
    $("#EmployeeSearch").keyup(function () {
        let result = [];
        let input = this.value;

        if (input.length > 0) {
            result = loadData.filter((item) => {
                return item.Fullname.toLowerCase().includes(input.toLowerCase()) ||
                    item.EmployeeID.toLowerCase().includes(input.toLowerCase())
            });

            if (result.length > 0) {
                resultBox.style.display = 'block';
                display(result); // assumes display() handles array of objects
            } else {
                resultBox.style.display = 'none';
            }
        } else {
            resultBox.style.display = 'none';
        }
    });

    function display(result) {
        const content = result.map((list) => {
            return `<li onclick="selectinput(this)" data-id="${list.EmployeeID}">${list.Fullname}</li>`;
        });

        resultBox.innerHTML = "<ul>" + content.join('') + "</ul>";
    }

    function selectinput(list) {
        const employeeId = list.getAttribute("data-id");
        employeeID = employeeId;
        $("#Employee_ID").val(employeeId);
        $("#EmployeeSearch").val(list.innerHTML);
        resultBox.innerHTML = '';
        resultBox.style.display = 'none';
    }


    addmodal.addEventListener('click', (e) => {
        e.preventDefault();
        $("#AddProductModal").modal('show');
    });

    addforms.addEventListener('submit', async(e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        var data = Object.fromEntries(formData);

        const CheckExist = masterlist.some(item => item.Employee_ID === employeeID);

        if (CheckExist) {
            $("#Errormessage").show();
            //$("#Errormessage").('red');
            $("#Errormessage").text("Employee ID is already exist");
            return;
        }

        let res = await postData('@Url.Action("AddInspectors", "Patrol")', formData);
        if (res.StatusCode === 201) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                //InspectTable();
                $("#AddProductModal").modal('hide');
            });
        }

        $("#Errormessage").hide();
    });

    editforms.addEventListener('submit', async(e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        var data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("EditInspectors", "Patrol")', formData);
        if (res && res.Success) {
            Swal.fire({
                title: "Success",
                text: res.Message,
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                InspectTable();
                $("#EditInpectorModal").modal("hide");
            });
        }
    });


    const InspectTable = async() => {
        let res = await FetchAuthenticate('@Url.Action("GetQualifiedInspector", "Patrol")', {});
        if (res && res.Success) {
            masterlist = res.Data;
            MasterlistPagination(masterlist, 'MasterlistData', 'MastertableContainer', 50, 5);
        }
    }

    const GetEmployeeData = async() => {
        let res = await FetchAuthenticate('@Url.Action("GetEmployeelist", "Patrol")', {});
        if (res && res.Success) {
            loadData = res.Data;
        }
    }

    function MasterlistPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray];

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);
            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);
            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];
                const color = rowData.Color;

                const rowHtml = `
                    <tr class='row_${i} rowClick' id='editButton_${rowData.InspectID}'>
                        <td style='font-weight: 600; text-align: left; padding-left: 1em; color: #222;' data-cell="Part number">${capitalize(rowData.FullName)}</td>
                        <td data-cell="DateQualified">${rowData.DateQualified}</td>
                        <td data-cell="OJTRegistration">${rowData.OJTRegistration}</td>
                        <td data-cell="Remarks">${rowData.Remarks}</td>
                        <td data-cell="Approval">
                            <span class='${parseInt(rowData.Approval) === 1 ? "Complete" : "Incomplete"}'>
                                ${parseInt(rowData.Approval) === 1 ? "Approval" : "Pending"}
                            </span>
                        </td>
                        <td data-cell="Menu">
                            <button style='padding: .3em .7em;' type='button' class='showmenu' id='showmenu_${rowData.InspectID}'>
                                <i class="fa-solid fa-bars"></i>
                            </button>
                            <div class="dropdown-menu" id="menu_${rowData.InspectID}">
                                <ul>
                                    <li><a href="#" class="dropdown-item" id="approve_${rowData.InspectID}">Approve</a></li>
                                    <li><a href="#" class="dropdown-item" id="disapprove_${rowData.InspectID}">Dissaproved</a></li>
                                    <li><a href="#" class="dropdown-item" id="edit_${rowData.InspectID}">Edit</a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                `;
                tableBody.innerHTML += rowHtml;
            }

            $('.dropdown-menu').removeClass('show').hide();
            $("#pagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                <i class="fa-solid fa-backward"></i>
            </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                <i class="fa-solid fa-forward"></i>
            </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // Fix: Use closest('td') instead of siblings()
        $(document).off('click', '.showmenu').on('click', '.showmenu', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var menu = $(this).closest('td').find('.dropdown-menu');
            if (menu.hasClass('show')) {
                menu.removeClass('show').hide();
            } else {
                $('.dropdown-menu').removeClass('show').hide();
                menu.addClass('show').show();
            }
        });


        $(document).off('click.dropdown').on('click.dropdown', function (e) {
            if (!$(e.target).closest('.dropdown-menu').length && !$(e.target).closest('.showmenu').length) {
                $('.dropdown-menu').removeClass('show').hide();
            }
        })

        $(document).off('click', '.dropdown-item').on('click', '.dropdown-item', async function (e) {
            e.preventDefault();
            let formData = new FormData();
            const itemId = $(this).attr('id');
            const rowIndex = itemId.split('_')[1];
            const dropdown = $(`#menu_${rowIndex}`);
            const action = itemId.split('_')[0];

            switch (action) {
                case 'edit':
                    const result = dataArray.find(p => p.InspectID == rowIndex);
                    if (result) {
                        let strDate = changeformatDate(result.DateQualified);
                        $("#EditInspectID").val(result.InspectID);
                        $("#EditEmployee_ID").val(result.Employee_ID);
                        $("#EditOJTRegistration").val(result.OJTRegistration);
                        $("#EditFullName").val(result.FullName);
                        $("#EditRemarks").val(result.Remarks);
                        $("#EditDateQualified").val(strDate);
                        $("#EditInpectorModal").modal("show");
                    }
                    dropdown.fadeOut(100).removeClass('show');
                    break;

                case 'approve':
                case 'disapprove':
                    formData.append('ID', rowIndex);
                    formData.append('stats', action === 'approve' ? 1 : 0);
                    let res = await postData('@Url.Action("ChangeApprovalInspect", "Patrol")', formData);
                    if (res && res.Success) {
                        InspectTable(); // Assumes re-rendering table
                        console.log("Update Complete");
                    }
                    dropdown.fadeOut(100).removeClass('show');
                    break;
            }
        });

        const searchTable = () => {
            const query = $('#searchbox').val().toLowerCase();
            filteredData = dataArray.filter(item =>
                item.FullName.toLowerCase().includes(query) ||
                item.OJTRegistration.toLowerCase().includes(query)
            );
            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        $('#searchbox').on('input', searchTable);

        window.changePage = changePage;
        renderTable(currentPage);
        renderPagination();
    }


    function changeformatDate(change) {
        let parts = change.split("/"); // ["02", "18", "2024"]
        // Convert to YYYY-MM-DD
        let formattedDate = `${parts[2]}-${parts[0]}-${parts[1]}`;
        return formattedDate;
    }

    function capitalize(str) {
        return str.split(' ').map(word => {
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }).join(' ');
    }


    InspectTable();
    GetEmployeeData();
</script>