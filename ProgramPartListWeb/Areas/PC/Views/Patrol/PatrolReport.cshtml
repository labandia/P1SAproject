
@{
    ViewBag.Title = "PatrolReport";
    Layout = "~/Areas/PC/Views/Shared/_PatrolLayout.cshtml";
}


<header class="InspectHead flex_space">
    <div class="flex_align">
        <div class="Inputcontainer">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input type="text" placeholder="Search here ... " id="searchbox" autocomplete="off" />
            <div class="line"></div>
        </div>

        <div class="flex_align">
            <i class="fa-solid fa-file-pdf "></i>
            <small>PDF file</small>
            <i class="fa-solid fa-file-excel text-success"></i>
            <small>Excel file</small>
            <i class="fa-solid fa-square-xmark text-danger"></i>
            <small>No Attachement files</small>
        </div>
    </div>
    

   
    <button id="Showadd" class="primarybtn" type="button"><i class="fa-solid fa-file-circle-plus"></i> Add New</button>
</header>

<div class="MainTable">
    <table>
        <thead>
            <tr>
                <th><i class="fa-solid fa-file-contract"></i> <span style="margin-left: .5em;">Registration No.</span></th>
                <th style="text-align: left; padding-left: 1.5em;"><i class="fa-solid fa-user-secret"></i>  <span style="margin-left: .5em;">Inspector</span> </th>
                <th><i class="fa-regular fa-building"></i> <span style="margin-left: .5em;">Section</span> </th>
                <th><i class="fa-regular fa-user"></i> <span style="margin-left: .5em;">PIC</span></th>
                <th><i class="fa-regular fa-calendar"></i> <span style="margin-left: .5em;">Date Conducted</span> </th>
                <th> <i class="fa-regular fa-file-lines"></i> <span style="margin-left: .5em;">File Attached</span></th>
                <th> <i class="fa-regular fa-file-lines"></i> <span style="margin-left: .5em;">CounterMeasure</span></th>
                <th id="hiddenColumn"> <i class="fa-solid fa-bolt"></i> <span style="margin-left: .5em;">Delete</span> </th>
            </tr>
        </thead>
        <tbody id="MasterlistData">
           
        </tbody>
    </table>

    <div class="MasterlistWrap_footer">
        <span>Showing  <span id="pagecountID">-</span> to <span id="totalpageID">-</span> of  <span id="DatalengthID">-</span> Entries</span>
        <div id="MastertableContainer" class="paginationPartlocal flex_align"></div>
    </div>
</div>



<script type="text/javascript">
    let TableDisplay = $("#MasterlistData");
    const addmodal = document.getElementById("Showadd");
    let regisTable = [];
    let userRole;

    const RegistrationTable = async () => {
        loadingDisplay();
        Loadingsteps(async () => {
            let res = await FetchAuthenticate('@Url.Action("GetRegistrationNo", "Patrol")', {});
            if (res && res.Success) {
                regisTable = res.Data;
                TableDisplay.empty();
                MasterlistPagination(regisTable, 'MasterlistData', 'MastertableContainer', 50, 5);
            } else {
                const loadData = `<tr>
                  <td colspan='8'>
                      🔍 ${res.Message}
                  </td>
              </tr>`;

                TableDisplay.empty();
                TableDisplay.append(loadData);

            }
        });
    }
    const ActionRestrict = () => {
        userRole = localStorage.getItem("UserRole");
        if (userRole === "Leader" || userRole === "Users") {
            return false;
        }
    }


    addmodal.addEventListener('click', (e) => {
        e.preventDefault();
        //$("#AddProductModal").modal('show');
        window.location.href = "/PC/Patrol/AddReports";
    });


    function MasterlistPagination(dataArray, tableBodyId, paginationId, recordsPerPage = 7, visibleButtons = 5) {
        let currentPage = 1;
        let filteredData = [...dataArray]; // Make a copy for filtering

        const updatePaginationInfo = () => {
            const totalRecords = filteredData.length;
            const totalPages = Math.ceil(totalRecords / recordsPerPage);

            $("#totalpageID").text(totalPages);
            $("#DatalengthID").text(totalRecords);

            return totalPages;
        };

        const renderTable = (page) => {
            const totalPages = updatePaginationInfo();
            const startIndex = (page - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            const tableBody = document.getElementById(tableBodyId);
            tableBody.innerHTML = '';

            for (let i = startIndex; i < endIndex; i++) {
                const rowData = filteredData[i];
                let color;

                let usercontrol = (ActionRestrict() === false)
                    ? ``
                    : `<td data-cell="Delete" >
                            <div class='flex_center'>
                                <button  class='deleteData text-danger bg-white' id='deleteData_${rowData.RegNo}' ">
                                    <i class="fa-regular fa-trash-can"></i>
                                </button>
                            </div>
                    </td>`;

                let hasPDFfile = (rowData.Filepath != null && rowData.Filepath.trim() !== "") 
                            ? `<button class="open-pdf-btn" data-pdf-url="/Patrol/ViewPDF?strfilepath=${rowData.Filepath}">
                                  <i class="fa-solid fa-file-pdf"></i>
                                </button>`
                            : `<i class="fa-solid fa-square-xmark text-danger"></i>`;

                let hasExcelfile = (rowData.CounterPath != null && rowData.CounterPath.trim() !== "") 
                            ? `<button class="open-pdf-btn" data-pdf-url="/Patrol/ViewExcel?strfilepath=${encodeURIComponent(rowData.CounterPath)}">
                                    <i class="fa-solid fa-file-excel text-success"></i>
                                </button>`
                            : `<i class="fa-solid fa-square-xmark text-danger"></i>`;

                const rowHtml = `
                 <tr class='row_${i} editButton' id='editButton_${rowData.RegNo}'>
                     <td style='font-weight: 600; text-align: left; padding-left: 1.5em;' data-cell="RegNo">${rowData.RegNo}</td>
                     <td style='font-weight: 600; text-align: left; padding-left: 1.5em; color: #0c382ce8;' data-cell="Inspector">${rowData.FullName}</td>
                     <td data-cell="SectionName"><span class="Section">${rowData.SectionName}</span></td>
                     <td data-cell="PIC">${rowData.PIC}</td>
                     <td data-cell="DateConduct">${rowData.DateConduct}</td>
                     <td data-cell="Filepath" >
                        <div class='flex_center'>
                            ${hasPDFfile}
                        </div>   
                     </td>
                     <td data-cell="CounterPath" >
                       <div class='flex_center'>
                            ${hasExcelfile}
                       </div>   
                    </td>
                     ${usercontrol}
                 </tr>`;

                tableBody.innerHTML += rowHtml;
            }

            $("#pagecountID").text(currentPage);
        };

        const renderPagination = () => {
            const totalPages = updatePaginationInfo();
            const paginationContainer = document.getElementById(paginationId);
            paginationContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(visibleButtons / 2));
            let endPage = Math.min(totalPages, startPage + visibleButtons - 1);

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visibleButtons + 1);
            }

            if (totalPages <= visibleButtons) {
                startPage = 1;
                endPage = totalPages;
            }

            // Previous button
            paginationContainer.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                                       <i class="fa-solid fa-backward"></i>
                                   </button>`;

            for (let i = startPage; i <= endPage; i++) {
                paginationContainer.innerHTML += `<button class="${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            paginationContainer.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                                      <i class="fa-solid fa-forward"></i>
                                   </button>`;
        };

        const changePage = (page) => {
            if (page >= 1 && page <= updatePaginationInfo()) {
                currentPage = page;
                renderTable(currentPage);
                renderPagination();
            }
        };

        // Handle click event for edit button
        $(document).on('click', '.editButton', function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];
            window.location.href = "/PC/Patrol/PatrolReportDetails?Regno=" + rowIndex;
        });

        // Open PDF file in new tab when the paperclip button is clicked
        $(document).on('click', '.open-pdf-btn', function (e) {
            e.stopPropagation(); // Prevent triggering row click event
            const pdfUrl = $(this).data('pdf-url');
            if (pdfUrl) {
                window.open(pdfUrl, '_blank');
            }
        });




         //Handle click event for edit button
        $(document).on('click', '.deleteData',  function (e) {
            e.stopPropagation();
            const buttonId = $(this).attr('id');
            const rowIndex = buttonId.split('_')[1];


            let searchData = regisTable.filter(item => item.RegNo === rowIndex);
            Swal.fire({
                title: "Remove this data?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    let formdata = new FormData();
                    formdata.append('Registration', rowIndex);
                    formdata.append('Filepath', searchData[0].Filepath);

                    let res = await postData('@Url.Action("DeleteRegistration", "Patrol")', formdata);
                    if (res.StatusCode == 422) {
                         Swal.fire({
                             title: "Success",
                             text: res.Message,
                             icon: "success",
                             showConfirmButton: false,
                             timer: 1500
                         }).then(() => {
                             RegistrationTable();
                         });
                     }

                }
            });
        });



        // 🔍 Search functionality
        const searchTable = () => {
            const query = ($('#searchbox').val() || '').toLowerCase();

            filteredData = dataArray.filter(item =>
                item.RegNo.toLowerCase().includes(query)
            );

            currentPage = 1;
            renderTable(currentPage);
            renderPagination();
        };

        // Add event listener for search input
        $('#searchbox').on('input', searchTable);

        // Initialize table and pagination
        window.changePage = changePage;
        renderTable(currentPage);
        renderPagination();
    }

    function loadingDisplay() {
        TableDisplay.empty();
        var loadData = `<tr>
                        <td colspan='8'>
                            <div class='Loadercontainer'>
                                <span class="loader"></span>
                                <p id="loadingStepText">Fetching data from the database..</p>
                            </div>
                        </td>
                    </tr>`;
        TableDisplay.append(loadData);
    }

    function Loadingsteps(callback) {
        const steps = [
            "Fetching data from the database...",
            "Processing data...",
            "Finalizing table view..."
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            if (stepIndex < steps.length) {
                const stepText = document.getElementById("loadingStepText");
                if (stepText) stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }

   document.addEventListener("DOMContentLoaded", function () {
    // Delegate click events from the table body
    document.getElementById("MasterlistData").addEventListener("click", function (e) {
        const button = e.target.closest(".open-pdf-btn");
        if (button) {
            e.preventDefault();

            const fileUrl = button.getAttribute("data-pdf-url");

            if (!fileUrl) {
                alert("No file path provided.");
                return;
            }

            // Open file in a new tab/window
            window.open(fileUrl, "_blank");
        }
    });
});

    $(document).ready(() => {
        if (ActionRestrict() === false) {
            $('#Showadd').prop('disabled', true);
            $("#hiddenColumn").hide();
        }

        RegistrationTable();
    });

</script>
