
@{
    ViewBag.Title = "PatrolSchedule";
    Layout = "~/Areas/PC/Views/Shared/_PatrolLayout.cshtml";
}




<div class="row">
    <div class="col-3">
        <div class="Sched_container">
            <small style="font-weight: 600;">Selection Patrol Inspector :</small>
            <hr />
            <div class="EmployeeListContainer">
                <div class="Sched_list" id="Sched_list_container"></div>
            </div>
        </div>
    </div>
    <div class="col-9">
        <div class="d-flex align-items-center justify-content-between">
            <p id="DateShow" style="font-weight: 700;">Department :</p>


            <div class="d-flex align-items-center text-nowrap gap-2">
                <div class="select-container">
                    <select id="DepartmentID">
                        <option value="0">All</option>
                        <option value="1">Molding</option>
                        <option value="2">Press</option>
                        <option value="3">Rotor</option>
                        <option value="4">Winding</option>
                        <option value="5">Circuit</option>
                        <option value="6">Process Control</option>
                    </select>
                </div>

                <div class="Inputcontainer">
                    <i class="fa-solid fa-magnifying-glass"></i>
                    <input type="text" placeholder="Search here ... " id="searchbox" autocomplete="off" />
                    <div class="line"></div>
                </div>
            </div>
        </div>
        <div class="Calendar_container">
            <div id="calendar"></div>
        </div>
    </div>
</div>
@*=================================================================================*@
@*=========================== ADD NEW SCHEDULE LIST ===============================*@
@*=================================================================================*@
<div class="modal fade modal-l" id="AddScheduleModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>SET TASK SCHEDULE</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="addformcontainer" id="addnewform" autocomplete="off">
                    <div class="row">
                        <div class="form_group col-12 col-sm-12 col-lg-6 mb-2">
                            <input type="hidden" name="ScheduleID" id="ScheduleID" />
                            <input type="hidden" name="ScheduleDate" id="ScheduleDate" />
                            <input type="hidden" name="IsActive" id="IsActive" />

                        </div>
                        <div class="form_group col-12 col-sm-12  mb-2">
                            <label>Process Set </label> <br />
                            <select class="form-control" id="ProcessID" name="ProcessID">
                            </select>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end mt-4">
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

@*=================================================================================*@
@*========================= CHANGE OR REMOVE SCHEDULE LIST ========================*@
@*=================================================================================*@
<div class="modal fade modal-l" id="EditScheduleModal" tabindex="-1" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-body">
                <div class="custom_modal_header">
                    <h5>CHANGE TASK</h5>

                    <button type="button" class="btn btn-light  close" data-bs-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>


                <form method="post" enctype="multipart/form-data" class="addformcontainer" id="editnewform" autocomplete="off">
                    <div class="row">
                        <div class="form_group col-12 col-sm-12 col-lg-6 mb-2">
                            <input type="hidden" name="EditScheduleID" id="EditScheduleID" />
                            <input type="hidden" name="EditScheduleDate" id="EditScheduleDate" />
                            <input type="hidden" name="EditIsActive" id="EditIsActive" />
                        </div>
                        <div class="form_group col-12 col-sm-12  mb-2">
                            <select class="form-control" id="EditProcessID" name="EditProcessID">
                            </select>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end mt-4 gap-4">
                        <button id="btnRemove" class="deletebtn"><i class="fa-regular fa-floppy-disk"></i> Remove</button>
                        <button id="btnSave" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i> Save change</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>




<script src="~/Scripts/fullcalendar@6.1.17/index.global.min.js"></script>
<script type="text/javascript">
    let employVal;
    let DepartID;
    let userRole;
    let TableDisplay = $("#Sched_list_container");

    const addform = document.getElementById("addnewform");
    const editform = document.getElementById("editnewform");
    const removebtn = document.querySelector('.deletebtn');

    const PopulateComboxInspector = async (searchText = "") => {
        loadingDisplay();

        Loadingsteps(async () => {
            let filterValue = $("#DepartmentID").val();

            let res = await FetchAuthenticate('@Url.Action("GetInpectsByApproval", "Patrol")', {});
            if (res && res.Success) {
                     let filteredData = res.Data;
                     TableDisplay.empty(); // Removing the Loading Display
                     if (parseInt(filterValue) !== 0) {
                         filteredData = filteredData.filter(res => res.Department_ID === parseInt(filterValue));
                     }

                     if (searchText) {
                         const lowerSearch = searchText.toLowerCase();
                         filteredData = filteredData.filter(res =>
                             res.FullName.toLowerCase().includes(lowerSearch)
                         );
                     }

                     if (filteredData.length === 0) {
                         TableDisplay.html(`<p>No Patrol data found.</p>`);
                         return;
                     }


                     $.each(filteredData, function (index, res) {
                         let Depname = DepartmentName(parseInt(res.Department_ID));
                         let color;

                         if (res.Department_ID === 1) {
                             color = "rgb(100, 50, 9)";
                         } else if (res.Department_ID === 2) {
                             color = "rgb(100, 30, 9)";
                         } else if (res.Department_ID === 3) {
                             color = "rgb(9, 45, 100)";
                         } else if (res.Department_ID === 4) {
                             color = "rgb(9, 71, 100)";
                         } else if (res.Department_ID === 5) {
                             color = "rgb(68, 57, 5)";
                         } else {
                             color = "rgb(33, 9, 100)";
                         }


                         const getdata = `
                             <div class="SchedCard flex_align"
                                 id="SchedCard_${res.Employee_ID}"
                                 data-dept="${res.Department_ID}"
                                 data-emp="${res.Employee_ID}"
                                 data-name="${res.FullName}">
                                 <div class="d-flex align-items-center gap-3">
                                      <i class="fa-regular fa-user"></i>
                                     <div>
                                         <span>${res.FullName}</span>
                                         <p style='color: ${color}'>${Depname}</p>
                                     </div>
                                 </div>
                             </div>`;
                         TableDisplay.append(getdata);
                     });



                     // Attach click event once
                     $(document).off('click', '.SchedCard').on('click', '.SchedCard', function (e) {
                         e.stopPropagation();

                         $('.SchedCard').removeClass('activeSched'); // remove previous selection
                         $(this).addClass('activeSched'); // mark current one

                         DepartID = $(this).data('dept');
                         employVal = $(this).data('emp');
                         const fullName = $(this).data('name');

                         //console.log("Selected Employee: ", fullName);
                         //console.log("Employee ID: ", employVal);

                         // Optionally, when page loads, show all first
                         fetchAndRenderEvents(employVal);
                         PopulateComboxProccess(DepartID, 0);
                     });
                 }

        });



    };
    const fetchAndRenderEvents =  async(employeeId) =>{
        let res = await FetchAuthenticate('@Url.Action("GetCalendarEvents", "Patrol")', { Employee_ID : employeeId });

        if (res && res.Success) {

            if (window.calendar) {
                window.calendar.removeAllEvents();

                if (res.Data && res.Data.length > 0) {
                    window.calendar.addEventSource(res.Data);
                }

                window.calendar.refetchEvents();
            }
        } else {
            if (window.calendar) {
                window.calendar.removeAllEvents();
                window.calendar.refetchEvents();
            }
        }
    }
    const PopulateComboxProccess = async (ID, mode) => {
        let res = await FetchAuthenticate('@Url.Action("GetProcesslist", "Patrol")', { depid: ID });

        if (res && res.Success) {
            if (mode === 0) {
                let select = $("#ProcessID");
                select.empty();

                $.each(res.Data, function (index, rowData) {
                    select.append('<option value="' + rowData.ProcessID + '">' + rowData.ProcessName + '</option>');
                });
            } else {
                let select = $("#EditProcessID");
                select.empty();

                $.each(res.Data, function (index, rowData) {
                    select.append('<option value="' + rowData.ProcessID + '">' + rowData.ProcessName + '</option>');
                });
            }
        }
    }
    const DateDisplay = () => {
        const today = new Date();

        // Get full month name
        const month = today.toLocaleString('en-US', { month: 'long' });

        // Get day of the month
        const day = today.getDate();

        // Get full weekday name
        const weekday = today.toLocaleString('en-US', { weekday: 'long' });

        // Final format: July 14, Monday
        const formattedDate = `${month} ${day}, ${weekday}`;
        $("#DateShow").text(formattedDate);
    };


    addform.addEventListener('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        formData.append('Employee_ID', employVal);
        formData.append('ModeID', 0);
        //console.log(data);
        let res = await postData('@Url.Action("SetActiveDateSchedule", "Patrol")', formData);
        if (res && res.Success) {
            $("#AddScheduleModal").modal("hide");
            // ✅ Refresh the calendar with updated events
            await fetchAndRenderEvents(employVal);
        }
    });
    editform.addEventListener('submit', async (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        formData.append('Employee_ID', employVal);
        formData.append('ModeID', 1);
        let res = await postData('@Url.Action("SetActiveDateSchedule", "Patrol")', formData);
        //console.log(res);

    });
    removebtn.addEventListener('click', async (e) => {
        e.preventDefault();
        let formData = new FormData();
        formData.append('ScheduleID', $("#EditScheduleID").val());
        var data = Object.fromEntries(formData);
        let res = await postData('@Url.Action("RemoveDateSchedule", "Patrol")', formData);
        if (res.StatusCode === 200) {
            $("#EditScheduleModal").modal("hide");
            await fetchAndRenderEvents(employVal);
        }

    });



    // Initialize Calendar (example with FullCalendar)
    document.addEventListener('DOMContentLoaded', function () {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        const formattedDate = `${year}-${month}-${day}`;
        //headerToolbar: {
        //    left: 'prev next',
        //        center: 'title',
        //            right: 'dayGridMonth,listWeek'
        //},
        const calendarEl = document.getElementById('calendar');

        window.calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            selectable: false,
            height: 'auto',
            headerToolbar: false,
            events: [], // Start empty

            dayCellDidMount: function (info) {
                const cellSunDate = info.date;

                // Highlights All Sunday
                const today = new Date();
                if (
                    cellSunDate.getFullYear() === today.getFullYear() &&
                    cellSunDate.getMonth() === today.getMonth() &&
                    cellSunDate.getDate() === today.getDate()
                ) {
                    info.el.style.backgroundColor = '#0eaa7b33'; // Highlight today
                }


                if (cellSunDate.getDay() === 0) {
                    info.el.style.backgroundColor = '#ffc0c033'; // Light red/orange background
                }


                // Format info.date to local date string
                //const cellDate = info.date.getFullYear() + '-' +
                //    String(info.date.getMonth() + 1).padStart(2, '0') + '-' +
                //    String(info.date.getDate()).padStart(2, '0');

                //if (cellDate === formattedDate) {
                //    info.el.style.backgroundColor = '#0eaa7b33';
                //    //info.el.style.color = 'white';
                //}
            },

            dateClick: function (info) {
                const clickedDate = info.dateStr;

                // ✅ Only trigger dateClick if no events exist on that day
                const hasEvent = calendar.getEvents().some(event =>
                    event.startStr.startsWith(clickedDate)
                );

                if (hasEvent) {
                    return; // Prevent "Add Schedule" if there’s already an event
                }


                $("#ScheduleID").val("0");
                $("#ScheduleDate").val(info.dateStr);
                $("#IsActive").val("0");

                if (employVal !== undefined) {
                    if (ActionRestrict() === false) return;

                    PopulateComboxProccess(DepartID, 0);
                    $("#AddScheduleModal").modal('show');
                }
            },

            eventClick: function (info) {
                const eventObj = info.event;
                $("#EditScheduleID").val(eventObj.id);
                $("#EditScheduleDate").val(eventObj.startStr);
                $("#EditIsActive").val("1");

                if (ActionRestrict() === false) return;

                PopulateComboxProccess(DepartID, 1);
                // Optional: Do something with it, like showing a modal or message
                $("#EditScheduleModal").modal('show');
            }
        });

        calendar.render();
    });

    const ActionRestrict = () => {
        userRole = localStorage.getItem("UserRole");
        if (userRole === "Leader" || userRole === "Users") {
            return false;
        }
    }

    const DepartmentName = (ID) => {
        switch (ID) {
            case 1:
                return "Molding";
                break;
            case 2:
                return "Press";
                break;
            case 3:
                return "Rotor";
                break;
            case 4:
                return "Winding";
                break;
            case 5:
                return "Circuit";
                break;
            default:
                return "Process-Control";
                break;
        }
    };


    function loadingDisplay() {
        TableDisplay.empty();
        const loadData = `<div class='Loadercontainer flex_center'>
                            <span class="loader"></span>
                            <p id="loadingStepText">Loading Inspectors...</p>
                        </div>`;
        TableDisplay.append(loadData);
    }


    function Loadingsteps(callback) {
        const steps = [
            "Loading Inspectors... "
        ];

        let stepIndex = 0;

        const interval = setInterval(() => {
            if (stepIndex < steps.length) {
                const stepText = document.getElementById("loadingStepText");
                if (stepText) stepText.innerText = steps[stepIndex];
                stepIndex++;
            } else {
                clearInterval(interval);
                if (typeof callback === "function") callback();
            }
        }, 800);
    }

    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            let searchText = $("#searchbox").val();

            const [inspect, employ] = await Promise.all([
                DateDisplay(),
                PopulateComboxInspector(searchText),
            ]);

            // Filter when selection changes
            $("#DepartmentID").on("change", function () {
                PopulateComboxInspector(searchText);
            });
            // Filter when user types in a Input
            $('#searchbox').on('input', function (e) {
                PopulateComboxInspector(e.target.value);
            });
        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }


    $(document).ready(() => {
        LoadPageData();
    });
</script>