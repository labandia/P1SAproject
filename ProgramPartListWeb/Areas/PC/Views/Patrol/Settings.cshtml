
@{
    ViewBag.Title = "Settings";
    Layout = "~/Areas/PC/Views/Shared/_PatrolLayout.cshtml";
}


<header>
    <h4 class="header__title">Account Settings</h4>
</header>



<div class="user__info">
    @*<img src="~/Content/Images/noimage.png" />*@
    <div class="user__names">
        <span id="fullnametext2"></span>
        <p id="Roles2"></p>
    </div>
</div>

<hr />

<h5 style="font-weight: 600;">Change password</h5>

<form class="ChangepassContainer" id="changeform">
    <div class="change__group">
        <label>Current Password :</label>
        <input type="password" name="currentpassword" id="currentpassword" placeholder="Input your old password" autofocus autocomplete="off"  />
    </div>
    <div class="change__group">
        <label>New Password :</label>
        <input type="password" name="newpassword" id="newpassword" placeholder="input new password" autocomplete="off"  />
    </div>

    <div class="change__group">
        <label>Confirm Password :</label>
        <input type="password" name="confirmpassword" id="confirmpassword" placeholder="Verify the password" autocomplete="off"  />
    </div>
    <p id="errorMessage" style="color:red;"></p>

    <button type="submit" class="primarybtn"><i class="fa-regular fa-floppy-disk"></i>  Save changes</button>
</form>

<script src="~/Scripts/Utilities.js"></script>
<script type="text/javascript">
    let nowpass;
    let UserID;
    const forms = document.getElementById('changeform');

    forms.addEventListener('submit', async(e) => {
        e.preventDefault();
        const newpass = document.getElementById("newpassword").value.trim();
        if (await Validateform()) {
            let formData = new FormData();
            formData.append("userID", UserID);
            formData.append("newpass", newpass);
            let res = await postData('/Auth/ChangePasswordUser', formData);
            if (res.StatusCode === 200) {
                Swal.fire({
                    title: "Success",
                    text: res.Message,
                    icon: "success",
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    Swal.fire({
                        title: "Sign out?",
                        text: "Log out to check the new password",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "OK"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location = "/PC/Patrol/index";
                        }
                    });
                });
            } 
        }
    });


    async function Validateform() {
        const current = document.getElementById("currentpassword").value.trim();;
        const newpass = document.getElementById("newpassword").value.trim();
        const matchpass = document.getElementById("confirmpassword").value.trim();;
        const err = document.getElementById("errorMessage"); // ✅ use vanilla

        err.textContent = "";

        if (!current || !newpass || !matchpass) {
            err.textContent = "All fields are required.";
            return false;
        }

        if (newpass.length < 8 || !/[A-Z]/.test(newpass) || !/[a-z]/.test(newpass) || !/[0-9]/.test(newpass)) {
            err.textContent = "New password must be at least 8 characters with uppercase, lowercase, and a number.";
            return false;
        }

        if (newpass !== matchpass) {
            err.textContent = "Passwords do not match.";
            return false;
        }

        let formData = new FormData();
        formData.append('datapass', nowpass);
        formData.append('currentpass', current);
        let res = await postData('/Auth/MatchPassword', formData);

        if (res == false) {
            err.textContent = "Current password is incorrect.";
            return;
        }

        err.textContent = "";
        return true;
   
    }
    async function Getuserinfo() {
        const accessToken = localStorage.getItem('accessToken');
        const result = await FetchAuthenticate('/User/GetUserInformation', { accessToken });
        nowpass = result.Password;
        UserID = result.userId;
    }


    // ############## DISPLAY ALL THE DATA TO THE PAGE ########################
    const LoadPageData = async () => {
        try {
            Getuserinfo();
        } catch (error) {
            console.error("Failed to load page data:", error);
        } finally {
            // Hide loading spinner whether success or failure
            //$("#loadingSpinner").hide();
        }
    }

    $(document).ready(() => {
        LoadPageData();
    });
</script>