async function refreshAccessToken() { let e = localStorage.getItem("Logout"), r = localStorage.getItem("refreshToken"); if (!r) return !1; try { let t = await fetch("/User/RefreshToken", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ refreshToken: r }) }), a = await t.json(); if (t.ok && a.accessToken) return localStorage.setItem("accessToken", a.accessToken), !0; console.warn("Refresh token failed. Logging out..."), localStorage.clear(), window.location.href = e } catch (n) { return console.error("Error refreshing token:", n), !1 } } window.FetchAuthenticate = async (e, r) => { var t = localStorage.getItem("accessToken"); let a = new URLSearchParams(r).toString(), n = `${e}?${a}`, o = async e => await fetch(n, { method: "GET", headers: { "Content-Type": "application/json", Authorization: "Bearer " + e } }); try { let s = await o(t), i = localStorage.getItem("Logout"); if (401 === s.status) { let c = await refreshAccessToken(); if (c) { if (s = await o(t = localStorage.getItem("accessToken")), 401 === s.status) { localStorage.clear(), window.location.href = i; return } if (401 === s.status) return i && (localStorage.clear(), window.location.href = i), null } else { localStorage.clear(), window.location.href = i; return } } let l = await s.json(); return l } catch (u) { console.error("Error fetching data:", u) } }, window.fetchData = async (e, r = {}) => { console.clear(); try { let t = new URLSearchParams(r).toString(), a = t ? `${e}?${t}` : e, n = await fetch(a, { method: "GET", headers: { "Content-Type": "application/json" } }), o = await n.json(); return o } catch (s) { return console.error("Fetch Error:", s), null } }, window.postData = async (e, r) => { console.clear(); try { let t = await fetch(e, { method: "POST", body: r }), a = await t.json(); return t.ok && !1 !== a.Success || console.error("Server error:", a.Message || "Unknown error"), a } catch (n) { return console.error("Error posting data:", n), null } }, window.postrawData = async (e, r) => { try { let t = await fetch(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(r) }), a; try { return a = await t.json() } catch (n) { console.error("Error parsing JSON:", n); let o = await t.text(); return console.error("Raw response:", o), { Success: !1, Message: "Invalid JSON response", Raw: o } } if (!t.ok || !1 === a.Success) return console.error("Server error:", a.Message || "Unknown error"), a } catch (s) { return console.error("Error posting data:", s), null } }, window.PullUserInformation = async () => { let e = localStorage.getItem("accessToken"), r = await fetch("/User/GetUserInformation", { method: "POST", headers: { Authorization: "Bearer " + e, "Content-Type": "application/json" } }); if (401 === r.status) { console.warn("Unauthorized"); return } let t = await r.json(); if (t.success) return t; console.warn(t.message || "Unknown error") }, window.IsLoginUser = (e = {}) => { let { storageKey: r, expectedValue: t, redirectUrl: a, redirectIfLoggedInUrl: n, expirationKey: o, maxHours: s } = { storageKey: "isLoggedInPatrol", expectedValue: "true", redirectUrl: "/PC/Patrol/index", redirectIfLoggedInUrl: null, expirationKey: null, maxHours: null, ...e }, i = localStorage.getItem(r); if (i === t && n) { if (o && s) { let c = localStorage.getItem(o); if (c) { let l = new Date(c), u = new Date, h = Math.abs(u - l) / 36e5; if (h <= s) { window.location.href = n; return } } } else { window.location.href = n; return } } if (i !== t) { let f = window.location.pathname, g = f !== a; if (g) { if ("function" == typeof ActionRestrict) { let w = ActionRestrict(); !1 !== w && (window.location.href = a) } else window.location.href = a } return } if (o && s) { let y = localStorage.getItem(o), d = window.location.pathname, p = new URL(a, window.location.origin).pathname; if (y) { let m = new Date(y), T = new Date, k = Math.abs(T - m) / 36e5; k > s && (localStorage.clear(), d !== p && (window.location.href = a)) } else localStorage.clear(), d !== p && (window.location.href = a) } }, window.logout = async () => { let e = localStorage.getItem("Logout"); try { localStorage.clear(), window.location.href = e } catch (r) { console.error("Logout failed:", r) } }, window.restrictChars = e => { var r = e.which || e.keycode; return !!(r >= 48) && !!(r <= 57) || 46 == r };